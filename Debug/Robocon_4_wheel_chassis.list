
Robocon_4_wheel_chassis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08006bc4  08006bc4  00007bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e08  08006e08  00008080  2**0
                  CONTENTS
  4 .ARM          00000008  08006e08  08006e08  00007e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e10  08006e10  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e10  08006e10  00007e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e14  08006e14  00007e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08006e18  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000080  08006e98  00008080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08006e98  00008564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015209  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb1  00000000  00000000  0001d2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0001ff70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0f  00000000  00000000  00021190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028295  00000000  00000000  00021f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158c5  00000000  00000000  0004a234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff377  00000000  00000000  0005faf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ee70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b4  00000000  00000000  0015eeb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00164568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006bac 	.word	0x08006bac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	08006bac 	.word	0x08006bac

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <calculateWheelPWM>:

#include "chassis_kinematics.h"
#include "main.h"

// Calculate wheel PWM values based on robot velocity
void calculateWheelPWM(RobotVelocity* robot_vel, WheelPWM* wheel_pwm) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
    if (fabsf(robot_vel->vy) < BRAKE_THRESHOLD && fabsf(robot_vel->vx) < BRAKE_THRESHOLD && fabsf(robot_vel->omega) < BRAKE_THRESHOLD) {
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80005d0:	eef0 7ae7 	vabs.f32	s15, s15
 80005d4:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800071c <calculateWheelPWM+0x15c>
 80005d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e0:	d526      	bpl.n	8000630 <calculateWheelPWM+0x70>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	edd3 7a00 	vldr	s15, [r3]
 80005e8:	eef0 7ae7 	vabs.f32	s15, s15
 80005ec:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800071c <calculateWheelPWM+0x15c>
 80005f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005f8:	d51a      	bpl.n	8000630 <calculateWheelPWM+0x70>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8000600:	eef0 7ae7 	vabs.f32	s15, s15
 8000604:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800071c <calculateWheelPWM+0x15c>
 8000608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800060c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000610:	d50e      	bpl.n	8000630 <calculateWheelPWM+0x70>
        applyBrake();
 8000612:	f000 f92d 	bl	8000870 <applyBrake>

        // Clear wheel speeds when braking
        wheel_pwm->front_left = 0;
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	2200      	movs	r2, #0
 800061a:	801a      	strh	r2, [r3, #0]
        wheel_pwm->front_right = 0;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2200      	movs	r2, #0
 8000620:	805a      	strh	r2, [r3, #2]
        wheel_pwm->rear_left = 0;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2200      	movs	r2, #0
 8000626:	809a      	strh	r2, [r3, #4]
        wheel_pwm->rear_right = 0;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2200      	movs	r2, #0
 800062c:	80da      	strh	r2, [r3, #6]
        return;
 800062e:	e071      	b.n	8000714 <calculateWheelPWM+0x154>
    }
    // Scale down the movements
    float scaled_vx = robot_vel->vx * MOVEMENT_SCALE;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	edd3 7a00 	vldr	s15, [r3]
 8000636:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000720 <calculateWheelPWM+0x160>
 800063a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800063e:	edc7 7a05 	vstr	s15, [r7, #20]
    float scaled_vy = robot_vel->vy * MOVEMENT_SCALE;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	edd3 7a01 	vldr	s15, [r3, #4]
 8000648:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8000720 <calculateWheelPWM+0x160>
 800064c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000650:	edc7 7a04 	vstr	s15, [r7, #16]
    float scaled_omega = robot_vel->omega * ROTATION_SCALE;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	edd3 7a02 	vldr	s15, [r3, #8]
 800065a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800065e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000662:	edc7 7a03 	vstr	s15, [r7, #12]

    // Calculate wheel speeds with scaled values
    wheel_pwm->front_left = (int16_t)((scaled_vx + scaled_vy + scaled_omega) * MAX_PWM);
 8000666:	ed97 7a05 	vldr	s14, [r7, #20]
 800066a:	edd7 7a04 	vldr	s15, [r7, #16]
 800066e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000672:	edd7 7a03 	vldr	s15, [r7, #12]
 8000676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800067a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000724 <calculateWheelPWM+0x164>
 800067e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000686:	ee17 3a90 	vmov	r3, s15
 800068a:	b21a      	sxth	r2, r3
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	801a      	strh	r2, [r3, #0]
    wheel_pwm->front_right = (int16_t)((scaled_vx - scaled_vy - scaled_omega) * MAX_PWM);
 8000690:	ed97 7a05 	vldr	s14, [r7, #20]
 8000694:	edd7 7a04 	vldr	s15, [r7, #16]
 8000698:	ee37 7a67 	vsub.f32	s14, s14, s15
 800069c:	edd7 7a03 	vldr	s15, [r7, #12]
 80006a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006a4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000724 <calculateWheelPWM+0x164>
 80006a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b0:	ee17 3a90 	vmov	r3, s15
 80006b4:	b21a      	sxth	r2, r3
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	805a      	strh	r2, [r3, #2]
    wheel_pwm->rear_left = (int16_t)((scaled_vx - scaled_vy + scaled_omega) * MAX_PWM);
 80006ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80006be:	edd7 7a04 	vldr	s15, [r7, #16]
 80006c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80006ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ce:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000724 <calculateWheelPWM+0x164>
 80006d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006da:	ee17 3a90 	vmov	r3, s15
 80006de:	b21a      	sxth	r2, r3
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	809a      	strh	r2, [r3, #4]
    wheel_pwm->rear_right = (int16_t)((scaled_vx + scaled_vy - scaled_omega) * MAX_PWM);
 80006e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80006e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80006ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80006f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006f8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000724 <calculateWheelPWM+0x164>
 80006fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000704:	ee17 3a90 	vmov	r3, s15
 8000708:	b21a      	sxth	r2, r3
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	80da      	strh	r2, [r3, #6]

    setMotorPWM(wheel_pwm);
 800070e:	6838      	ldr	r0, [r7, #0]
 8000710:	f000 f80a 	bl	8000728 <setMotorPWM>
}
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	3e4ccccd 	.word	0x3e4ccccd
 8000720:	3f19999a 	.word	0x3f19999a
 8000724:	43960000 	.word	0x43960000

08000728 <setMotorPWM>:

// Set motor PWM values
void setMotorPWM(WheelPWM* wheel_pwm) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
    // Front right motor
    if (wheel_pwm->front_right >= 0) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db0b      	blt.n	8000752 <setMotorPWM+0x2a>
        HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	2110      	movs	r1, #16
 800073e:	484a      	ldr	r0, [pc, #296]	@ (8000868 <setMotorPWM+0x140>)
 8000740:	f001 fcca 	bl	80020d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800074a:	4847      	ldr	r0, [pc, #284]	@ (8000868 <setMotorPWM+0x140>)
 800074c:	f001 fcc4 	bl	80020d8 <HAL_GPIO_WritePin>
 8000750:	e00a      	b.n	8000768 <setMotorPWM+0x40>
    } else {
        HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2110      	movs	r1, #16
 8000756:	4844      	ldr	r0, [pc, #272]	@ (8000868 <setMotorPWM+0x140>)
 8000758:	f001 fcbe 	bl	80020d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000762:	4841      	ldr	r0, [pc, #260]	@ (8000868 <setMotorPWM+0x140>)
 8000764:	f001 fcb8 	bl	80020d8 <HAL_GPIO_WritePin>
    }
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t)abs(wheel_pwm->front_right));
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800076e:	2b00      	cmp	r3, #0
 8000770:	bfb8      	it	lt
 8000772:	425b      	neglt	r3, r3
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b3d      	ldr	r3, [pc, #244]	@ (800086c <setMotorPWM+0x144>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	635a      	str	r2, [r3, #52]	@ 0x34

    // Front left motor
    if (wheel_pwm->front_left >= 0) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000782:	2b00      	cmp	r3, #0
 8000784:	db0b      	blt.n	800079e <setMotorPWM+0x76>
        HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2120      	movs	r1, #32
 800078a:	4837      	ldr	r0, [pc, #220]	@ (8000868 <setMotorPWM+0x140>)
 800078c:	f001 fca4 	bl	80020d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000796:	4834      	ldr	r0, [pc, #208]	@ (8000868 <setMotorPWM+0x140>)
 8000798:	f001 fc9e 	bl	80020d8 <HAL_GPIO_WritePin>
 800079c:	e00a      	b.n	80007b4 <setMotorPWM+0x8c>
    } else {
        HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2120      	movs	r1, #32
 80007a2:	4831      	ldr	r0, [pc, #196]	@ (8000868 <setMotorPWM+0x140>)
 80007a4:	f001 fc98 	bl	80020d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ae:	482e      	ldr	r0, [pc, #184]	@ (8000868 <setMotorPWM+0x140>)
 80007b0:	f001 fc92 	bl	80020d8 <HAL_GPIO_WritePin>
    }
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (uint32_t)abs(wheel_pwm->front_left));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	bfb8      	it	lt
 80007be:	425b      	neglt	r3, r3
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b2a      	ldr	r3, [pc, #168]	@ (800086c <setMotorPWM+0x144>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	639a      	str	r2, [r3, #56]	@ 0x38

    // Rear right motor
    if (wheel_pwm->rear_right >= 0) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	db0b      	blt.n	80007ea <setMotorPWM+0xc2>
        HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2140      	movs	r1, #64	@ 0x40
 80007d6:	4824      	ldr	r0, [pc, #144]	@ (8000868 <setMotorPWM+0x140>)
 80007d8:	f001 fc7e 	bl	80020d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007e2:	4821      	ldr	r0, [pc, #132]	@ (8000868 <setMotorPWM+0x140>)
 80007e4:	f001 fc78 	bl	80020d8 <HAL_GPIO_WritePin>
 80007e8:	e00a      	b.n	8000800 <setMotorPWM+0xd8>
    } else {
        HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2140      	movs	r1, #64	@ 0x40
 80007ee:	481e      	ldr	r0, [pc, #120]	@ (8000868 <setMotorPWM+0x140>)
 80007f0:	f001 fc72 	bl	80020d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007fa:	481b      	ldr	r0, [pc, #108]	@ (8000868 <setMotorPWM+0x140>)
 80007fc:	f001 fc6c 	bl	80020d8 <HAL_GPIO_WritePin>
    }
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint32_t)abs(wheel_pwm->rear_right));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000806:	2b00      	cmp	r3, #0
 8000808:	bfb8      	it	lt
 800080a:	425b      	neglt	r3, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <setMotorPWM+0x144>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Rear left motor
    if (wheel_pwm->rear_left >= 0) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	db0b      	blt.n	8000836 <setMotorPWM+0x10e>
        HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2180      	movs	r1, #128	@ 0x80
 8000822:	4811      	ldr	r0, [pc, #68]	@ (8000868 <setMotorPWM+0x140>)
 8000824:	f001 fc58 	bl	80020d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800082e:	480e      	ldr	r0, [pc, #56]	@ (8000868 <setMotorPWM+0x140>)
 8000830:	f001 fc52 	bl	80020d8 <HAL_GPIO_WritePin>
 8000834:	e00a      	b.n	800084c <setMotorPWM+0x124>
    } else {
        HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2180      	movs	r1, #128	@ 0x80
 800083a:	480b      	ldr	r0, [pc, #44]	@ (8000868 <setMotorPWM+0x140>)
 800083c:	f001 fc4c 	bl	80020d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000846:	4808      	ldr	r0, [pc, #32]	@ (8000868 <setMotorPWM+0x140>)
 8000848:	f001 fc46 	bl	80020d8 <HAL_GPIO_WritePin>
    }
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, (uint32_t)abs(wheel_pwm->rear_left));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	bfb8      	it	lt
 8000856:	425b      	neglt	r3, r3
 8000858:	b29a      	uxth	r2, r3
 800085a:	4b04      	ldr	r3, [pc, #16]	@ (800086c <setMotorPWM+0x144>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	48000400 	.word	0x48000400
 800086c:	200001cc 	.word	0x200001cc

08000870 <applyBrake>:

// Apply brake to all motors
void applyBrake(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
    // Set PWM to 0 for all channels
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000874:	4b1e      	ldr	r3, [pc, #120]	@ (80008f0 <applyBrake+0x80>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800087c:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <applyBrake+0x80>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2200      	movs	r2, #0
 8000882:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000884:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <applyBrake+0x80>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2200      	movs	r2, #0
 800088a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 800088c:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <applyBrake+0x80>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2200      	movs	r2, #0
 8000892:	641a      	str	r2, [r3, #64]	@ 0x40

    // Set brake mode for all motors (INA and INB high)
    // Front left
    HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2110      	movs	r1, #16
 8000898:	4816      	ldr	r0, [pc, #88]	@ (80008f4 <applyBrake+0x84>)
 800089a:	f001 fc1d 	bl	80020d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008a4:	4813      	ldr	r0, [pc, #76]	@ (80008f4 <applyBrake+0x84>)
 80008a6:	f001 fc17 	bl	80020d8 <HAL_GPIO_WritePin>

    // Front right
    HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2120      	movs	r1, #32
 80008ae:	4811      	ldr	r0, [pc, #68]	@ (80008f4 <applyBrake+0x84>)
 80008b0:	f001 fc12 	bl	80020d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ba:	480e      	ldr	r0, [pc, #56]	@ (80008f4 <applyBrake+0x84>)
 80008bc:	f001 fc0c 	bl	80020d8 <HAL_GPIO_WritePin>

    // Rear left
    HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2140      	movs	r1, #64	@ 0x40
 80008c4:	480b      	ldr	r0, [pc, #44]	@ (80008f4 <applyBrake+0x84>)
 80008c6:	f001 fc07 	bl	80020d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008d0:	4808      	ldr	r0, [pc, #32]	@ (80008f4 <applyBrake+0x84>)
 80008d2:	f001 fc01 	bl	80020d8 <HAL_GPIO_WritePin>

    // Rear right
    HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, GPIO_PIN_SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	4806      	ldr	r0, [pc, #24]	@ (80008f4 <applyBrake+0x84>)
 80008dc:	f001 fbfc 	bl	80020d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008e6:	4803      	ldr	r0, [pc, #12]	@ (80008f4 <applyBrake+0x84>)
 80008e8:	f001 fbf6 	bl	80020d8 <HAL_GPIO_WritePin>
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200001cc 	.word	0x200001cc
 80008f4:	48000400 	.word	0x48000400

080008f8 <JOYSTICK_Init>:
static char _data_buffer[256];
static uint16_t _buf_index = 0;
static JoystickData _current_data = {0};
static bool _new_data_available = false;

void JOYSTICK_Init(UART_HandleTypeDef *huart) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
    _huart = huart;
 8000900:	4a07      	ldr	r2, [pc, #28]	@ (8000920 <JOYSTICK_Init+0x28>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
    memset(_data_buffer, 0, sizeof(_data_buffer));
 8000906:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800090a:	2100      	movs	r1, #0
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <JOYSTICK_Init+0x2c>)
 800090e:	f004 fe77 	bl	8005600 <memset>
    _buf_index = 0;
 8000912:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <JOYSTICK_Init+0x30>)
 8000914:	2200      	movs	r2, #0
 8000916:	801a      	strh	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000009c 	.word	0x2000009c
 8000924:	200000a0 	.word	0x200000a0
 8000928:	200001a0 	.word	0x200001a0

0800092c <JOYSTICK_SetTimeout>:

void JOYSTICK_SetTimeout(uint32_t timeout) {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
    _timeout = timeout;
 8000934:	4a04      	ldr	r2, [pc, #16]	@ (8000948 <JOYSTICK_SetTimeout+0x1c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000000 	.word	0x20000000

0800094c <JOYSTICK_Process>:

void JOYSTICK_Process(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b090      	sub	sp, #64	@ 0x40
 8000950:	af08      	add	r7, sp, #32
    char c;

    // Read until buffer full or newline received
    while (_buf_index < sizeof(_data_buffer) - 1) {
 8000952:	e053      	b.n	80009fc <JOYSTICK_Process+0xb0>
        if (HAL_UART_Receive(_huart, (uint8_t *)&c, 1, _timeout) == HAL_OK) {
 8000954:	4b2e      	ldr	r3, [pc, #184]	@ (8000a10 <JOYSTICK_Process+0xc4>)
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <JOYSTICK_Process+0xc8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f107 011f 	add.w	r1, r7, #31
 8000960:	2201      	movs	r2, #1
 8000962:	f003 fe23 	bl	80045ac <HAL_UART_Receive>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d14c      	bne.n	8000a06 <JOYSTICK_Process+0xba>
            if (c == '\n') {
 800096c:	7ffb      	ldrb	r3, [r7, #31]
 800096e:	2b0a      	cmp	r3, #10
 8000970:	d13a      	bne.n	80009e8 <JOYSTICK_Process+0x9c>
                // Process complete message
                _data_buffer[_buf_index] = '\0';
 8000972:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <JOYSTICK_Process+0xcc>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	4b28      	ldr	r3, [pc, #160]	@ (8000a1c <JOYSTICK_Process+0xd0>)
 800097a:	2100      	movs	r1, #0
 800097c:	5499      	strb	r1, [r3, r2]

                // Temporary variables for parsing
                uint16_t dpad, buttons, misc;
                int32_t ax, ay, rax, ray, brake, throttle;

                sscanf(_data_buffer,
 800097e:	f107 011a 	add.w	r1, r7, #26
 8000982:	f107 021c 	add.w	r2, r7, #28
 8000986:	f107 0318 	add.w	r3, r7, #24
 800098a:	9306      	str	r3, [sp, #24]
 800098c:	463b      	mov	r3, r7
 800098e:	9305      	str	r3, [sp, #20]
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	9304      	str	r3, [sp, #16]
 8000994:	f107 0308 	add.w	r3, r7, #8
 8000998:	9303      	str	r3, [sp, #12]
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	460b      	mov	r3, r1
 80009ae:	491c      	ldr	r1, [pc, #112]	@ (8000a20 <JOYSTICK_Process+0xd4>)
 80009b0:	481a      	ldr	r0, [pc, #104]	@ (8000a1c <JOYSTICK_Process+0xd0>)
 80009b2:	f004 fce1 	bl	8005378 <siscanf>
                       "dpad: 0x%04hx, buttons: 0x%04hx, axis L: %ld, %ld, axis R: %ld, %ld, brake: %ld, throttle: %ld, misc: 0x%04hx",
                       &dpad, &buttons, &ax, &ay, &rax, &ray, &brake, &throttle, &misc);

                // Update data structure
                _current_data.axisX = ax;
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a24 <JOYSTICK_Process+0xd8>)
 80009ba:	6013      	str	r3, [r2, #0]
                _current_data.axisY = ay;
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	4a19      	ldr	r2, [pc, #100]	@ (8000a24 <JOYSTICK_Process+0xd8>)
 80009c0:	6053      	str	r3, [r2, #4]
                _current_data.axisRX = rax;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4a17      	ldr	r2, [pc, #92]	@ (8000a24 <JOYSTICK_Process+0xd8>)
 80009c6:	6093      	str	r3, [r2, #8]
                _current_data.buttons = buttons;
 80009c8:	8b7a      	ldrh	r2, [r7, #26]
 80009ca:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <JOYSTICK_Process+0xd8>)
 80009cc:	819a      	strh	r2, [r3, #12]
                _new_data_available = true;
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <JOYSTICK_Process+0xdc>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]

//                printf("dpad: 0x%04hx, buttons: 0x%04hx, axis L: %ld, %ld, axis R: %ld, %ld, brake: %ld, throttle: %ld, misc: 0x%04hx\n",
//                		dpad, buttons, ax, ay, rax, ray, brake, throttle, misc);

                // Reset buffer
                memset(_data_buffer, 0, sizeof(_data_buffer));
 80009d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009d8:	2100      	movs	r1, #0
 80009da:	4810      	ldr	r0, [pc, #64]	@ (8000a1c <JOYSTICK_Process+0xd0>)
 80009dc:	f004 fe10 	bl	8005600 <memset>
                _buf_index = 0;
 80009e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <JOYSTICK_Process+0xcc>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	801a      	strh	r2, [r3, #0]
                break;
 80009e6:	e00f      	b.n	8000a08 <JOYSTICK_Process+0xbc>
            }
            _data_buffer[_buf_index++] = c;
 80009e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <JOYSTICK_Process+0xcc>)
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	1c5a      	adds	r2, r3, #1
 80009ee:	b291      	uxth	r1, r2
 80009f0:	4a09      	ldr	r2, [pc, #36]	@ (8000a18 <JOYSTICK_Process+0xcc>)
 80009f2:	8011      	strh	r1, [r2, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	7ff9      	ldrb	r1, [r7, #31]
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <JOYSTICK_Process+0xd0>)
 80009fa:	5499      	strb	r1, [r3, r2]
    while (_buf_index < sizeof(_data_buffer) - 1) {
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <JOYSTICK_Process+0xcc>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a02:	d9a7      	bls.n	8000954 <JOYSTICK_Process+0x8>
        } else {
            // Timeout occurred
            break;
        }
    }
}
 8000a04:	e000      	b.n	8000a08 <JOYSTICK_Process+0xbc>
            break;
 8000a06:	bf00      	nop
}
 8000a08:	bf00      	nop
 8000a0a:	3720      	adds	r7, #32
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000009c 	.word	0x2000009c
 8000a14:	20000000 	.word	0x20000000
 8000a18:	200001a0 	.word	0x200001a0
 8000a1c:	200000a0 	.word	0x200000a0
 8000a20:	08006bc4 	.word	0x08006bc4
 8000a24:	200001a4 	.word	0x200001a4
 8000a28:	200001b4 	.word	0x200001b4

08000a2c <JOYSTICK_NewDataAvailable>:

bool JOYSTICK_NewDataAvailable(void) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
    return _new_data_available;
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <JOYSTICK_NewDataAvailable+0x14>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200001b4 	.word	0x200001b4

08000a44 <JOYSTICK_GetData>:

JoystickData JOYSTICK_GetData(void) {
 8000a44:	b490      	push	{r4, r7}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
    _new_data_available = false;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <JOYSTICK_GetData+0x28>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
    return _current_data;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a06      	ldr	r2, [pc, #24]	@ (8000a70 <JOYSTICK_GetData+0x2c>)
 8000a56:	461c      	mov	r4, r3
 8000a58:	4613      	mov	r3, r2
 8000a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc90      	pop	{r4, r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200001b4 	.word	0x200001b4
 8000a70:	200001a4 	.word	0x200001a4

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7a:	f000 ffa9 	bl	80019d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  JOYSTICK_Init(&huart4);  // Pass your UART handle
 8000a7e:	4890      	ldr	r0, [pc, #576]	@ (8000cc0 <main+0x24c>)
 8000a80:	f7ff ff3a 	bl	80008f8 <JOYSTICK_Init>
  JOYSTICK_SetTimeout(100); // Optional: Set custom timeout
 8000a84:	2064      	movs	r0, #100	@ 0x64
 8000a86:	f7ff ff51 	bl	800092c <JOYSTICK_SetTimeout>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8a:	f000 f93d 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8e:	f000 fab9 	bl	8001004 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000a92:	f000 f985 	bl	8000da0 <MX_TIM3_Init>
  MX_UART4_Init();
 8000a96:	f000 fa1b 	bl	8000ed0 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000a9a:	f000 fa67 	bl	8000f6c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4888      	ldr	r0, [pc, #544]	@ (8000cc4 <main+0x250>)
 8000aa2:	f002 fc33 	bl	800330c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	4886      	ldr	r0, [pc, #536]	@ (8000cc4 <main+0x250>)
 8000aaa:	f002 fc2f 	bl	800330c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000aae:	2108      	movs	r1, #8
 8000ab0:	4884      	ldr	r0, [pc, #528]	@ (8000cc4 <main+0x250>)
 8000ab2:	f002 fc2b 	bl	800330c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000ab6:	210c      	movs	r1, #12
 8000ab8:	4882      	ldr	r0, [pc, #520]	@ (8000cc4 <main+0x250>)
 8000aba:	f002 fc27 	bl	800330c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 fdd2 	bl	8001668 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 fe30 	bl	800172c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000acc:	4b7e      	ldr	r3, [pc, #504]	@ (8000cc8 <main+0x254>)
 8000ace:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000ad4:	4b7c      	ldr	r3, [pc, #496]	@ (8000cc8 <main+0x254>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000ada:	4b7b      	ldr	r3, [pc, #492]	@ (8000cc8 <main+0x254>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000ae0:	4b79      	ldr	r3, [pc, #484]	@ (8000cc8 <main+0x254>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000ae6:	4b78      	ldr	r3, [pc, #480]	@ (8000cc8 <main+0x254>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000aec:	4976      	ldr	r1, [pc, #472]	@ (8000cc8 <main+0x254>)
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 fe9c 	bl	800182c <BSP_COM_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <main+0x8a>
  {
    Error_Handler();
 8000afa:	f000 fb67 	bl	80011cc <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Robocon Subsystem_1 4 Wheel Chassis Initialized\n\r");
 8000afe:	4873      	ldr	r0, [pc, #460]	@ (8000ccc <main+0x258>)
 8000b00:	f004 fd6c 	bl	80055dc <iprintf>

  /* -- Sample board code to switch on led ---- */
  BSP_LED_On(LED_GREEN);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f000 fde5 	bl	80016d4 <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000b0a:	4b71      	ldr	r3, [pc, #452]	@ (8000cd0 <main+0x25c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d105      	bne.n	8000b1e <main+0xaa>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000b12:	4b6f      	ldr	r3, [pc, #444]	@ (8000cd0 <main+0x25c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle led ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f000 fdf1 	bl	8001700 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
    }

    JOYSTICK_Process();
 8000b1e:	f7ff ff15 	bl	800094c <JOYSTICK_Process>

    // Check for joystick timeout
    if (HAL_GetTick() - lastJoystickUpdate > JOYSTICK_TIMEOUT_MS) {
 8000b22:	f000 ffb9 	bl	8001a98 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	4b6a      	ldr	r3, [pc, #424]	@ (8000cd4 <main+0x260>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b32:	d90c      	bls.n	8000b4e <main+0xda>
        // Gradually reduce speed when joystick times out
        target_xSpeed = 0.0f;
 8000b34:	4b68      	ldr	r3, [pc, #416]	@ (8000cd8 <main+0x264>)
 8000b36:	f04f 0200 	mov.w	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
        target_ySpeed = 0.0f;
 8000b3c:	4b67      	ldr	r3, [pc, #412]	@ (8000cdc <main+0x268>)
 8000b3e:	f04f 0200 	mov.w	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
        target_rot = 0.0f;
 8000b44:	4b66      	ldr	r3, [pc, #408]	@ (8000ce0 <main+0x26c>)
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	e065      	b.n	8000c1a <main+0x1a6>
    }
    // Normal joystick control code
    else if (JOYSTICK_NewDataAvailable()) {
 8000b4e:	f7ff ff6d 	bl	8000a2c <JOYSTICK_NewDataAvailable>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d060      	beq.n	8000c1a <main+0x1a6>
        JoystickData data = JOYSTICK_GetData();
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff72 	bl	8000a44 <JOYSTICK_GetData>
        lastJoystickUpdate = HAL_GetTick();
 8000b60:	f000 ff9a 	bl	8001a98 <HAL_GetTick>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4a5b      	ldr	r2, [pc, #364]	@ (8000cd4 <main+0x260>)
 8000b68:	6013      	str	r3, [r2, #0]

        // Scale joystick inputs to [-1, 1] range
        target_xSpeed = -(float)data.axisX / 512.0f;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b74:	eeb1 7a67 	vneg.f32	s14, s15
 8000b78:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8000ce4 <main+0x270>
 8000b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b80:	4b55      	ldr	r3, [pc, #340]	@ (8000cd8 <main+0x264>)
 8000b82:	edc3 7a00 	vstr	s15, [r3]
        target_ySpeed = (float)data.axisY / 512.0f;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	ee07 3a90 	vmov	s15, r3
 8000b8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b90:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8000ce4 <main+0x270>
 8000b94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b98:	4b50      	ldr	r3, [pc, #320]	@ (8000cdc <main+0x268>)
 8000b9a:	edc3 7a00 	vstr	s15, [r3]
        target_rot = -(float)data.axisRX / 512.0f;
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	ee07 3a90 	vmov	s15, r3
 8000ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ba8:	eeb1 7a67 	vneg.f32	s14, s15
 8000bac:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8000ce4 <main+0x270>
 8000bb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb4:	4b4a      	ldr	r3, [pc, #296]	@ (8000ce0 <main+0x26c>)
 8000bb6:	edc3 7a00 	vstr	s15, [r3]

        // Apply deadzone
        if (fabsf(target_xSpeed) < JOYSTICK_DEADZONE) target_xSpeed = 0;
 8000bba:	4b47      	ldr	r3, [pc, #284]	@ (8000cd8 <main+0x264>)
 8000bbc:	edd3 7a00 	vldr	s15, [r3]
 8000bc0:	eef0 7ae7 	vabs.f32	s15, s15
 8000bc4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8000ce8 <main+0x274>
 8000bc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd0:	d503      	bpl.n	8000bda <main+0x166>
 8000bd2:	4b41      	ldr	r3, [pc, #260]	@ (8000cd8 <main+0x264>)
 8000bd4:	f04f 0200 	mov.w	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
        if (fabsf(target_ySpeed) < JOYSTICK_DEADZONE) target_ySpeed = 0;
 8000bda:	4b40      	ldr	r3, [pc, #256]	@ (8000cdc <main+0x268>)
 8000bdc:	edd3 7a00 	vldr	s15, [r3]
 8000be0:	eef0 7ae7 	vabs.f32	s15, s15
 8000be4:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8000ce8 <main+0x274>
 8000be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf0:	d503      	bpl.n	8000bfa <main+0x186>
 8000bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8000cdc <main+0x268>)
 8000bf4:	f04f 0200 	mov.w	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
        if (fabsf(target_rot) < JOYSTICK_DEADZONE) target_rot = 0;
 8000bfa:	4b39      	ldr	r3, [pc, #228]	@ (8000ce0 <main+0x26c>)
 8000bfc:	edd3 7a00 	vldr	s15, [r3]
 8000c00:	eef0 7ae7 	vabs.f32	s15, s15
 8000c04:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8000ce8 <main+0x274>
 8000c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c10:	d503      	bpl.n	8000c1a <main+0x1a6>
 8000c12:	4b33      	ldr	r3, [pc, #204]	@ (8000ce0 <main+0x26c>)
 8000c14:	f04f 0200 	mov.w	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
//        // Update last button state for edge detection
//        lastButtonState = currentButtonState;
    }

    // Smooth the speed changes
    xSpeed = smoothValue(xSpeed, target_xSpeed, SMOOTHING_FACTOR, MAX_ACCELERATION);
 8000c1a:	4b34      	ldr	r3, [pc, #208]	@ (8000cec <main+0x278>)
 8000c1c:	edd3 7a00 	vldr	s15, [r3]
 8000c20:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd8 <main+0x264>)
 8000c22:	ed93 7a00 	vldr	s14, [r3]
 8000c26:	eddf 1a32 	vldr	s3, [pc, #200]	@ 8000cf0 <main+0x27c>
 8000c2a:	ed9f 1a32 	vldr	s2, [pc, #200]	@ 8000cf4 <main+0x280>
 8000c2e:	eef0 0a47 	vmov.f32	s1, s14
 8000c32:	eeb0 0a67 	vmov.f32	s0, s15
 8000c36:	f000 fa3d 	bl	80010b4 <smoothValue>
 8000c3a:	eef0 7a40 	vmov.f32	s15, s0
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cec <main+0x278>)
 8000c40:	edc3 7a00 	vstr	s15, [r3]
    ySpeed = smoothValue(ySpeed, target_ySpeed, SMOOTHING_FACTOR, MAX_ACCELERATION);
 8000c44:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf8 <main+0x284>)
 8000c46:	edd3 7a00 	vldr	s15, [r3]
 8000c4a:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <main+0x268>)
 8000c4c:	ed93 7a00 	vldr	s14, [r3]
 8000c50:	eddf 1a27 	vldr	s3, [pc, #156]	@ 8000cf0 <main+0x27c>
 8000c54:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 8000cf4 <main+0x280>
 8000c58:	eef0 0a47 	vmov.f32	s1, s14
 8000c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c60:	f000 fa28 	bl	80010b4 <smoothValue>
 8000c64:	eef0 7a40 	vmov.f32	s15, s0
 8000c68:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <main+0x284>)
 8000c6a:	edc3 7a00 	vstr	s15, [r3]
    rot = smoothValue(rot, target_rot, SMOOTHING_FACTOR, MAX_ACCELERATION);
 8000c6e:	4b23      	ldr	r3, [pc, #140]	@ (8000cfc <main+0x288>)
 8000c70:	edd3 7a00 	vldr	s15, [r3]
 8000c74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <main+0x26c>)
 8000c76:	ed93 7a00 	vldr	s14, [r3]
 8000c7a:	eddf 1a1d 	vldr	s3, [pc, #116]	@ 8000cf0 <main+0x27c>
 8000c7e:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 8000cf4 <main+0x280>
 8000c82:	eef0 0a47 	vmov.f32	s1, s14
 8000c86:	eeb0 0a67 	vmov.f32	s0, s15
 8000c8a:	f000 fa13 	bl	80010b4 <smoothValue>
 8000c8e:	eef0 7a40 	vmov.f32	s15, s0
 8000c92:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <main+0x288>)
 8000c94:	edc3 7a00 	vstr	s15, [r3]

    // Set robot velocity
    robot_vel.vx = rot;
 8000c98:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <main+0x288>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a18      	ldr	r2, [pc, #96]	@ (8000d00 <main+0x28c>)
 8000c9e:	6013      	str	r3, [r2, #0]
    robot_vel.vy = ySpeed;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <main+0x284>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a16      	ldr	r2, [pc, #88]	@ (8000d00 <main+0x28c>)
 8000ca6:	6053      	str	r3, [r2, #4]
    robot_vel.omega = xSpeed;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <main+0x278>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a14      	ldr	r2, [pc, #80]	@ (8000d00 <main+0x28c>)
 8000cae:	6093      	str	r3, [r2, #8]

    // Calculate and set PWM values
    calculateWheelPWM(&robot_vel, &wheel_pwm);
 8000cb0:	4914      	ldr	r1, [pc, #80]	@ (8000d04 <main+0x290>)
 8000cb2:	4813      	ldr	r0, [pc, #76]	@ (8000d00 <main+0x28c>)
 8000cb4:	f7ff fc84 	bl	80005c0 <calculateWheelPWM>
//    setMotorPWM(&wheel_pwm);

    HAL_Delay(10);  // Control loop delay
 8000cb8:	200a      	movs	r0, #10
 8000cba:	f000 fef9 	bl	8001ab0 <HAL_Delay>
    if (BspButtonState == BUTTON_PRESSED)
 8000cbe:	e724      	b.n	8000b0a <main+0x96>
 8000cc0:	20000218 	.word	0x20000218
 8000cc4:	200001cc 	.word	0x200001cc
 8000cc8:	200001b8 	.word	0x200001b8
 8000ccc:	08006c34 	.word	0x08006c34
 8000cd0:	200001c8 	.word	0x200001c8
 8000cd4:	20000358 	.word	0x20000358
 8000cd8:	2000034c 	.word	0x2000034c
 8000cdc:	20000350 	.word	0x20000350
 8000ce0:	20000354 	.word	0x20000354
 8000ce4:	44000000 	.word	0x44000000
 8000ce8:	3e4ccccd 	.word	0x3e4ccccd
 8000cec:	20000340 	.word	0x20000340
 8000cf0:	3e19999a 	.word	0x3e19999a
 8000cf4:	3ecccccd 	.word	0x3ecccccd
 8000cf8:	20000344 	.word	0x20000344
 8000cfc:	20000348 	.word	0x20000348
 8000d00:	2000035c 	.word	0x2000035c
 8000d04:	20000368 	.word	0x20000368

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b094      	sub	sp, #80	@ 0x50
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0318 	add.w	r3, r7, #24
 8000d12:	2238      	movs	r2, #56	@ 0x38
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f004 fc72 	bl	8005600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f001 fa06 	bl	800213c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3a:	2340      	movs	r3, #64	@ 0x40
 8000d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d42:	2302      	movs	r3, #2
 8000d44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000d46:	2304      	movs	r3, #4
 8000d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d4a:	2355      	movs	r3, #85	@ 0x55
 8000d4c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5a:	f107 0318 	add.w	r3, r7, #24
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 faa0 	bl	80022a4 <HAL_RCC_OscConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d6a:	f000 fa2f 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6e:	230f      	movs	r3, #15
 8000d70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d72:	2303      	movs	r3, #3
 8000d74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2104      	movs	r1, #4
 8000d86:	4618      	mov	r0, r3
 8000d88:	f001 fd9e 	bl	80028c8 <HAL_RCC_ClockConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d92:	f000 fa1b 	bl	80011cc <Error_Handler>
  }
}
 8000d96:	bf00      	nop
 8000d98:	3750      	adds	r7, #80	@ 0x50
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08e      	sub	sp, #56	@ 0x38
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]
 8000dce:	615a      	str	r2, [r3, #20]
 8000dd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000dd4:	4a3d      	ldr	r2, [pc, #244]	@ (8000ecc <MX_TIM3_Init+0x12c>)
 8000dd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8000dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000dda:	22a9      	movs	r2, #169	@ 0xa9
 8000ddc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dde:	4b3a      	ldr	r3, [pc, #232]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8000de4:	4b38      	ldr	r3, [pc, #224]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000de6:	22c7      	movs	r2, #199	@ 0xc7
 8000de8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dea:	4b37      	ldr	r3, [pc, #220]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df0:	4b35      	ldr	r3, [pc, #212]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000df6:	4834      	ldr	r0, [pc, #208]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000df8:	f002 f9d0 	bl	800319c <HAL_TIM_Base_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e02:	f000 f9e3 	bl	80011cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e10:	4619      	mov	r1, r3
 8000e12:	482d      	ldr	r0, [pc, #180]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000e14:	f002 fca0 	bl	8003758 <HAL_TIM_ConfigClockSource>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e1e:	f000 f9d5 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e22:	4829      	ldr	r0, [pc, #164]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000e24:	f002 fa11 	bl	800324a <HAL_TIM_PWM_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e2e:	f000 f9cd 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4821      	ldr	r0, [pc, #132]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000e42:	f003 fa3f 	bl	80042c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e4c:	f000 f9be 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e50:	2360      	movs	r3, #96	@ 0x60
 8000e52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e60:	463b      	mov	r3, r7
 8000e62:	2200      	movs	r2, #0
 8000e64:	4619      	mov	r1, r3
 8000e66:	4818      	ldr	r0, [pc, #96]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000e68:	f002 fb62 	bl	8003530 <HAL_TIM_PWM_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e72:	f000 f9ab 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e76:	463b      	mov	r3, r7
 8000e78:	2204      	movs	r2, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4812      	ldr	r0, [pc, #72]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000e7e:	f002 fb57 	bl	8003530 <HAL_TIM_PWM_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000e88:	f000 f9a0 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2208      	movs	r2, #8
 8000e90:	4619      	mov	r1, r3
 8000e92:	480d      	ldr	r0, [pc, #52]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000e94:	f002 fb4c 	bl	8003530 <HAL_TIM_PWM_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000e9e:	f000 f995 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	220c      	movs	r2, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4807      	ldr	r0, [pc, #28]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000eaa:	f002 fb41 	bl	8003530 <HAL_TIM_PWM_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000eb4:	f000 f98a 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000eb8:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <MX_TIM3_Init+0x128>)
 8000eba:	f000 f9d1 	bl	8001260 <HAL_TIM_MspPostInit>

}
 8000ebe:	bf00      	nop
 8000ec0:	3738      	adds	r7, #56	@ 0x38
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001cc 	.word	0x200001cc
 8000ecc:	40000400 	.word	0x40000400

08000ed0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ed4:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000ed6:	4a23      	ldr	r2, [pc, #140]	@ (8000f64 <MX_UART4_Init+0x94>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 500000;
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000edc:	4a22      	ldr	r2, [pc, #136]	@ (8000f68 <MX_UART4_Init+0x98>)
 8000ede:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000eec:	4b1c      	ldr	r3, [pc, #112]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000ef4:	220c      	movs	r2, #12
 8000ef6:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efe:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f16:	4812      	ldr	r0, [pc, #72]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000f18:	f003 fa6a 	bl	80043f0 <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8000f22:	f000 f953 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	480d      	ldr	r0, [pc, #52]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000f2a:	f004 f95b 	bl	80051e4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8000f34:	f000 f94a 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4809      	ldr	r0, [pc, #36]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000f3c:	f004 f990 	bl	8005260 <HAL_UARTEx_SetRxFifoThreshold>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8000f46:	f000 f941 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <MX_UART4_Init+0x90>)
 8000f4c:	f004 f911 	bl	8005172 <HAL_UARTEx_DisableFifoMode>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8000f56:	f000 f939 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000218 	.word	0x20000218
 8000f64:	40004c00 	.word	0x40004c00
 8000f68:	0007a120 	.word	0x0007a120

08000f6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f70:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f72:	4a23      	ldr	r2, [pc, #140]	@ (8001000 <MX_USART3_UART_Init+0x94>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fae:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb4:	4811      	ldr	r0, [pc, #68]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000fb6:	f003 fa1b 	bl	80043f0 <HAL_UART_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fc0:	f000 f904 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000fc8:	f004 f90c 	bl	80051e4 <HAL_UARTEx_SetTxFifoThreshold>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000fd2:	f000 f8fb 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4808      	ldr	r0, [pc, #32]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000fda:	f004 f941 	bl	8005260 <HAL_UARTEx_SetRxFifoThreshold>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fe4:	f000 f8f2 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fe8:	4804      	ldr	r0, [pc, #16]	@ (8000ffc <MX_USART3_UART_Init+0x90>)
 8000fea:	f004 f8c2 	bl	8005172 <HAL_UARTEx_DisableFifoMode>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ff4:	f000 f8ea 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200002ac 	.word	0x200002ac
 8001000:	40004800 	.word	0x40004800

08001004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	@ 0x28
 8001008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <MX_GPIO_Init+0xa8>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	4a23      	ldr	r2, [pc, #140]	@ (80010ac <MX_GPIO_Init+0xa8>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001026:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <MX_GPIO_Init+0xa8>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001032:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <MX_GPIO_Init+0xa8>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001036:	4a1d      	ldr	r2, [pc, #116]	@ (80010ac <MX_GPIO_Init+0xa8>)
 8001038:	f043 0320 	orr.w	r3, r3, #32
 800103c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <MX_GPIO_Init+0xa8>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001042:	f003 0320 	and.w	r3, r3, #32
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <MX_GPIO_Init+0xa8>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104e:	4a17      	ldr	r2, [pc, #92]	@ (80010ac <MX_GPIO_Init+0xa8>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_GPIO_Init+0xa8>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_GPIO_Init+0xa8>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	4a11      	ldr	r2, [pc, #68]	@ (80010ac <MX_GPIO_Init+0xa8>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_GPIO_Init+0xa8>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INB1_Pin|INB2_Pin|INB3_Pin|INB4_Pin
 800107a:	2200      	movs	r2, #0
 800107c:	f24f 01f0 	movw	r1, #61680	@ 0xf0f0
 8001080:	480b      	ldr	r0, [pc, #44]	@ (80010b0 <MX_GPIO_Init+0xac>)
 8001082:	f001 f829 	bl	80020d8 <HAL_GPIO_WritePin>
                          |INA1_Pin|INA2_Pin|INA3_Pin|INA4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : INB1_Pin INB2_Pin INB3_Pin INB4_Pin
                           INA1_Pin INA2_Pin INA3_Pin INA4_Pin */
  GPIO_InitStruct.Pin = INB1_Pin|INB2_Pin|INB3_Pin|INB4_Pin
 8001086:	f24f 03f0 	movw	r3, #61680	@ 0xf0f0
 800108a:	617b      	str	r3, [r7, #20]
                          |INA1_Pin|INA2_Pin|INA3_Pin|INA4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <MX_GPIO_Init+0xac>)
 80010a0:	f000 fe98 	bl	8001dd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	@ 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000
 80010b0:	48000400 	.word	0x48000400

080010b4 <smoothValue>:

/* USER CODE BEGIN 4 */
float smoothValue(float current, float target, float smoothing, float maxAccel) {
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80010be:	edc7 0a02 	vstr	s1, [r7, #8]
 80010c2:	ed87 1a01 	vstr	s2, [r7, #4]
 80010c6:	edc7 1a00 	vstr	s3, [r7]
    float difference = target - current;
 80010ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80010ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d6:	edc7 7a05 	vstr	s15, [r7, #20]

    // Different handling for acceleration and deceleration
    if (fabsf(target) < fabsf(current)) {
 80010da:	edd7 7a02 	vldr	s15, [r7, #8]
 80010de:	eeb0 7ae7 	vabs.f32	s14, s15
 80010e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e6:	eef0 7ae7 	vabs.f32	s15, s15
 80010ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d507      	bpl.n	8001104 <smoothValue+0x50>
        // Decelerating - use different factor
        difference *= DECELERATION_FACTOR;
 80010f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f8:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800119c <smoothValue+0xe8>
 80010fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001100:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    // Limit the maximum change
    if (difference > maxAccel) difference = maxAccel;
 8001104:	ed97 7a05 	vldr	s14, [r7, #20]
 8001108:	edd7 7a00 	vldr	s15, [r7]
 800110c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	dd01      	ble.n	800111a <smoothValue+0x66>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	617b      	str	r3, [r7, #20]
    if (difference < -maxAccel) difference = -maxAccel;
 800111a:	edd7 7a00 	vldr	s15, [r7]
 800111e:	eef1 7a67 	vneg.f32	s15, s15
 8001122:	ed97 7a05 	vldr	s14, [r7, #20]
 8001126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	d505      	bpl.n	800113c <smoothValue+0x88>
 8001130:	edd7 7a00 	vldr	s15, [r7]
 8001134:	eef1 7a67 	vneg.f32	s15, s15
 8001138:	edc7 7a05 	vstr	s15, [r7, #20]

    // Apply smoothing with exponential curve
    float smoothed = current + (difference * smoothing);
 800113c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001140:	edd7 7a01 	vldr	s15, [r7, #4]
 8001144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001148:	ed97 7a03 	vldr	s14, [r7, #12]
 800114c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001150:	edc7 7a04 	vstr	s15, [r7, #16]

    // Add small deadzone near zero
    if (fabsf(smoothed) < 0.02f && fabsf(target) < 0.02f) {
 8001154:	edd7 7a04 	vldr	s15, [r7, #16]
 8001158:	eef0 7ae7 	vabs.f32	s15, s15
 800115c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80011a0 <smoothValue+0xec>
 8001160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001168:	d50d      	bpl.n	8001186 <smoothValue+0xd2>
 800116a:	edd7 7a02 	vldr	s15, [r7, #8]
 800116e:	eef0 7ae7 	vabs.f32	s15, s15
 8001172:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80011a0 <smoothValue+0xec>
 8001176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	d502      	bpl.n	8001186 <smoothValue+0xd2>
        smoothed = 0.0f;
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
    }

    return smoothed;
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	ee07 3a90 	vmov	s15, r3
}
 800118c:	eeb0 0a67 	vmov.f32	s0, s15
 8001190:	371c      	adds	r7, #28
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	3e99999a 	.word	0x3e99999a
 80011a0:	3ca3d70a 	.word	0x3ca3d70a

080011a4 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80011b4:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <BSP_PB_Callback+0x24>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	200001c8 	.word	0x200001c8

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <Error_Handler+0x8>

080011d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <HAL_MspInit+0x44>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e2:	4a0e      	ldr	r2, [pc, #56]	@ (800121c <HAL_MspInit+0x44>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <HAL_MspInit+0x44>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <HAL_MspInit+0x44>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	4a08      	ldr	r2, [pc, #32]	@ (800121c <HAL_MspInit+0x44>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001200:	6593      	str	r3, [r2, #88]	@ 0x58
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_MspInit+0x44>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800120e:	f001 f839 	bl	8002284 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000

08001220 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <HAL_TIM_Base_MspInit+0x38>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d10b      	bne.n	800124a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <HAL_TIM_Base_MspInit+0x3c>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001236:	4a09      	ldr	r2, [pc, #36]	@ (800125c <HAL_TIM_Base_MspInit+0x3c>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6593      	str	r3, [r2, #88]	@ 0x58
 800123e:	4b07      	ldr	r3, [pc, #28]	@ (800125c <HAL_TIM_Base_MspInit+0x3c>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40000400 	.word	0x40000400
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	@ 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a1f      	ldr	r2, [pc, #124]	@ (80012fc <HAL_TIM_MspPostInit+0x9c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d138      	bne.n	80012f4 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <HAL_TIM_MspPostInit+0xa0>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	4a1e      	ldr	r2, [pc, #120]	@ (8001300 <HAL_TIM_MspPostInit+0xa0>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <HAL_TIM_MspPostInit+0xa0>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <HAL_TIM_MspPostInit+0xa0>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	4a18      	ldr	r2, [pc, #96]	@ (8001300 <HAL_TIM_MspPostInit+0xa0>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a6:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <HAL_TIM_MspPostInit+0xa0>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Steering_PWM2_Pin|Steering_PWM1_Pin;
 80012b2:	2350      	movs	r3, #80	@ 0x50
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012c2:	2302      	movs	r3, #2
 80012c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d0:	f000 fd80 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Steering_PWM3_Pin|Steering_PWM4_Pin;
 80012d4:	2303      	movs	r3, #3
 80012d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e4:	2302      	movs	r3, #2
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	4805      	ldr	r0, [pc, #20]	@ (8001304 <HAL_TIM_MspPostInit+0xa4>)
 80012f0:	f000 fd70 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	@ 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40000400 	.word	0x40000400
 8001300:	40021000 	.word	0x40021000
 8001304:	48000400 	.word	0x48000400

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0a0      	sub	sp, #128	@ 0x80
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001320:	f107 0318 	add.w	r3, r7, #24
 8001324:	2254      	movs	r2, #84	@ 0x54
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f004 f969 	bl	8005600 <memset>
  if(huart->Instance==UART4)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a3d      	ldr	r2, [pc, #244]	@ (8001428 <HAL_UART_MspInit+0x120>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d137      	bne.n	80013a8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001338:	2308      	movs	r3, #8
 800133a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001340:	f107 0318 	add.w	r3, r7, #24
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fcdb 	bl	8002d00 <HAL_RCCEx_PeriphCLKConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001350:	f7ff ff3c 	bl	80011cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001354:	4b35      	ldr	r3, [pc, #212]	@ (800142c <HAL_UART_MspInit+0x124>)
 8001356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001358:	4a34      	ldr	r2, [pc, #208]	@ (800142c <HAL_UART_MspInit+0x124>)
 800135a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800135e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001360:	4b32      	ldr	r3, [pc, #200]	@ (800142c <HAL_UART_MspInit+0x124>)
 8001362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001364:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136c:	4b2f      	ldr	r3, [pc, #188]	@ (800142c <HAL_UART_MspInit+0x124>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001370:	4a2e      	ldr	r2, [pc, #184]	@ (800142c <HAL_UART_MspInit+0x124>)
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001378:	4b2c      	ldr	r3, [pc, #176]	@ (800142c <HAL_UART_MspInit+0x124>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001384:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001388:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001396:	2305      	movs	r3, #5
 8001398:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800139e:	4619      	mov	r1, r3
 80013a0:	4823      	ldr	r0, [pc, #140]	@ (8001430 <HAL_UART_MspInit+0x128>)
 80013a2:	f000 fd17 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013a6:	e03b      	b.n	8001420 <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART3)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a21      	ldr	r2, [pc, #132]	@ (8001434 <HAL_UART_MspInit+0x12c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d136      	bne.n	8001420 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013b2:	2304      	movs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ba:	f107 0318 	add.w	r3, r7, #24
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 fc9e 	bl	8002d00 <HAL_RCCEx_PeriphCLKConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80013ca:	f7ff feff 	bl	80011cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ce:	4b17      	ldr	r3, [pc, #92]	@ (800142c <HAL_UART_MspInit+0x124>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d2:	4a16      	ldr	r2, [pc, #88]	@ (800142c <HAL_UART_MspInit+0x124>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013da:	4b14      	ldr	r3, [pc, #80]	@ (800142c <HAL_UART_MspInit+0x124>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_UART_MspInit+0x124>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a10      	ldr	r2, [pc, #64]	@ (800142c <HAL_UART_MspInit+0x124>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <HAL_UART_MspInit+0x124>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013fe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001402:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001410:	2307      	movs	r3, #7
 8001412:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001418:	4619      	mov	r1, r3
 800141a:	4807      	ldr	r0, [pc, #28]	@ (8001438 <HAL_UART_MspInit+0x130>)
 800141c:	f000 fcda 	bl	8001dd4 <HAL_GPIO_Init>
}
 8001420:	bf00      	nop
 8001422:	3780      	adds	r7, #128	@ 0x80
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40004c00 	.word	0x40004c00
 800142c:	40021000 	.word	0x40021000
 8001430:	48000800 	.word	0x48000800
 8001434:	40004800 	.word	0x40004800
 8001438:	48000400 	.word	0x48000400

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <NMI_Handler+0x4>

08001444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <MemManage_Handler+0x4>

08001454 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <UsageFault_Handler+0x4>

08001464 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001492:	f000 faef 	bl	8001a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}

0800149a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800149e:	2000      	movs	r0, #0
 80014a0:	f000 f9b2 	bl	8001808 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e00a      	b.n	80014d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ba:	f3af 8000 	nop.w
 80014be:	4601      	mov	r1, r0
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	b2ca      	uxtb	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf0      	blt.n	80014ba <_read+0x12>
  }

  return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e009      	b.n	8001508 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	60ba      	str	r2, [r7, #8]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f9f7 	bl	80018f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf1      	blt.n	80014f4 <_write+0x12>
  }
  return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_close>:

int _close(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001542:	605a      	str	r2, [r3, #4]
  return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_isatty>:

int _isatty(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f004 f872 	bl	800569c <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20020000 	.word	0x20020000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	20000370 	.word	0x20000370
 80015ec:	20000568 	.word	0x20000568

080015f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	@ (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001614:	480d      	ldr	r0, [pc, #52]	@ (800164c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001616:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001618:	f7ff ffea 	bl	80015f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800161c:	480c      	ldr	r0, [pc, #48]	@ (8001650 <LoopForever+0x6>)
  ldr r1, =_edata
 800161e:	490d      	ldr	r1, [pc, #52]	@ (8001654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001620:	4a0d      	ldr	r2, [pc, #52]	@ (8001658 <LoopForever+0xe>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a0a      	ldr	r2, [pc, #40]	@ (800165c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001634:	4c0a      	ldr	r4, [pc, #40]	@ (8001660 <LoopForever+0x16>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001642:	f004 f831 	bl	80056a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001646:	f7ff fa15 	bl	8000a74 <main>

0800164a <LoopForever>:

LoopForever:
    b LoopForever
 800164a:	e7fe      	b.n	800164a <LoopForever>
  ldr   r0, =_estack
 800164c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001658:	08006e18 	.word	0x08006e18
  ldr r2, =_sbss
 800165c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001660:	20000564 	.word	0x20000564

08001664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC1_2_IRQHandler>
	...

08001668 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8001672:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <BSP_LED_Init+0x64>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	4a15      	ldr	r2, [pc, #84]	@ (80016cc <BSP_LED_Init+0x64>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167e:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <BSP_LED_Init+0x64>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 800168a:	2320      	movs	r3, #32
 800168c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4a0c      	ldr	r2, [pc, #48]	@ (80016d0 <BSP_LED_Init+0x68>)
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	f107 020c 	add.w	r2, r7, #12
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 fb93 	bl	8001dd4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4a07      	ldr	r2, [pc, #28]	@ (80016d0 <BSP_LED_Init+0x68>)
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	2120      	movs	r1, #32
 80016b8:	2200      	movs	r2, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd0c 	bl	80020d8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	20000008 	.word	0x20000008

080016d4 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4a06      	ldr	r2, [pc, #24]	@ (80016fc <BSP_LED_On+0x28>)
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	2120      	movs	r1, #32
 80016e8:	2201      	movs	r2, #1
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fcf4 	bl	80020d8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008

08001700 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4a06      	ldr	r2, [pc, #24]	@ (8001728 <BSP_LED_Toggle+0x28>)
 800170e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001712:	2220      	movs	r2, #32
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fcf6 	bl	8002108 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000008 	.word	0x20000008

0800172c <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	460a      	mov	r2, r1
 8001736:	71fb      	strb	r3, [r7, #7]
 8001738:	4613      	mov	r3, r2
 800173a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 800173c:	4b2c      	ldr	r3, [pc, #176]	@ (80017f0 <BSP_PB_Init+0xc4>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001740:	4a2b      	ldr	r2, [pc, #172]	@ (80017f0 <BSP_PB_Init+0xc4>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001748:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <BSP_PB_Init+0xc4>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001754:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001758:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800175a:	2302      	movs	r3, #2
 800175c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800175e:	2302      	movs	r3, #2
 8001760:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001762:	79bb      	ldrb	r3, [r7, #6]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10c      	bne.n	8001782 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	4a21      	ldr	r2, [pc, #132]	@ (80017f4 <BSP_PB_Init+0xc8>)
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	f107 020c 	add.w	r2, r7, #12
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fb2a 	bl	8001dd4 <HAL_GPIO_Init>
 8001780:	e031      	b.n	80017e6 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001782:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001786:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	4a1a      	ldr	r2, [pc, #104]	@ (80017f4 <BSP_PB_Init+0xc8>)
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	f107 020c 	add.w	r2, r7, #12
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fb1c 	bl	8001dd4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4a15      	ldr	r2, [pc, #84]	@ (80017f8 <BSP_PB_Init+0xcc>)
 80017a2:	441a      	add	r2, r3
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	4915      	ldr	r1, [pc, #84]	@ (80017fc <BSP_PB_Init+0xd0>)
 80017a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f000 facc 	bl	8001d4c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4a0f      	ldr	r2, [pc, #60]	@ (80017f8 <BSP_PB_Init+0xcc>)
 80017ba:	1898      	adds	r0, r3, r2
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4a10      	ldr	r2, [pc, #64]	@ (8001800 <BSP_PB_Init+0xd4>)
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	461a      	mov	r2, r3
 80017c6:	2100      	movs	r1, #0
 80017c8:	f000 faa3 	bl	8001d12 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80017cc:	2028      	movs	r0, #40	@ 0x28
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001804 <BSP_PB_Init+0xd8>)
 80017d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d6:	2200      	movs	r2, #0
 80017d8:	4619      	mov	r1, r3
 80017da:	f000 fa66 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80017de:	2328      	movs	r3, #40	@ 0x28
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fa7c 	bl	8001cde <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	2000000c 	.word	0x2000000c
 80017f8:	20000374 	.word	0x20000374
 80017fc:	08006c8c 	.word	0x08006c8c
 8001800:	20000014 	.word	0x20000014
 8001804:	20000018 	.word	0x20000018

08001808 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <BSP_PB_IRQHandler+0x20>)
 8001818:	4413      	add	r3, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f000 faaa 	bl	8001d74 <HAL_EXTI_IRQHandler>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000374 	.word	0x20000374

0800182c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d903      	bls.n	800184a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001842:	f06f 0301 	mvn.w	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e018      	b.n	800187c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2294      	movs	r2, #148	@ 0x94
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <BSP_COM_Init+0x5c>)
 8001854:	4413      	add	r3, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f86e 	bl	8001938 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	2294      	movs	r2, #148	@ 0x94
 8001860:	fb02 f303 	mul.w	r3, r2, r3
 8001864:	4a08      	ldr	r2, [pc, #32]	@ (8001888 <BSP_COM_Init+0x5c>)
 8001866:	4413      	add	r3, r2
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f80e 	bl	800188c <MX_LPUART1_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001876:	f06f 0303 	mvn.w	r3, #3
 800187a:	e000      	b.n	800187e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 800187c:	68fb      	ldr	r3, [r7, #12]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000037c 	.word	0x2000037c

0800188c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <MX_LPUART1_Init+0x60>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	220c      	movs	r2, #12
 80018aa:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	895b      	ldrh	r3, [r3, #10]
 80018b0:	461a      	mov	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	891b      	ldrh	r3, [r3, #8]
 80018c2:	461a      	mov	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	899b      	ldrh	r3, [r3, #12]
 80018cc:	461a      	mov	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018d8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f002 fd88 	bl	80043f0 <HAL_UART_Init>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000010 	.word	0x20000010

080018f0 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80018f8:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <__io_putchar+0x30>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	2394      	movs	r3, #148	@ 0x94
 8001900:	fb02 f303 	mul.w	r3, r2, r3
 8001904:	4a07      	ldr	r2, [pc, #28]	@ (8001924 <__io_putchar+0x34>)
 8001906:	1898      	adds	r0, r3, r2
 8001908:	1d39      	adds	r1, r7, #4
 800190a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800190e:	2201      	movs	r2, #1
 8001910:	f002 fdbe 	bl	8004490 <HAL_UART_Transmit>
  return ch;
 8001914:	687b      	ldr	r3, [r7, #4]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000410 	.word	0x20000410
 8001924:	2000037c 	.word	0x2000037c

08001928 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff fc39 	bl	80011a4 <BSP_PB_Callback>
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	@ 0x28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001940:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <COM1_MspInit+0x94>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001944:	4a21      	ldr	r2, [pc, #132]	@ (80019cc <COM1_MspInit+0x94>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194c:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <COM1_MspInit+0x94>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001958:	4b1c      	ldr	r3, [pc, #112]	@ (80019cc <COM1_MspInit+0x94>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195c:	4a1b      	ldr	r2, [pc, #108]	@ (80019cc <COM1_MspInit+0x94>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001964:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <COM1_MspInit+0x94>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001970:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <COM1_MspInit+0x94>)
 8001972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001974:	4a15      	ldr	r2, [pc, #84]	@ (80019cc <COM1_MspInit+0x94>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800197c:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <COM1_MspInit+0x94>)
 800197e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001988:	2304      	movs	r3, #4
 800198a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001990:	2302      	movs	r3, #2
 8001992:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001994:	2301      	movs	r3, #1
 8001996:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001998:	230c      	movs	r3, #12
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a6:	f000 fa15 	bl	8001dd4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80019aa:	2308      	movs	r3, #8
 80019ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80019b2:	230c      	movs	r3, #12
 80019b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c0:	f000 fa08 	bl	8001dd4 <HAL_GPIO_Init>
}
 80019c4:	bf00      	nop
 80019c6:	3728      	adds	r7, #40	@ 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019da:	2003      	movs	r0, #3
 80019dc:	f000 f95a 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e0:	2000      	movs	r0, #0
 80019e2:	f000 f80d 	bl	8001a00 <HAL_InitTick>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	71fb      	strb	r3, [r7, #7]
 80019f0:	e001      	b.n	80019f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019f2:	f7ff fbf1 	bl	80011d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019f6:	79fb      	ldrb	r3, [r7, #7]

}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a0c:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <HAL_InitTick+0x68>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d022      	beq.n	8001a5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <HAL_InitTick+0x6c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <HAL_InitTick+0x68>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f966 	bl	8001cfa <HAL_SYSTICK_Config>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10f      	bne.n	8001a54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b0f      	cmp	r3, #15
 8001a38:	d809      	bhi.n	8001a4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a42:	f000 f932 	bl	8001caa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <HAL_InitTick+0x70>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e007      	b.n	8001a5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e004      	b.n	8001a5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e001      	b.n	8001a5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000020 	.word	0x20000020
 8001a6c:	20000004 	.word	0x20000004
 8001a70:	2000001c 	.word	0x2000001c

08001a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <HAL_IncTick+0x1c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_IncTick+0x20>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4413      	add	r3, r2
 8001a82:	4a03      	ldr	r2, [pc, #12]	@ (8001a90 <HAL_IncTick+0x1c>)
 8001a84:	6013      	str	r3, [r2, #0]
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	20000414 	.word	0x20000414
 8001a94:	20000020 	.word	0x20000020

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	@ (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000414 	.word	0x20000414

08001ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff ffee 	bl	8001a98 <HAL_GetTick>
 8001abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ac8:	d004      	beq.n	8001ad4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <HAL_Delay+0x40>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad4:	bf00      	nop
 8001ad6:	f7ff ffdf 	bl	8001a98 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d8f7      	bhi.n	8001ad6 <HAL_Delay+0x26>
  {
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000020 	.word	0x20000020

08001af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0b      	blt.n	8001b82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4907      	ldr	r1, [pc, #28]	@ (8001b90 <__NVIC_EnableIRQ+0x38>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	@ (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	@ (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	@ 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	@ 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c74:	f7ff ff8e 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff29 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff ff40 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff90 	bl	8001be8 <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff5f 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff33 	bl	8001b58 <__NVIC_EnableIRQ>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ffa4 	bl	8001c50 <SysTick_Config>
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001d12:	b480      	push	{r7}
 8001d14:	b087      	sub	sp, #28
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8001d24:	7afb      	ldrb	r3, [r7, #11]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d103      	bne.n	8001d32 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	605a      	str	r2, [r3, #4]
      break;
 8001d30:	e005      	b.n	8001d3e <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8001d3c:	bf00      	nop
  }

  return status;
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e003      	b.n	8001d68 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001d66:	2300      	movs	r3, #0
  }
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0c1b      	lsrs	r3, r3, #16
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	2201      	movs	r2, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <HAL_EXTI_IRQHandler+0x5c>)
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4798      	blx	r3
    }
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40010414 	.word	0x40010414

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001de2:	e15a      	b.n	800209a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	2101      	movs	r1, #1
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 814c 	beq.w	8002094 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d005      	beq.n	8001e14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d130      	bne.n	8001e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	f003 0201 	and.w	r2, r3, #1
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d017      	beq.n	8001eb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d123      	bne.n	8001f06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	08da      	lsrs	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3208      	adds	r2, #8
 8001ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	08da      	lsrs	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3208      	adds	r2, #8
 8001f00:	6939      	ldr	r1, [r7, #16]
 8001f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2203      	movs	r2, #3
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0203 	and.w	r2, r3, #3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 80a6 	beq.w	8002094 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f48:	4b5b      	ldr	r3, [pc, #364]	@ (80020b8 <HAL_GPIO_Init+0x2e4>)
 8001f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4c:	4a5a      	ldr	r2, [pc, #360]	@ (80020b8 <HAL_GPIO_Init+0x2e4>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f54:	4b58      	ldr	r3, [pc, #352]	@ (80020b8 <HAL_GPIO_Init+0x2e4>)
 8001f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f60:	4a56      	ldr	r2, [pc, #344]	@ (80020bc <HAL_GPIO_Init+0x2e8>)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3302      	adds	r3, #2
 8001f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	220f      	movs	r2, #15
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f8a:	d01f      	beq.n	8001fcc <HAL_GPIO_Init+0x1f8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a4c      	ldr	r2, [pc, #304]	@ (80020c0 <HAL_GPIO_Init+0x2ec>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d019      	beq.n	8001fc8 <HAL_GPIO_Init+0x1f4>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a4b      	ldr	r2, [pc, #300]	@ (80020c4 <HAL_GPIO_Init+0x2f0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <HAL_GPIO_Init+0x1f0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a4a      	ldr	r2, [pc, #296]	@ (80020c8 <HAL_GPIO_Init+0x2f4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_GPIO_Init+0x1ec>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a49      	ldr	r2, [pc, #292]	@ (80020cc <HAL_GPIO_Init+0x2f8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <HAL_GPIO_Init+0x1e8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a48      	ldr	r2, [pc, #288]	@ (80020d0 <HAL_GPIO_Init+0x2fc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d101      	bne.n	8001fb8 <HAL_GPIO_Init+0x1e4>
 8001fb4:	2305      	movs	r3, #5
 8001fb6:	e00a      	b.n	8001fce <HAL_GPIO_Init+0x1fa>
 8001fb8:	2306      	movs	r3, #6
 8001fba:	e008      	b.n	8001fce <HAL_GPIO_Init+0x1fa>
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	e006      	b.n	8001fce <HAL_GPIO_Init+0x1fa>
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e004      	b.n	8001fce <HAL_GPIO_Init+0x1fa>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x1fa>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_GPIO_Init+0x1fa>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	f002 0203 	and.w	r2, r2, #3
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	4093      	lsls	r3, r2
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fde:	4937      	ldr	r1, [pc, #220]	@ (80020bc <HAL_GPIO_Init+0x2e8>)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fec:	4b39      	ldr	r3, [pc, #228]	@ (80020d4 <HAL_GPIO_Init+0x300>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002010:	4a30      	ldr	r2, [pc, #192]	@ (80020d4 <HAL_GPIO_Init+0x300>)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002016:	4b2f      	ldr	r3, [pc, #188]	@ (80020d4 <HAL_GPIO_Init+0x300>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800203a:	4a26      	ldr	r2, [pc, #152]	@ (80020d4 <HAL_GPIO_Init+0x300>)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002040:	4b24      	ldr	r3, [pc, #144]	@ (80020d4 <HAL_GPIO_Init+0x300>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002064:	4a1b      	ldr	r2, [pc, #108]	@ (80020d4 <HAL_GPIO_Init+0x300>)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800206a:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <HAL_GPIO_Init+0x300>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800208e:	4a11      	ldr	r2, [pc, #68]	@ (80020d4 <HAL_GPIO_Init+0x300>)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3301      	adds	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f47f ae9d 	bne.w	8001de4 <HAL_GPIO_Init+0x10>
  }
}
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
 80020ae:	371c      	adds	r7, #28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40010000 	.word	0x40010000
 80020c0:	48000400 	.word	0x48000400
 80020c4:	48000800 	.word	0x48000800
 80020c8:	48000c00 	.word	0x48000c00
 80020cc:	48001000 	.word	0x48001000
 80020d0:	48001400 	.word	0x48001400
 80020d4:	40010400 	.word	0x40010400

080020d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020e8:	787b      	ldrb	r3, [r7, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020f4:	e002      	b.n	80020fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4013      	ands	r3, r2
 8002120:	041a      	lsls	r2, r3, #16
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43d9      	mvns	r1, r3
 8002126:	887b      	ldrh	r3, [r7, #2]
 8002128:	400b      	ands	r3, r1
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d141      	bne.n	80021ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800214a:	4b4b      	ldr	r3, [pc, #300]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002156:	d131      	bne.n	80021bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002158:	4b47      	ldr	r3, [pc, #284]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800215e:	4a46      	ldr	r2, [pc, #280]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002164:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002168:	4b43      	ldr	r3, [pc, #268]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002170:	4a41      	ldr	r2, [pc, #260]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002172:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002176:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002178:	4b40      	ldr	r3, [pc, #256]	@ (800227c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2232      	movs	r2, #50	@ 0x32
 800217e:	fb02 f303 	mul.w	r3, r2, r3
 8002182:	4a3f      	ldr	r2, [pc, #252]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	0c9b      	lsrs	r3, r3, #18
 800218a:	3301      	adds	r3, #1
 800218c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800218e:	e002      	b.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	3b01      	subs	r3, #1
 8002194:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002196:	4b38      	ldr	r3, [pc, #224]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021a2:	d102      	bne.n	80021aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f2      	bne.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021aa:	4b33      	ldr	r3, [pc, #204]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b6:	d158      	bne.n	800226a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e057      	b.n	800226c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021cc:	e04d      	b.n	800226a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021d4:	d141      	bne.n	800225a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021d6:	4b28      	ldr	r3, [pc, #160]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e2:	d131      	bne.n	8002248 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021e4:	4b24      	ldr	r3, [pc, #144]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021ea:	4a23      	ldr	r2, [pc, #140]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f4:	4b20      	ldr	r3, [pc, #128]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002202:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002204:	4b1d      	ldr	r3, [pc, #116]	@ (800227c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2232      	movs	r2, #50	@ 0x32
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	4a1c      	ldr	r2, [pc, #112]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	0c9b      	lsrs	r3, r3, #18
 8002216:	3301      	adds	r3, #1
 8002218:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800221a:	e002      	b.n	8002222 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3b01      	subs	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800222e:	d102      	bne.n	8002236 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f2      	bne.n	800221c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002236:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002242:	d112      	bne.n	800226a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e011      	b.n	800226c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800224a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800224e:	4a0a      	ldr	r2, [pc, #40]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002254:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002258:	e007      	b.n	800226a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800225a:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002262:	4a05      	ldr	r2, [pc, #20]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002264:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002268:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	40007000 	.word	0x40007000
 800227c:	20000004 	.word	0x20000004
 8002280:	431bde83 	.word	0x431bde83

08002284 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002288:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4a04      	ldr	r2, [pc, #16]	@ (80022a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800228e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002292:	6093      	str	r3, [r2, #8]
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40007000 	.word	0x40007000

080022a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e2fe      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d075      	beq.n	80023ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c2:	4b97      	ldr	r3, [pc, #604]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022cc:	4b94      	ldr	r3, [pc, #592]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b0c      	cmp	r3, #12
 80022da:	d102      	bne.n	80022e2 <HAL_RCC_OscConfig+0x3e>
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_OscConfig+0x44>
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d10b      	bne.n	8002300 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	4b8d      	ldr	r3, [pc, #564]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d05b      	beq.n	80023ac <HAL_RCC_OscConfig+0x108>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d157      	bne.n	80023ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e2d9      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002308:	d106      	bne.n	8002318 <HAL_RCC_OscConfig+0x74>
 800230a:	4b85      	ldr	r3, [pc, #532]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a84      	ldr	r2, [pc, #528]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e01d      	b.n	8002354 <HAL_RCC_OscConfig+0xb0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x98>
 8002322:	4b7f      	ldr	r3, [pc, #508]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a7e      	ldr	r2, [pc, #504]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 8002328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b7c      	ldr	r3, [pc, #496]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7b      	ldr	r2, [pc, #492]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e00b      	b.n	8002354 <HAL_RCC_OscConfig+0xb0>
 800233c:	4b78      	ldr	r3, [pc, #480]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a77      	ldr	r2, [pc, #476]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 8002342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b75      	ldr	r3, [pc, #468]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a74      	ldr	r2, [pc, #464]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 800234e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7ff fb9c 	bl	8001a98 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002364:	f7ff fb98 	bl	8001a98 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	@ 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e29e      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002376:	4b6a      	ldr	r3, [pc, #424]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0xc0>
 8002382:	e014      	b.n	80023ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7ff fb88 	bl	8001a98 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238c:	f7ff fb84 	bl	8001a98 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	@ 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e28a      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800239e:	4b60      	ldr	r3, [pc, #384]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0xe8>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d075      	beq.n	80024a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ba:	4b59      	ldr	r3, [pc, #356]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c4:	4b56      	ldr	r3, [pc, #344]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b0c      	cmp	r3, #12
 80023d2:	d102      	bne.n	80023da <HAL_RCC_OscConfig+0x136>
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d002      	beq.n	80023e0 <HAL_RCC_OscConfig+0x13c>
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d11f      	bne.n	8002420 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_OscConfig+0x154>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e25d      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f8:	4b49      	ldr	r3, [pc, #292]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	061b      	lsls	r3, r3, #24
 8002406:	4946      	ldr	r1, [pc, #280]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800240c:	4b45      	ldr	r3, [pc, #276]	@ (8002524 <HAL_RCC_OscConfig+0x280>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff faf5 	bl	8001a00 <HAL_InitTick>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d043      	beq.n	80024a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e249      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d023      	beq.n	8002470 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002428:	4b3d      	ldr	r3, [pc, #244]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a3c      	ldr	r2, [pc, #240]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 800242e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7ff fb30 	bl	8001a98 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243c:	f7ff fb2c 	bl	8001a98 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e232      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800244e:	4b34      	ldr	r3, [pc, #208]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245a:	4b31      	ldr	r3, [pc, #196]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	061b      	lsls	r3, r3, #24
 8002468:	492d      	ldr	r1, [pc, #180]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
 800246e:	e01a      	b.n	80024a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002470:	4b2b      	ldr	r3, [pc, #172]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2a      	ldr	r2, [pc, #168]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 8002476:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800247a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7ff fb0c 	bl	8001a98 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002484:	f7ff fb08 	bl	8001a98 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e20e      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002496:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x1e0>
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d041      	beq.n	8002536 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01c      	beq.n	80024f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ba:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 80024bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c0:	4a17      	ldr	r2, [pc, #92]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ca:	f7ff fae5 	bl	8001a98 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d2:	f7ff fae1 	bl	8001a98 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e1e7      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 80024e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0ef      	beq.n	80024d2 <HAL_RCC_OscConfig+0x22e>
 80024f2:	e020      	b.n	8002536 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 80024f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024fa:	4a09      	ldr	r2, [pc, #36]	@ (8002520 <HAL_RCC_OscConfig+0x27c>)
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7ff fac8 	bl	8001a98 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800250a:	e00d      	b.n	8002528 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250c:	f7ff fac4 	bl	8001a98 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d906      	bls.n	8002528 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1ca      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002528:	4b8c      	ldr	r3, [pc, #560]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 800252a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1ea      	bne.n	800250c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80a6 	beq.w	8002690 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002544:	2300      	movs	r3, #0
 8002546:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002548:	4b84      	ldr	r3, [pc, #528]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_OscConfig+0x2b4>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x2b6>
 8002558:	2300      	movs	r3, #0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00d      	beq.n	800257a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	4b7f      	ldr	r3, [pc, #508]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002562:	4a7e      	ldr	r2, [pc, #504]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002568:	6593      	str	r3, [r2, #88]	@ 0x58
 800256a:	4b7c      	ldr	r3, [pc, #496]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002576:	2301      	movs	r3, #1
 8002578:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257a:	4b79      	ldr	r3, [pc, #484]	@ (8002760 <HAL_RCC_OscConfig+0x4bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002586:	4b76      	ldr	r3, [pc, #472]	@ (8002760 <HAL_RCC_OscConfig+0x4bc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a75      	ldr	r2, [pc, #468]	@ (8002760 <HAL_RCC_OscConfig+0x4bc>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002592:	f7ff fa81 	bl	8001a98 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7ff fa7d 	bl	8001a98 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e183      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002760 <HAL_RCC_OscConfig+0x4bc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d108      	bne.n	80025d2 <HAL_RCC_OscConfig+0x32e>
 80025c0:	4b66      	ldr	r3, [pc, #408]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c6:	4a65      	ldr	r2, [pc, #404]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025d0:	e024      	b.n	800261c <HAL_RCC_OscConfig+0x378>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d110      	bne.n	80025fc <HAL_RCC_OscConfig+0x358>
 80025da:	4b60      	ldr	r3, [pc, #384]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e0:	4a5e      	ldr	r2, [pc, #376]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025ea:	4b5c      	ldr	r3, [pc, #368]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f0:	4a5a      	ldr	r2, [pc, #360]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025fa:	e00f      	b.n	800261c <HAL_RCC_OscConfig+0x378>
 80025fc:	4b57      	ldr	r3, [pc, #348]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002602:	4a56      	ldr	r2, [pc, #344]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800260c:	4b53      	ldr	r3, [pc, #332]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002612:	4a52      	ldr	r2, [pc, #328]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 8002614:	f023 0304 	bic.w	r3, r3, #4
 8002618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d016      	beq.n	8002652 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7ff fa38 	bl	8001a98 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262a:	e00a      	b.n	8002642 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262c:	f7ff fa34 	bl	8001a98 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e138      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002642:	4b46      	ldr	r3, [pc, #280]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ed      	beq.n	800262c <HAL_RCC_OscConfig+0x388>
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002652:	f7ff fa21 	bl	8001a98 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002658:	e00a      	b.n	8002670 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7ff fa1d 	bl	8001a98 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e121      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002670:	4b3a      	ldr	r3, [pc, #232]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1ed      	bne.n	800265a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800267e:	7ffb      	ldrb	r3, [r7, #31]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d105      	bne.n	8002690 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002684:	4b35      	ldr	r3, [pc, #212]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002688:	4a34      	ldr	r2, [pc, #208]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 800268a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800268e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d03c      	beq.n	8002716 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d01c      	beq.n	80026de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026a4:	4b2d      	ldr	r3, [pc, #180]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 80026a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026aa:	4a2c      	ldr	r2, [pc, #176]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7ff f9f0 	bl	8001a98 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026bc:	f7ff f9ec 	bl	8001a98 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e0f2      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026ce:	4b23      	ldr	r3, [pc, #140]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 80026d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ef      	beq.n	80026bc <HAL_RCC_OscConfig+0x418>
 80026dc:	e01b      	b.n	8002716 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026de:	4b1f      	ldr	r3, [pc, #124]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 80026e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026e4:	4a1d      	ldr	r2, [pc, #116]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7ff f9d3 	bl	8001a98 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026f6:	f7ff f9cf 	bl	8001a98 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e0d5      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002708:	4b14      	ldr	r3, [pc, #80]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 800270a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ef      	bne.n	80026f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80c9 	beq.w	80028b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002720:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	2b0c      	cmp	r3, #12
 800272a:	f000 8083 	beq.w	8002834 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d15e      	bne.n	80027f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002736:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a08      	ldr	r2, [pc, #32]	@ (800275c <HAL_RCC_OscConfig+0x4b8>)
 800273c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7ff f9a9 	bl	8001a98 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002748:	e00c      	b.n	8002764 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274a:	f7ff f9a5 	bl	8001a98 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d905      	bls.n	8002764 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0ab      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
 800275c:	40021000 	.word	0x40021000
 8002760:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002764:	4b55      	ldr	r3, [pc, #340]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1ec      	bne.n	800274a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002770:	4b52      	ldr	r3, [pc, #328]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	4b52      	ldr	r3, [pc, #328]	@ (80028c0 <HAL_RCC_OscConfig+0x61c>)
 8002776:	4013      	ands	r3, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6a11      	ldr	r1, [r2, #32]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002780:	3a01      	subs	r2, #1
 8002782:	0112      	lsls	r2, r2, #4
 8002784:	4311      	orrs	r1, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800278a:	0212      	lsls	r2, r2, #8
 800278c:	4311      	orrs	r1, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002792:	0852      	lsrs	r2, r2, #1
 8002794:	3a01      	subs	r2, #1
 8002796:	0552      	lsls	r2, r2, #21
 8002798:	4311      	orrs	r1, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800279e:	0852      	lsrs	r2, r2, #1
 80027a0:	3a01      	subs	r2, #1
 80027a2:	0652      	lsls	r2, r2, #25
 80027a4:	4311      	orrs	r1, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80027aa:	06d2      	lsls	r2, r2, #27
 80027ac:	430a      	orrs	r2, r1
 80027ae:	4943      	ldr	r1, [pc, #268]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b4:	4b41      	ldr	r3, [pc, #260]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a40      	ldr	r2, [pc, #256]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027c0:	4b3e      	ldr	r3, [pc, #248]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a3d      	ldr	r2, [pc, #244]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7ff f964 	bl	8001a98 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7ff f960 	bl	8001a98 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e066      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e6:	4b35      	ldr	r3, [pc, #212]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x530>
 80027f2:	e05e      	b.n	80028b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f4:	4b31      	ldr	r3, [pc, #196]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a30      	ldr	r2, [pc, #192]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80027fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7ff f94a 	bl	8001a98 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f7ff f946 	bl	8001a98 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e04c      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281a:	4b28      	ldr	r3, [pc, #160]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002826:	4b25      	ldr	r3, [pc, #148]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	4924      	ldr	r1, [pc, #144]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 800282c:	4b25      	ldr	r3, [pc, #148]	@ (80028c4 <HAL_RCC_OscConfig+0x620>)
 800282e:	4013      	ands	r3, r2
 8002830:	60cb      	str	r3, [r1, #12]
 8002832:	e03e      	b.n	80028b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e039      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002840:	4b1e      	ldr	r3, [pc, #120]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 0203 	and.w	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	429a      	cmp	r2, r3
 8002852:	d12c      	bne.n	80028ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	3b01      	subs	r3, #1
 8002860:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d123      	bne.n	80028ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002870:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d11b      	bne.n	80028ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d113      	bne.n	80028ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	3b01      	subs	r3, #1
 8002894:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d109      	bne.n	80028ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a4:	085b      	lsrs	r3, r3, #1
 80028a6:	3b01      	subs	r3, #1
 80028a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	019f800c 	.word	0x019f800c
 80028c4:	feeefffc 	.word	0xfeeefffc

080028c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e11e      	b.n	8002b1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e0:	4b91      	ldr	r3, [pc, #580]	@ (8002b28 <HAL_RCC_ClockConfig+0x260>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d910      	bls.n	8002910 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b8e      	ldr	r3, [pc, #568]	@ (8002b28 <HAL_RCC_ClockConfig+0x260>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 020f 	bic.w	r2, r3, #15
 80028f6:	498c      	ldr	r1, [pc, #560]	@ (8002b28 <HAL_RCC_ClockConfig+0x260>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b8a      	ldr	r3, [pc, #552]	@ (8002b28 <HAL_RCC_ClockConfig+0x260>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e106      	b.n	8002b1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d073      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d129      	bne.n	8002978 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002924:	4b81      	ldr	r3, [pc, #516]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0f4      	b.n	8002b1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002934:	f000 f99e 	bl	8002c74 <RCC_GetSysClockFreqFromPLLSource>
 8002938:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4a7c      	ldr	r2, [pc, #496]	@ (8002b30 <HAL_RCC_ClockConfig+0x268>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d93f      	bls.n	80029c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002942:	4b7a      	ldr	r3, [pc, #488]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002956:	2b00      	cmp	r3, #0
 8002958:	d033      	beq.n	80029c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800295e:	2b00      	cmp	r3, #0
 8002960:	d12f      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002962:	4b72      	ldr	r3, [pc, #456]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800296a:	4a70      	ldr	r2, [pc, #448]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 800296c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002970:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002972:	2380      	movs	r3, #128	@ 0x80
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	e024      	b.n	80029c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d107      	bne.n	8002990 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002980:	4b6a      	ldr	r3, [pc, #424]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d109      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0c6      	b.n	8002b1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002990:	4b66      	ldr	r3, [pc, #408]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0be      	b.n	8002b1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80029a0:	f000 f8ce 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4a61      	ldr	r2, [pc, #388]	@ (8002b30 <HAL_RCC_ClockConfig+0x268>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d909      	bls.n	80029c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029ae:	4b5f      	ldr	r3, [pc, #380]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029b6:	4a5d      	ldr	r2, [pc, #372]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 80029b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4b5a      	ldr	r3, [pc, #360]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4957      	ldr	r1, [pc, #348]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d4:	f7ff f860 	bl	8001a98 <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7ff f85c 	bl	8001a98 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e095      	b.n	8002b1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	4b4e      	ldr	r3, [pc, #312]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 020c 	and.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1eb      	bne.n	80029dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d023      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a1c:	4b43      	ldr	r3, [pc, #268]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4a42      	ldr	r2, [pc, #264]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002a22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a34:	4b3d      	ldr	r3, [pc, #244]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002a3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a44:	4b39      	ldr	r3, [pc, #228]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4936      	ldr	r1, [pc, #216]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b80      	cmp	r3, #128	@ 0x80
 8002a5c:	d105      	bne.n	8002a6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a5e:	4b33      	ldr	r3, [pc, #204]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	4a32      	ldr	r2, [pc, #200]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002a64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002b28 <HAL_RCC_ClockConfig+0x260>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d21d      	bcs.n	8002ab4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a78:	4b2b      	ldr	r3, [pc, #172]	@ (8002b28 <HAL_RCC_ClockConfig+0x260>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 020f 	bic.w	r2, r3, #15
 8002a80:	4929      	ldr	r1, [pc, #164]	@ (8002b28 <HAL_RCC_ClockConfig+0x260>)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a88:	f7ff f806 	bl	8001a98 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7ff f802 	bl	8001a98 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e03b      	b.n	8002b1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b20      	ldr	r3, [pc, #128]	@ (8002b28 <HAL_RCC_ClockConfig+0x260>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1ed      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4917      	ldr	r1, [pc, #92]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ade:	4b13      	ldr	r3, [pc, #76]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	490f      	ldr	r1, [pc, #60]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af2:	f000 f825 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002af6:	4602      	mov	r2, r0
 8002af8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <HAL_RCC_ClockConfig+0x264>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	490c      	ldr	r1, [pc, #48]	@ (8002b34 <HAL_RCC_ClockConfig+0x26c>)
 8002b04:	5ccb      	ldrb	r3, [r1, r3]
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <HAL_RCC_ClockConfig+0x270>)
 8002b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b12:	4b0a      	ldr	r3, [pc, #40]	@ (8002b3c <HAL_RCC_ClockConfig+0x274>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe ff72 	bl	8001a00 <HAL_InitTick>
 8002b1c:	4603      	mov	r3, r0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40022000 	.word	0x40022000
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	04c4b400 	.word	0x04c4b400
 8002b34:	08006c74 	.word	0x08006c74
 8002b38:	20000004 	.word	0x20000004
 8002b3c:	2000001c 	.word	0x2000001c

08002b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b46:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d102      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b52:	4b2a      	ldr	r3, [pc, #168]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	e047      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b58:	4b27      	ldr	r3, [pc, #156]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d102      	bne.n	8002b6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b64:	4b26      	ldr	r3, [pc, #152]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	e03e      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b6a:	4b23      	ldr	r3, [pc, #140]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b0c      	cmp	r3, #12
 8002b74:	d136      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b76:	4b20      	ldr	r3, [pc, #128]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b80:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d10c      	bne.n	8002bae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b94:	4a1a      	ldr	r2, [pc, #104]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	4a16      	ldr	r2, [pc, #88]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b9e:	68d2      	ldr	r2, [r2, #12]
 8002ba0:	0a12      	lsrs	r2, r2, #8
 8002ba2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	617b      	str	r3, [r7, #20]
      break;
 8002bac:	e00c      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bae:	4a13      	ldr	r2, [pc, #76]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	4a10      	ldr	r2, [pc, #64]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bb8:	68d2      	ldr	r2, [r2, #12]
 8002bba:	0a12      	lsrs	r2, r2, #8
 8002bbc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bc0:	fb02 f303 	mul.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
      break;
 8002bc6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0e5b      	lsrs	r3, r3, #25
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	e001      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002be8:	693b      	ldr	r3, [r7, #16]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	00f42400 	.word	0x00f42400
 8002c00:	016e3600 	.word	0x016e3600

08002c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c08:	4b03      	ldr	r3, [pc, #12]	@ (8002c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000004 	.word	0x20000004

08002c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c20:	f7ff fff0 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	4904      	ldr	r1, [pc, #16]	@ (8002c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	08006c84 	.word	0x08006c84

08002c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c4c:	f7ff ffda 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	0adb      	lsrs	r3, r3, #11
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4904      	ldr	r1, [pc, #16]	@ (8002c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	08006c84 	.word	0x08006c84

08002c74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c84:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	3301      	adds	r3, #1
 8002c90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d10c      	bne.n	8002cb2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c98:	4a17      	ldr	r2, [pc, #92]	@ (8002cf8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	4a14      	ldr	r2, [pc, #80]	@ (8002cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ca2:	68d2      	ldr	r2, [r2, #12]
 8002ca4:	0a12      	lsrs	r2, r2, #8
 8002ca6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	617b      	str	r3, [r7, #20]
    break;
 8002cb0:	e00c      	b.n	8002ccc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cb2:	4a12      	ldr	r2, [pc, #72]	@ (8002cfc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	4a0e      	ldr	r2, [pc, #56]	@ (8002cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cbc:	68d2      	ldr	r2, [r2, #12]
 8002cbe:	0a12      	lsrs	r2, r2, #8
 8002cc0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cc4:	fb02 f303 	mul.w	r3, r2, r3
 8002cc8:	617b      	str	r3, [r7, #20]
    break;
 8002cca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ccc:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	0e5b      	lsrs	r3, r3, #25
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002ce6:	687b      	ldr	r3, [r7, #4]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	016e3600 	.word	0x016e3600
 8002cfc:	00f42400 	.word	0x00f42400

08002d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d08:	2300      	movs	r3, #0
 8002d0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8098 	beq.w	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d22:	4b43      	ldr	r3, [pc, #268]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	4b40      	ldr	r3, [pc, #256]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d32:	4a3f      	ldr	r2, [pc, #252]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d46:	2301      	movs	r3, #1
 8002d48:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a39      	ldr	r2, [pc, #228]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d56:	f7fe fe9f 	bl	8001a98 <HAL_GetTick>
 8002d5a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d5c:	e009      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5e:	f7fe fe9b 	bl	8001a98 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d902      	bls.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	74fb      	strb	r3, [r7, #19]
        break;
 8002d70:	e005      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d72:	4b30      	ldr	r3, [pc, #192]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0ef      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d7e:	7cfb      	ldrb	r3, [r7, #19]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d159      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d84:	4b2a      	ldr	r3, [pc, #168]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d8e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d01e      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d019      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002da0:	4b23      	ldr	r3, [pc, #140]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002daa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dac:	4b20      	ldr	r3, [pc, #128]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002dcc:	4a18      	ldr	r2, [pc, #96]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d016      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7fe fe5b 	bl	8001a98 <HAL_GetTick>
 8002de2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de4:	e00b      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de6:	f7fe fe57 	bl	8001a98 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d902      	bls.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	74fb      	strb	r3, [r7, #19]
            break;
 8002dfc:	e006      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ec      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10b      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e12:	4b07      	ldr	r3, [pc, #28]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e20:	4903      	ldr	r1, [pc, #12]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e28:	e008      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	74bb      	strb	r3, [r7, #18]
 8002e2e:	e005      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e3c:	7c7b      	ldrb	r3, [r7, #17]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d105      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e42:	4ba7      	ldr	r3, [pc, #668]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e46:	4aa6      	ldr	r2, [pc, #664]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e4c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e5a:	4ba1      	ldr	r3, [pc, #644]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e60:	f023 0203 	bic.w	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	499d      	ldr	r1, [pc, #628]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e7c:	4b98      	ldr	r3, [pc, #608]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	f023 020c 	bic.w	r2, r3, #12
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	4995      	ldr	r1, [pc, #596]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e9e:	4b90      	ldr	r3, [pc, #576]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	498c      	ldr	r1, [pc, #560]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ec0:	4b87      	ldr	r3, [pc, #540]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	4984      	ldr	r1, [pc, #528]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	497b      	ldr	r1, [pc, #492]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f04:	4b76      	ldr	r3, [pc, #472]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	4973      	ldr	r1, [pc, #460]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f26:	4b6e      	ldr	r3, [pc, #440]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	496a      	ldr	r1, [pc, #424]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f48:	4b65      	ldr	r3, [pc, #404]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	4962      	ldr	r1, [pc, #392]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	4959      	ldr	r1, [pc, #356]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f8c:	4b54      	ldr	r3, [pc, #336]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f92:	f023 0203 	bic.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	4951      	ldr	r1, [pc, #324]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fae:	4b4c      	ldr	r3, [pc, #304]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbc:	4948      	ldr	r1, [pc, #288]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fd0:	4b43      	ldr	r3, [pc, #268]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	4940      	ldr	r1, [pc, #256]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fee:	d105      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a3a      	ldr	r2, [pc, #232]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ffa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003004:	2b00      	cmp	r3, #0
 8003006:	d015      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003008:	4b35      	ldr	r3, [pc, #212]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003016:	4932      	ldr	r1, [pc, #200]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003022:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003026:	d105      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003028:	4b2d      	ldr	r3, [pc, #180]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4a2c      	ldr	r2, [pc, #176]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003032:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d015      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003040:	4b27      	ldr	r3, [pc, #156]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003046:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304e:	4924      	ldr	r1, [pc, #144]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800305e:	d105      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003060:	4b1f      	ldr	r3, [pc, #124]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a1e      	ldr	r2, [pc, #120]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800306a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d015      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003078:	4b19      	ldr	r3, [pc, #100]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003086:	4916      	ldr	r1, [pc, #88]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003096:	d105      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003098:	4b11      	ldr	r3, [pc, #68]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a10      	ldr	r2, [pc, #64]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d019      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030b0:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	4908      	ldr	r1, [pc, #32]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030ce:	d109      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d0:	4b03      	ldr	r3, [pc, #12]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4a02      	ldr	r2, [pc, #8]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030da:	60d3      	str	r3, [r2, #12]
 80030dc:	e002      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d015      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030f0:	4b29      	ldr	r3, [pc, #164]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	4926      	ldr	r1, [pc, #152]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800310e:	d105      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003110:	4b21      	ldr	r3, [pc, #132]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a20      	ldr	r2, [pc, #128]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800311a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d015      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003128:	4b1b      	ldr	r3, [pc, #108]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003136:	4918      	ldr	r1, [pc, #96]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003146:	d105      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003148:	4b13      	ldr	r3, [pc, #76]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a12      	ldr	r2, [pc, #72]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800314e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003152:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d015      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003160:	4b0d      	ldr	r3, [pc, #52]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003162:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003166:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316e:	490a      	ldr	r1, [pc, #40]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800317e:	d105      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003180:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a04      	ldr	r2, [pc, #16]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800318a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800318c:	7cbb      	ldrb	r3, [r7, #18]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000

0800319c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e049      	b.n	8003242 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe f82c 	bl	8001220 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3304      	adds	r3, #4
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f000 fbd2 	bl	8003984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e049      	b.n	80032f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f841 	bl	80032f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2202      	movs	r2, #2
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	4619      	mov	r1, r3
 8003288:	4610      	mov	r0, r2
 800328a:	f000 fb7b 	bl	8003984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <HAL_TIM_PWM_Start+0x24>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e03c      	b.n	80033aa <HAL_TIM_PWM_Start+0x9e>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b04      	cmp	r3, #4
 8003334:	d109      	bne.n	800334a <HAL_TIM_PWM_Start+0x3e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	bf14      	ite	ne
 8003342:	2301      	movne	r3, #1
 8003344:	2300      	moveq	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	e02f      	b.n	80033aa <HAL_TIM_PWM_Start+0x9e>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b08      	cmp	r3, #8
 800334e:	d109      	bne.n	8003364 <HAL_TIM_PWM_Start+0x58>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	bf14      	ite	ne
 800335c:	2301      	movne	r3, #1
 800335e:	2300      	moveq	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e022      	b.n	80033aa <HAL_TIM_PWM_Start+0x9e>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d109      	bne.n	800337e <HAL_TIM_PWM_Start+0x72>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	bf14      	ite	ne
 8003376:	2301      	movne	r3, #1
 8003378:	2300      	moveq	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	e015      	b.n	80033aa <HAL_TIM_PWM_Start+0x9e>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b10      	cmp	r3, #16
 8003382:	d109      	bne.n	8003398 <HAL_TIM_PWM_Start+0x8c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	bf14      	ite	ne
 8003390:	2301      	movne	r3, #1
 8003392:	2300      	moveq	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e008      	b.n	80033aa <HAL_TIM_PWM_Start+0x9e>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0a6      	b.n	8003500 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d104      	bne.n	80033c2 <HAL_TIM_PWM_Start+0xb6>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033c0:	e023      	b.n	800340a <HAL_TIM_PWM_Start+0xfe>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d104      	bne.n	80033d2 <HAL_TIM_PWM_Start+0xc6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033d0:	e01b      	b.n	800340a <HAL_TIM_PWM_Start+0xfe>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d104      	bne.n	80033e2 <HAL_TIM_PWM_Start+0xd6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033e0:	e013      	b.n	800340a <HAL_TIM_PWM_Start+0xfe>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b0c      	cmp	r3, #12
 80033e6:	d104      	bne.n	80033f2 <HAL_TIM_PWM_Start+0xe6>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033f0:	e00b      	b.n	800340a <HAL_TIM_PWM_Start+0xfe>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_PWM_Start+0xf6>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003400:	e003      	b.n	800340a <HAL_TIM_PWM_Start+0xfe>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2201      	movs	r2, #1
 8003410:	6839      	ldr	r1, [r7, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 ff30 	bl	8004278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a3a      	ldr	r2, [pc, #232]	@ (8003508 <HAL_TIM_PWM_Start+0x1fc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d018      	beq.n	8003454 <HAL_TIM_PWM_Start+0x148>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a39      	ldr	r2, [pc, #228]	@ (800350c <HAL_TIM_PWM_Start+0x200>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d013      	beq.n	8003454 <HAL_TIM_PWM_Start+0x148>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a37      	ldr	r2, [pc, #220]	@ (8003510 <HAL_TIM_PWM_Start+0x204>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00e      	beq.n	8003454 <HAL_TIM_PWM_Start+0x148>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a36      	ldr	r2, [pc, #216]	@ (8003514 <HAL_TIM_PWM_Start+0x208>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d009      	beq.n	8003454 <HAL_TIM_PWM_Start+0x148>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a34      	ldr	r2, [pc, #208]	@ (8003518 <HAL_TIM_PWM_Start+0x20c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d004      	beq.n	8003454 <HAL_TIM_PWM_Start+0x148>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a33      	ldr	r2, [pc, #204]	@ (800351c <HAL_TIM_PWM_Start+0x210>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d101      	bne.n	8003458 <HAL_TIM_PWM_Start+0x14c>
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <HAL_TIM_PWM_Start+0x14e>
 8003458:	2300      	movs	r3, #0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800346c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a25      	ldr	r2, [pc, #148]	@ (8003508 <HAL_TIM_PWM_Start+0x1fc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d022      	beq.n	80034be <HAL_TIM_PWM_Start+0x1b2>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003480:	d01d      	beq.n	80034be <HAL_TIM_PWM_Start+0x1b2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a26      	ldr	r2, [pc, #152]	@ (8003520 <HAL_TIM_PWM_Start+0x214>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d018      	beq.n	80034be <HAL_TIM_PWM_Start+0x1b2>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a24      	ldr	r2, [pc, #144]	@ (8003524 <HAL_TIM_PWM_Start+0x218>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_TIM_PWM_Start+0x1b2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a23      	ldr	r2, [pc, #140]	@ (8003528 <HAL_TIM_PWM_Start+0x21c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00e      	beq.n	80034be <HAL_TIM_PWM_Start+0x1b2>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a19      	ldr	r2, [pc, #100]	@ (800350c <HAL_TIM_PWM_Start+0x200>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d009      	beq.n	80034be <HAL_TIM_PWM_Start+0x1b2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a18      	ldr	r2, [pc, #96]	@ (8003510 <HAL_TIM_PWM_Start+0x204>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d004      	beq.n	80034be <HAL_TIM_PWM_Start+0x1b2>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a18      	ldr	r2, [pc, #96]	@ (800351c <HAL_TIM_PWM_Start+0x210>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d115      	bne.n	80034ea <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	4b19      	ldr	r3, [pc, #100]	@ (800352c <HAL_TIM_PWM_Start+0x220>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b06      	cmp	r3, #6
 80034ce:	d015      	beq.n	80034fc <HAL_TIM_PWM_Start+0x1f0>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034d6:	d011      	beq.n	80034fc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e8:	e008      	b.n	80034fc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e000      	b.n	80034fe <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40013400 	.word	0x40013400
 8003510:	40014000 	.word	0x40014000
 8003514:	40014400 	.word	0x40014400
 8003518:	40014800 	.word	0x40014800
 800351c:	40015000 	.word	0x40015000
 8003520:	40000400 	.word	0x40000400
 8003524:	40000800 	.word	0x40000800
 8003528:	40000c00 	.word	0x40000c00
 800352c:	00010007 	.word	0x00010007

08003530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800354a:	2302      	movs	r3, #2
 800354c:	e0ff      	b.n	800374e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b14      	cmp	r3, #20
 800355a:	f200 80f0 	bhi.w	800373e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800355e:	a201      	add	r2, pc, #4	@ (adr r2, 8003564 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003564:	080035b9 	.word	0x080035b9
 8003568:	0800373f 	.word	0x0800373f
 800356c:	0800373f 	.word	0x0800373f
 8003570:	0800373f 	.word	0x0800373f
 8003574:	080035f9 	.word	0x080035f9
 8003578:	0800373f 	.word	0x0800373f
 800357c:	0800373f 	.word	0x0800373f
 8003580:	0800373f 	.word	0x0800373f
 8003584:	0800363b 	.word	0x0800363b
 8003588:	0800373f 	.word	0x0800373f
 800358c:	0800373f 	.word	0x0800373f
 8003590:	0800373f 	.word	0x0800373f
 8003594:	0800367b 	.word	0x0800367b
 8003598:	0800373f 	.word	0x0800373f
 800359c:	0800373f 	.word	0x0800373f
 80035a0:	0800373f 	.word	0x0800373f
 80035a4:	080036bd 	.word	0x080036bd
 80035a8:	0800373f 	.word	0x0800373f
 80035ac:	0800373f 	.word	0x0800373f
 80035b0:	0800373f 	.word	0x0800373f
 80035b4:	080036fd 	.word	0x080036fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fa94 	bl	8003aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0208 	orr.w	r2, r2, #8
 80035d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0204 	bic.w	r2, r2, #4
 80035e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6999      	ldr	r1, [r3, #24]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	619a      	str	r2, [r3, #24]
      break;
 80035f6:	e0a5      	b.n	8003744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fb0e 	bl	8003c20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6999      	ldr	r1, [r3, #24]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	021a      	lsls	r2, r3, #8
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	619a      	str	r2, [r3, #24]
      break;
 8003638:	e084      	b.n	8003744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fb81 	bl	8003d48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0208 	orr.w	r2, r2, #8
 8003654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0204 	bic.w	r2, r2, #4
 8003664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69d9      	ldr	r1, [r3, #28]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	61da      	str	r2, [r3, #28]
      break;
 8003678:	e064      	b.n	8003744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fbf3 	bl	8003e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69d9      	ldr	r1, [r3, #28]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	021a      	lsls	r2, r3, #8
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	61da      	str	r2, [r3, #28]
      break;
 80036ba:	e043      	b.n	8003744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fc66 	bl	8003f94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0208 	orr.w	r2, r2, #8
 80036d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0204 	bic.w	r2, r2, #4
 80036e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80036fa:	e023      	b.n	8003744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fcb0 	bl	8004068 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003716:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003726:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	021a      	lsls	r2, r3, #8
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800373c:	e002      	b.n	8003744 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
      break;
 8003742:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800374c:	7dfb      	ldrb	r3, [r7, #23]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop

08003758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_TIM_ConfigClockSource+0x1c>
 8003770:	2302      	movs	r3, #2
 8003772:	e0f6      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x20a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003792:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800379e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a6f      	ldr	r2, [pc, #444]	@ (800396c <HAL_TIM_ConfigClockSource+0x214>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	f000 80c1 	beq.w	8003936 <HAL_TIM_ConfigClockSource+0x1de>
 80037b4:	4a6d      	ldr	r2, [pc, #436]	@ (800396c <HAL_TIM_ConfigClockSource+0x214>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	f200 80c6 	bhi.w	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 80037bc:	4a6c      	ldr	r2, [pc, #432]	@ (8003970 <HAL_TIM_ConfigClockSource+0x218>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	f000 80b9 	beq.w	8003936 <HAL_TIM_ConfigClockSource+0x1de>
 80037c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003970 <HAL_TIM_ConfigClockSource+0x218>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	f200 80be 	bhi.w	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 80037cc:	4a69      	ldr	r2, [pc, #420]	@ (8003974 <HAL_TIM_ConfigClockSource+0x21c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	f000 80b1 	beq.w	8003936 <HAL_TIM_ConfigClockSource+0x1de>
 80037d4:	4a67      	ldr	r2, [pc, #412]	@ (8003974 <HAL_TIM_ConfigClockSource+0x21c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	f200 80b6 	bhi.w	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 80037dc:	4a66      	ldr	r2, [pc, #408]	@ (8003978 <HAL_TIM_ConfigClockSource+0x220>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	f000 80a9 	beq.w	8003936 <HAL_TIM_ConfigClockSource+0x1de>
 80037e4:	4a64      	ldr	r2, [pc, #400]	@ (8003978 <HAL_TIM_ConfigClockSource+0x220>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	f200 80ae 	bhi.w	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 80037ec:	4a63      	ldr	r2, [pc, #396]	@ (800397c <HAL_TIM_ConfigClockSource+0x224>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	f000 80a1 	beq.w	8003936 <HAL_TIM_ConfigClockSource+0x1de>
 80037f4:	4a61      	ldr	r2, [pc, #388]	@ (800397c <HAL_TIM_ConfigClockSource+0x224>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	f200 80a6 	bhi.w	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 80037fc:	4a60      	ldr	r2, [pc, #384]	@ (8003980 <HAL_TIM_ConfigClockSource+0x228>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	f000 8099 	beq.w	8003936 <HAL_TIM_ConfigClockSource+0x1de>
 8003804:	4a5e      	ldr	r2, [pc, #376]	@ (8003980 <HAL_TIM_ConfigClockSource+0x228>)
 8003806:	4293      	cmp	r3, r2
 8003808:	f200 809e 	bhi.w	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 800380c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003810:	f000 8091 	beq.w	8003936 <HAL_TIM_ConfigClockSource+0x1de>
 8003814:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003818:	f200 8096 	bhi.w	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 800381c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003820:	f000 8089 	beq.w	8003936 <HAL_TIM_ConfigClockSource+0x1de>
 8003824:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003828:	f200 808e 	bhi.w	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 800382c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003830:	d03e      	beq.n	80038b0 <HAL_TIM_ConfigClockSource+0x158>
 8003832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003836:	f200 8087 	bhi.w	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383e:	f000 8086 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x1f6>
 8003842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003846:	d87f      	bhi.n	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 8003848:	2b70      	cmp	r3, #112	@ 0x70
 800384a:	d01a      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0x12a>
 800384c:	2b70      	cmp	r3, #112	@ 0x70
 800384e:	d87b      	bhi.n	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 8003850:	2b60      	cmp	r3, #96	@ 0x60
 8003852:	d050      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x19e>
 8003854:	2b60      	cmp	r3, #96	@ 0x60
 8003856:	d877      	bhi.n	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 8003858:	2b50      	cmp	r3, #80	@ 0x50
 800385a:	d03c      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x17e>
 800385c:	2b50      	cmp	r3, #80	@ 0x50
 800385e:	d873      	bhi.n	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 8003860:	2b40      	cmp	r3, #64	@ 0x40
 8003862:	d058      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x1be>
 8003864:	2b40      	cmp	r3, #64	@ 0x40
 8003866:	d86f      	bhi.n	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 8003868:	2b30      	cmp	r3, #48	@ 0x30
 800386a:	d064      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x1de>
 800386c:	2b30      	cmp	r3, #48	@ 0x30
 800386e:	d86b      	bhi.n	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 8003870:	2b20      	cmp	r3, #32
 8003872:	d060      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x1de>
 8003874:	2b20      	cmp	r3, #32
 8003876:	d867      	bhi.n	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d05c      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x1de>
 800387c:	2b10      	cmp	r3, #16
 800387e:	d05a      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x1de>
 8003880:	e062      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003892:	f000 fcd1 	bl	8004238 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	609a      	str	r2, [r3, #8]
      break;
 80038ae:	e04f      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038c0:	f000 fcba 	bl	8004238 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038d2:	609a      	str	r2, [r3, #8]
      break;
 80038d4:	e03c      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e2:	461a      	mov	r2, r3
 80038e4:	f000 fc2c 	bl	8004140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2150      	movs	r1, #80	@ 0x50
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fc85 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 80038f4:	e02c      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003902:	461a      	mov	r2, r3
 8003904:	f000 fc4b 	bl	800419e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2160      	movs	r1, #96	@ 0x60
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fc75 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003914:	e01c      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003922:	461a      	mov	r2, r3
 8003924:	f000 fc0c 	bl	8004140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2140      	movs	r1, #64	@ 0x40
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fc65 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003934:	e00c      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f000 fc5c 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003946:	e003      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
      break;
 800394c:	e000      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800394e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	00100070 	.word	0x00100070
 8003970:	00100060 	.word	0x00100060
 8003974:	00100050 	.word	0x00100050
 8003978:	00100040 	.word	0x00100040
 800397c:	00100030 	.word	0x00100030
 8003980:	00100020 	.word	0x00100020

08003984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a4c      	ldr	r2, [pc, #304]	@ (8003ac8 <TIM_Base_SetConfig+0x144>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d017      	beq.n	80039cc <TIM_Base_SetConfig+0x48>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a2:	d013      	beq.n	80039cc <TIM_Base_SetConfig+0x48>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a49      	ldr	r2, [pc, #292]	@ (8003acc <TIM_Base_SetConfig+0x148>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00f      	beq.n	80039cc <TIM_Base_SetConfig+0x48>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a48      	ldr	r2, [pc, #288]	@ (8003ad0 <TIM_Base_SetConfig+0x14c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00b      	beq.n	80039cc <TIM_Base_SetConfig+0x48>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a47      	ldr	r2, [pc, #284]	@ (8003ad4 <TIM_Base_SetConfig+0x150>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d007      	beq.n	80039cc <TIM_Base_SetConfig+0x48>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a46      	ldr	r2, [pc, #280]	@ (8003ad8 <TIM_Base_SetConfig+0x154>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0x48>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a45      	ldr	r2, [pc, #276]	@ (8003adc <TIM_Base_SetConfig+0x158>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d108      	bne.n	80039de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a39      	ldr	r2, [pc, #228]	@ (8003ac8 <TIM_Base_SetConfig+0x144>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d023      	beq.n	8003a2e <TIM_Base_SetConfig+0xaa>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ec:	d01f      	beq.n	8003a2e <TIM_Base_SetConfig+0xaa>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a36      	ldr	r2, [pc, #216]	@ (8003acc <TIM_Base_SetConfig+0x148>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01b      	beq.n	8003a2e <TIM_Base_SetConfig+0xaa>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a35      	ldr	r2, [pc, #212]	@ (8003ad0 <TIM_Base_SetConfig+0x14c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d017      	beq.n	8003a2e <TIM_Base_SetConfig+0xaa>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a34      	ldr	r2, [pc, #208]	@ (8003ad4 <TIM_Base_SetConfig+0x150>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <TIM_Base_SetConfig+0xaa>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a33      	ldr	r2, [pc, #204]	@ (8003ad8 <TIM_Base_SetConfig+0x154>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00f      	beq.n	8003a2e <TIM_Base_SetConfig+0xaa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a33      	ldr	r2, [pc, #204]	@ (8003ae0 <TIM_Base_SetConfig+0x15c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00b      	beq.n	8003a2e <TIM_Base_SetConfig+0xaa>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a32      	ldr	r2, [pc, #200]	@ (8003ae4 <TIM_Base_SetConfig+0x160>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d007      	beq.n	8003a2e <TIM_Base_SetConfig+0xaa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a31      	ldr	r2, [pc, #196]	@ (8003ae8 <TIM_Base_SetConfig+0x164>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d003      	beq.n	8003a2e <TIM_Base_SetConfig+0xaa>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a2c      	ldr	r2, [pc, #176]	@ (8003adc <TIM_Base_SetConfig+0x158>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d108      	bne.n	8003a40 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a18      	ldr	r2, [pc, #96]	@ (8003ac8 <TIM_Base_SetConfig+0x144>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <TIM_Base_SetConfig+0x110>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad8 <TIM_Base_SetConfig+0x154>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00f      	beq.n	8003a94 <TIM_Base_SetConfig+0x110>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae0 <TIM_Base_SetConfig+0x15c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00b      	beq.n	8003a94 <TIM_Base_SetConfig+0x110>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a19      	ldr	r2, [pc, #100]	@ (8003ae4 <TIM_Base_SetConfig+0x160>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <TIM_Base_SetConfig+0x110>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a18      	ldr	r2, [pc, #96]	@ (8003ae8 <TIM_Base_SetConfig+0x164>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <TIM_Base_SetConfig+0x110>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a13      	ldr	r2, [pc, #76]	@ (8003adc <TIM_Base_SetConfig+0x158>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d103      	bne.n	8003a9c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d105      	bne.n	8003aba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f023 0201 	bic.w	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	611a      	str	r2, [r3, #16]
  }
}
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40012c00 	.word	0x40012c00
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40000c00 	.word	0x40000c00
 8003ad8:	40013400 	.word	0x40013400
 8003adc:	40015000 	.word	0x40015000
 8003ae0:	40014000 	.word	0x40014000
 8003ae4:	40014400 	.word	0x40014400
 8003ae8:	40014800 	.word	0x40014800

08003aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f023 0201 	bic.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f023 0302 	bic.w	r3, r3, #2
 8003b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a30      	ldr	r2, [pc, #192]	@ (8003c08 <TIM_OC1_SetConfig+0x11c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d013      	beq.n	8003b74 <TIM_OC1_SetConfig+0x88>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8003c0c <TIM_OC1_SetConfig+0x120>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00f      	beq.n	8003b74 <TIM_OC1_SetConfig+0x88>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a2e      	ldr	r2, [pc, #184]	@ (8003c10 <TIM_OC1_SetConfig+0x124>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00b      	beq.n	8003b74 <TIM_OC1_SetConfig+0x88>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c14 <TIM_OC1_SetConfig+0x128>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d007      	beq.n	8003b74 <TIM_OC1_SetConfig+0x88>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a2c      	ldr	r2, [pc, #176]	@ (8003c18 <TIM_OC1_SetConfig+0x12c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_OC1_SetConfig+0x88>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c1c <TIM_OC1_SetConfig+0x130>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d10c      	bne.n	8003b8e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0308 	bic.w	r3, r3, #8
 8003b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f023 0304 	bic.w	r3, r3, #4
 8003b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a1d      	ldr	r2, [pc, #116]	@ (8003c08 <TIM_OC1_SetConfig+0x11c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <TIM_OC1_SetConfig+0xd2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1c      	ldr	r2, [pc, #112]	@ (8003c0c <TIM_OC1_SetConfig+0x120>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00f      	beq.n	8003bbe <TIM_OC1_SetConfig+0xd2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c10 <TIM_OC1_SetConfig+0x124>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00b      	beq.n	8003bbe <TIM_OC1_SetConfig+0xd2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c14 <TIM_OC1_SetConfig+0x128>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d007      	beq.n	8003bbe <TIM_OC1_SetConfig+0xd2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a19      	ldr	r2, [pc, #100]	@ (8003c18 <TIM_OC1_SetConfig+0x12c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d003      	beq.n	8003bbe <TIM_OC1_SetConfig+0xd2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a18      	ldr	r2, [pc, #96]	@ (8003c1c <TIM_OC1_SetConfig+0x130>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d111      	bne.n	8003be2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	621a      	str	r2, [r3, #32]
}
 8003bfc:	bf00      	nop
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40013400 	.word	0x40013400
 8003c10:	40014000 	.word	0x40014000
 8003c14:	40014400 	.word	0x40014400
 8003c18:	40014800 	.word	0x40014800
 8003c1c:	40015000 	.word	0x40015000

08003c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f023 0210 	bic.w	r2, r3, #16
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f023 0320 	bic.w	r3, r3, #32
 8003c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003d30 <TIM_OC2_SetConfig+0x110>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d007      	beq.n	8003c94 <TIM_OC2_SetConfig+0x74>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a2b      	ldr	r2, [pc, #172]	@ (8003d34 <TIM_OC2_SetConfig+0x114>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d003      	beq.n	8003c94 <TIM_OC2_SetConfig+0x74>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003d38 <TIM_OC2_SetConfig+0x118>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d10d      	bne.n	8003cb0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d30 <TIM_OC2_SetConfig+0x110>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d013      	beq.n	8003ce0 <TIM_OC2_SetConfig+0xc0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a1e      	ldr	r2, [pc, #120]	@ (8003d34 <TIM_OC2_SetConfig+0x114>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00f      	beq.n	8003ce0 <TIM_OC2_SetConfig+0xc0>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d3c <TIM_OC2_SetConfig+0x11c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00b      	beq.n	8003ce0 <TIM_OC2_SetConfig+0xc0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a1d      	ldr	r2, [pc, #116]	@ (8003d40 <TIM_OC2_SetConfig+0x120>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d007      	beq.n	8003ce0 <TIM_OC2_SetConfig+0xc0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d44 <TIM_OC2_SetConfig+0x124>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d003      	beq.n	8003ce0 <TIM_OC2_SetConfig+0xc0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a17      	ldr	r2, [pc, #92]	@ (8003d38 <TIM_OC2_SetConfig+0x118>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d113      	bne.n	8003d08 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40013400 	.word	0x40013400
 8003d38:	40015000 	.word	0x40015000
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40014400 	.word	0x40014400
 8003d44:	40014800 	.word	0x40014800

08003d48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0303 	bic.w	r3, r3, #3
 8003d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a2b      	ldr	r2, [pc, #172]	@ (8003e54 <TIM_OC3_SetConfig+0x10c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <TIM_OC3_SetConfig+0x72>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a2a      	ldr	r2, [pc, #168]	@ (8003e58 <TIM_OC3_SetConfig+0x110>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_OC3_SetConfig+0x72>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a29      	ldr	r2, [pc, #164]	@ (8003e5c <TIM_OC3_SetConfig+0x114>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10d      	bne.n	8003dd6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e54 <TIM_OC3_SetConfig+0x10c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <TIM_OC3_SetConfig+0xbe>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e58 <TIM_OC3_SetConfig+0x110>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00f      	beq.n	8003e06 <TIM_OC3_SetConfig+0xbe>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e60 <TIM_OC3_SetConfig+0x118>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00b      	beq.n	8003e06 <TIM_OC3_SetConfig+0xbe>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e64 <TIM_OC3_SetConfig+0x11c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d007      	beq.n	8003e06 <TIM_OC3_SetConfig+0xbe>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a1b      	ldr	r2, [pc, #108]	@ (8003e68 <TIM_OC3_SetConfig+0x120>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d003      	beq.n	8003e06 <TIM_OC3_SetConfig+0xbe>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a16      	ldr	r2, [pc, #88]	@ (8003e5c <TIM_OC3_SetConfig+0x114>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d113      	bne.n	8003e2e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	621a      	str	r2, [r3, #32]
}
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	40013400 	.word	0x40013400
 8003e5c:	40015000 	.word	0x40015000
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40014400 	.word	0x40014400
 8003e68:	40014800 	.word	0x40014800

08003e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	031b      	lsls	r3, r3, #12
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a2c      	ldr	r2, [pc, #176]	@ (8003f7c <TIM_OC4_SetConfig+0x110>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d007      	beq.n	8003ee0 <TIM_OC4_SetConfig+0x74>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a2b      	ldr	r2, [pc, #172]	@ (8003f80 <TIM_OC4_SetConfig+0x114>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_OC4_SetConfig+0x74>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a2a      	ldr	r2, [pc, #168]	@ (8003f84 <TIM_OC4_SetConfig+0x118>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d10d      	bne.n	8003efc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	031b      	lsls	r3, r3, #12
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003efa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a1f      	ldr	r2, [pc, #124]	@ (8003f7c <TIM_OC4_SetConfig+0x110>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d013      	beq.n	8003f2c <TIM_OC4_SetConfig+0xc0>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a1e      	ldr	r2, [pc, #120]	@ (8003f80 <TIM_OC4_SetConfig+0x114>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00f      	beq.n	8003f2c <TIM_OC4_SetConfig+0xc0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8003f88 <TIM_OC4_SetConfig+0x11c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00b      	beq.n	8003f2c <TIM_OC4_SetConfig+0xc0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a1d      	ldr	r2, [pc, #116]	@ (8003f8c <TIM_OC4_SetConfig+0x120>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <TIM_OC4_SetConfig+0xc0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003f90 <TIM_OC4_SetConfig+0x124>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_OC4_SetConfig+0xc0>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a17      	ldr	r2, [pc, #92]	@ (8003f84 <TIM_OC4_SetConfig+0x118>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d113      	bne.n	8003f54 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f32:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003f3a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	019b      	lsls	r3, r3, #6
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	621a      	str	r2, [r3, #32]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40013400 	.word	0x40013400
 8003f84:	40015000 	.word	0x40015000
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40014400 	.word	0x40014400
 8003f90:	40014800 	.word	0x40014800

08003f94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003fd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a19      	ldr	r2, [pc, #100]	@ (8004050 <TIM_OC5_SetConfig+0xbc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <TIM_OC5_SetConfig+0x82>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a18      	ldr	r2, [pc, #96]	@ (8004054 <TIM_OC5_SetConfig+0xc0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00f      	beq.n	8004016 <TIM_OC5_SetConfig+0x82>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a17      	ldr	r2, [pc, #92]	@ (8004058 <TIM_OC5_SetConfig+0xc4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00b      	beq.n	8004016 <TIM_OC5_SetConfig+0x82>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a16      	ldr	r2, [pc, #88]	@ (800405c <TIM_OC5_SetConfig+0xc8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <TIM_OC5_SetConfig+0x82>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a15      	ldr	r2, [pc, #84]	@ (8004060 <TIM_OC5_SetConfig+0xcc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d003      	beq.n	8004016 <TIM_OC5_SetConfig+0x82>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a14      	ldr	r2, [pc, #80]	@ (8004064 <TIM_OC5_SetConfig+0xd0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d109      	bne.n	800402a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800401c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	621a      	str	r2, [r3, #32]
}
 8004044:	bf00      	nop
 8004046:	371c      	adds	r7, #28
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	40012c00 	.word	0x40012c00
 8004054:	40013400 	.word	0x40013400
 8004058:	40014000 	.word	0x40014000
 800405c:	40014400 	.word	0x40014400
 8004060:	40014800 	.word	0x40014800
 8004064:	40015000 	.word	0x40015000

08004068 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800409a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	051b      	lsls	r3, r3, #20
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a1a      	ldr	r2, [pc, #104]	@ (8004128 <TIM_OC6_SetConfig+0xc0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d013      	beq.n	80040ec <TIM_OC6_SetConfig+0x84>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a19      	ldr	r2, [pc, #100]	@ (800412c <TIM_OC6_SetConfig+0xc4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00f      	beq.n	80040ec <TIM_OC6_SetConfig+0x84>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a18      	ldr	r2, [pc, #96]	@ (8004130 <TIM_OC6_SetConfig+0xc8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00b      	beq.n	80040ec <TIM_OC6_SetConfig+0x84>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a17      	ldr	r2, [pc, #92]	@ (8004134 <TIM_OC6_SetConfig+0xcc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <TIM_OC6_SetConfig+0x84>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a16      	ldr	r2, [pc, #88]	@ (8004138 <TIM_OC6_SetConfig+0xd0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_OC6_SetConfig+0x84>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a15      	ldr	r2, [pc, #84]	@ (800413c <TIM_OC6_SetConfig+0xd4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d109      	bne.n	8004100 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	029b      	lsls	r3, r3, #10
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	621a      	str	r2, [r3, #32]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40012c00 	.word	0x40012c00
 800412c:	40013400 	.word	0x40013400
 8004130:	40014000 	.word	0x40014000
 8004134:	40014400 	.word	0x40014400
 8004138:	40014800 	.word	0x40014800
 800413c:	40015000 	.word	0x40015000

08004140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f023 0201 	bic.w	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800416a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f023 030a 	bic.w	r3, r3, #10
 800417c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800419e:	b480      	push	{r7}
 80041a0:	b087      	sub	sp, #28
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f023 0210 	bic.w	r2, r3, #16
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	031b      	lsls	r3, r3, #12
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004218:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	f043 0307 	orr.w	r3, r3, #7
 8004224:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	609a      	str	r2, [r3, #8]
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	021a      	lsls	r2, r3, #8
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	431a      	orrs	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4313      	orrs	r3, r2
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	609a      	str	r2, [r3, #8]
}
 800426c:	bf00      	nop
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2201      	movs	r2, #1
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1a      	ldr	r2, [r3, #32]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	43db      	mvns	r3, r3
 800429a:	401a      	ands	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a1a      	ldr	r2, [r3, #32]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	fa01 f303 	lsl.w	r3, r1, r3
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	621a      	str	r2, [r3, #32]
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d8:	2302      	movs	r3, #2
 80042da:	e074      	b.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a34      	ldr	r2, [pc, #208]	@ (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d009      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a33      	ldr	r2, [pc, #204]	@ (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a31      	ldr	r2, [pc, #196]	@ (80043dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d108      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004320:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a21      	ldr	r2, [pc, #132]	@ (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d022      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435c:	d01d      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1f      	ldr	r2, [pc, #124]	@ (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d018      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1d      	ldr	r2, [pc, #116]	@ (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d013      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1c      	ldr	r2, [pc, #112]	@ (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00e      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a15      	ldr	r2, [pc, #84]	@ (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a18      	ldr	r2, [pc, #96]	@ (80043ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d004      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a11      	ldr	r2, [pc, #68]	@ (80043dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d10c      	bne.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40012c00 	.word	0x40012c00
 80043d8:	40013400 	.word	0x40013400
 80043dc:	40015000 	.word	0x40015000
 80043e0:	40000400 	.word	0x40000400
 80043e4:	40000800 	.word	0x40000800
 80043e8:	40000c00 	.word	0x40000c00
 80043ec:	40014000 	.word	0x40014000

080043f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e042      	b.n	8004488 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7fc ff77 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2224      	movs	r2, #36	@ 0x24
 800441e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fc7a 	bl	8004d34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f97b 	bl	800473c <UART_SetConfig>
 8004446:	4603      	mov	r3, r0
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e01b      	b.n	8004488 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800445e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800446e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fcf9 	bl	8004e78 <UART_CheckIdleState>
 8004486:	4603      	mov	r3, r0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	@ 0x28
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d17b      	bne.n	80045a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_UART_Transmit+0x26>
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e074      	b.n	80045a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2221      	movs	r2, #33	@ 0x21
 80044c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ca:	f7fd fae5 	bl	8001a98 <HAL_GetTick>
 80044ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044e8:	d108      	bne.n	80044fc <HAL_UART_Transmit+0x6c>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	e003      	b.n	8004504 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004504:	e030      	b.n	8004568 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2200      	movs	r2, #0
 800450e:	2180      	movs	r1, #128	@ 0x80
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 fd5b 	bl	8004fcc <UART_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e03d      	b.n	80045a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10b      	bne.n	8004546 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800453c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	3302      	adds	r3, #2
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	e007      	b.n	8004556 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	3301      	adds	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1c8      	bne.n	8004506 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2200      	movs	r2, #0
 800457c:	2140      	movs	r1, #64	@ 0x40
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fd24 	bl	8004fcc <UART_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e006      	b.n	80045a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e000      	b.n	80045a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80045a2:	2302      	movs	r3, #2
  }
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	@ 0x28
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	f040 80b5 	bne.w	8004732 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_UART_Receive+0x28>
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e0ad      	b.n	8004734 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2222      	movs	r2, #34	@ 0x22
 80045e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ee:	f7fd fa53 	bl	8001a98 <HAL_GetTick>
 80045f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	88fa      	ldrh	r2, [r7, #6]
 80045f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	88fa      	ldrh	r2, [r7, #6]
 8004600:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800460c:	d10e      	bne.n	800462c <HAL_UART_Receive+0x80>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <HAL_UART_Receive+0x76>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800461c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004620:	e02d      	b.n	800467e <HAL_UART_Receive+0xd2>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	22ff      	movs	r2, #255	@ 0xff
 8004626:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800462a:	e028      	b.n	800467e <HAL_UART_Receive+0xd2>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10d      	bne.n	8004650 <HAL_UART_Receive+0xa4>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d104      	bne.n	8004646 <HAL_UART_Receive+0x9a>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	22ff      	movs	r2, #255	@ 0xff
 8004640:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004644:	e01b      	b.n	800467e <HAL_UART_Receive+0xd2>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	227f      	movs	r2, #127	@ 0x7f
 800464a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800464e:	e016      	b.n	800467e <HAL_UART_Receive+0xd2>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004658:	d10d      	bne.n	8004676 <HAL_UART_Receive+0xca>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d104      	bne.n	800466c <HAL_UART_Receive+0xc0>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	227f      	movs	r2, #127	@ 0x7f
 8004666:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800466a:	e008      	b.n	800467e <HAL_UART_Receive+0xd2>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	223f      	movs	r2, #63	@ 0x3f
 8004670:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004674:	e003      	b.n	800467e <HAL_UART_Receive+0xd2>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004684:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468e:	d108      	bne.n	80046a2 <HAL_UART_Receive+0xf6>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004698:	2300      	movs	r3, #0
 800469a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	e003      	b.n	80046aa <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80046aa:	e036      	b.n	800471a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2200      	movs	r2, #0
 80046b4:	2120      	movs	r1, #32
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fc88 	bl	8004fcc <UART_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e032      	b.n	8004734 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10c      	bne.n	80046ee <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	b29a      	uxth	r2, r3
 80046dc:	8a7b      	ldrh	r3, [r7, #18]
 80046de:	4013      	ands	r3, r2
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	3302      	adds	r3, #2
 80046ea:	61bb      	str	r3, [r7, #24]
 80046ec:	e00c      	b.n	8004708 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	8a7b      	ldrh	r3, [r7, #18]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	4013      	ands	r3, r2
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	3301      	adds	r3, #1
 8004706:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1c2      	bne.n	80046ac <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e000      	b.n	8004734 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004732:	2302      	movs	r3, #2
  }
}
 8004734:	4618      	mov	r0, r3
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800473c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004740:	b08c      	sub	sp, #48	@ 0x30
 8004742:	af00      	add	r7, sp, #0
 8004744:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	431a      	orrs	r2, r3
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	431a      	orrs	r2, r3
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	4313      	orrs	r3, r2
 8004762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4baa      	ldr	r3, [pc, #680]	@ (8004a14 <UART_SetConfig+0x2d8>)
 800476c:	4013      	ands	r3, r2
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004774:	430b      	orrs	r3, r1
 8004776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a9f      	ldr	r2, [pc, #636]	@ (8004a18 <UART_SetConfig+0x2dc>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d004      	beq.n	80047a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047a4:	4313      	orrs	r3, r2
 80047a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80047b2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047bc:	430b      	orrs	r3, r1
 80047be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c6:	f023 010f 	bic.w	r1, r3, #15
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a90      	ldr	r2, [pc, #576]	@ (8004a1c <UART_SetConfig+0x2e0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d125      	bne.n	800482c <UART_SetConfig+0xf0>
 80047e0:	4b8f      	ldr	r3, [pc, #572]	@ (8004a20 <UART_SetConfig+0x2e4>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d81a      	bhi.n	8004824 <UART_SetConfig+0xe8>
 80047ee:	a201      	add	r2, pc, #4	@ (adr r2, 80047f4 <UART_SetConfig+0xb8>)
 80047f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f4:	08004805 	.word	0x08004805
 80047f8:	08004815 	.word	0x08004815
 80047fc:	0800480d 	.word	0x0800480d
 8004800:	0800481d 	.word	0x0800481d
 8004804:	2301      	movs	r3, #1
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800480a:	e116      	b.n	8004a3a <UART_SetConfig+0x2fe>
 800480c:	2302      	movs	r3, #2
 800480e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004812:	e112      	b.n	8004a3a <UART_SetConfig+0x2fe>
 8004814:	2304      	movs	r3, #4
 8004816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800481a:	e10e      	b.n	8004a3a <UART_SetConfig+0x2fe>
 800481c:	2308      	movs	r3, #8
 800481e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004822:	e10a      	b.n	8004a3a <UART_SetConfig+0x2fe>
 8004824:	2310      	movs	r3, #16
 8004826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800482a:	e106      	b.n	8004a3a <UART_SetConfig+0x2fe>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a7c      	ldr	r2, [pc, #496]	@ (8004a24 <UART_SetConfig+0x2e8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d138      	bne.n	80048a8 <UART_SetConfig+0x16c>
 8004836:	4b7a      	ldr	r3, [pc, #488]	@ (8004a20 <UART_SetConfig+0x2e4>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483c:	f003 030c 	and.w	r3, r3, #12
 8004840:	2b0c      	cmp	r3, #12
 8004842:	d82d      	bhi.n	80048a0 <UART_SetConfig+0x164>
 8004844:	a201      	add	r2, pc, #4	@ (adr r2, 800484c <UART_SetConfig+0x110>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	08004881 	.word	0x08004881
 8004850:	080048a1 	.word	0x080048a1
 8004854:	080048a1 	.word	0x080048a1
 8004858:	080048a1 	.word	0x080048a1
 800485c:	08004891 	.word	0x08004891
 8004860:	080048a1 	.word	0x080048a1
 8004864:	080048a1 	.word	0x080048a1
 8004868:	080048a1 	.word	0x080048a1
 800486c:	08004889 	.word	0x08004889
 8004870:	080048a1 	.word	0x080048a1
 8004874:	080048a1 	.word	0x080048a1
 8004878:	080048a1 	.word	0x080048a1
 800487c:	08004899 	.word	0x08004899
 8004880:	2300      	movs	r3, #0
 8004882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004886:	e0d8      	b.n	8004a3a <UART_SetConfig+0x2fe>
 8004888:	2302      	movs	r3, #2
 800488a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800488e:	e0d4      	b.n	8004a3a <UART_SetConfig+0x2fe>
 8004890:	2304      	movs	r3, #4
 8004892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004896:	e0d0      	b.n	8004a3a <UART_SetConfig+0x2fe>
 8004898:	2308      	movs	r3, #8
 800489a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800489e:	e0cc      	b.n	8004a3a <UART_SetConfig+0x2fe>
 80048a0:	2310      	movs	r3, #16
 80048a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048a6:	e0c8      	b.n	8004a3a <UART_SetConfig+0x2fe>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a5e      	ldr	r2, [pc, #376]	@ (8004a28 <UART_SetConfig+0x2ec>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d125      	bne.n	80048fe <UART_SetConfig+0x1c2>
 80048b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004a20 <UART_SetConfig+0x2e4>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048bc:	2b30      	cmp	r3, #48	@ 0x30
 80048be:	d016      	beq.n	80048ee <UART_SetConfig+0x1b2>
 80048c0:	2b30      	cmp	r3, #48	@ 0x30
 80048c2:	d818      	bhi.n	80048f6 <UART_SetConfig+0x1ba>
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d00a      	beq.n	80048de <UART_SetConfig+0x1a2>
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d814      	bhi.n	80048f6 <UART_SetConfig+0x1ba>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <UART_SetConfig+0x19a>
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d008      	beq.n	80048e6 <UART_SetConfig+0x1aa>
 80048d4:	e00f      	b.n	80048f6 <UART_SetConfig+0x1ba>
 80048d6:	2300      	movs	r3, #0
 80048d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048dc:	e0ad      	b.n	8004a3a <UART_SetConfig+0x2fe>
 80048de:	2302      	movs	r3, #2
 80048e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048e4:	e0a9      	b.n	8004a3a <UART_SetConfig+0x2fe>
 80048e6:	2304      	movs	r3, #4
 80048e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ec:	e0a5      	b.n	8004a3a <UART_SetConfig+0x2fe>
 80048ee:	2308      	movs	r3, #8
 80048f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048f4:	e0a1      	b.n	8004a3a <UART_SetConfig+0x2fe>
 80048f6:	2310      	movs	r3, #16
 80048f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048fc:	e09d      	b.n	8004a3a <UART_SetConfig+0x2fe>
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a4a      	ldr	r2, [pc, #296]	@ (8004a2c <UART_SetConfig+0x2f0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d125      	bne.n	8004954 <UART_SetConfig+0x218>
 8004908:	4b45      	ldr	r3, [pc, #276]	@ (8004a20 <UART_SetConfig+0x2e4>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004912:	2bc0      	cmp	r3, #192	@ 0xc0
 8004914:	d016      	beq.n	8004944 <UART_SetConfig+0x208>
 8004916:	2bc0      	cmp	r3, #192	@ 0xc0
 8004918:	d818      	bhi.n	800494c <UART_SetConfig+0x210>
 800491a:	2b80      	cmp	r3, #128	@ 0x80
 800491c:	d00a      	beq.n	8004934 <UART_SetConfig+0x1f8>
 800491e:	2b80      	cmp	r3, #128	@ 0x80
 8004920:	d814      	bhi.n	800494c <UART_SetConfig+0x210>
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <UART_SetConfig+0x1f0>
 8004926:	2b40      	cmp	r3, #64	@ 0x40
 8004928:	d008      	beq.n	800493c <UART_SetConfig+0x200>
 800492a:	e00f      	b.n	800494c <UART_SetConfig+0x210>
 800492c:	2300      	movs	r3, #0
 800492e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004932:	e082      	b.n	8004a3a <UART_SetConfig+0x2fe>
 8004934:	2302      	movs	r3, #2
 8004936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800493a:	e07e      	b.n	8004a3a <UART_SetConfig+0x2fe>
 800493c:	2304      	movs	r3, #4
 800493e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004942:	e07a      	b.n	8004a3a <UART_SetConfig+0x2fe>
 8004944:	2308      	movs	r3, #8
 8004946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800494a:	e076      	b.n	8004a3a <UART_SetConfig+0x2fe>
 800494c:	2310      	movs	r3, #16
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004952:	e072      	b.n	8004a3a <UART_SetConfig+0x2fe>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a35      	ldr	r2, [pc, #212]	@ (8004a30 <UART_SetConfig+0x2f4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d12a      	bne.n	80049b4 <UART_SetConfig+0x278>
 800495e:	4b30      	ldr	r3, [pc, #192]	@ (8004a20 <UART_SetConfig+0x2e4>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004964:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004968:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800496c:	d01a      	beq.n	80049a4 <UART_SetConfig+0x268>
 800496e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004972:	d81b      	bhi.n	80049ac <UART_SetConfig+0x270>
 8004974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004978:	d00c      	beq.n	8004994 <UART_SetConfig+0x258>
 800497a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800497e:	d815      	bhi.n	80049ac <UART_SetConfig+0x270>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <UART_SetConfig+0x250>
 8004984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004988:	d008      	beq.n	800499c <UART_SetConfig+0x260>
 800498a:	e00f      	b.n	80049ac <UART_SetConfig+0x270>
 800498c:	2300      	movs	r3, #0
 800498e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004992:	e052      	b.n	8004a3a <UART_SetConfig+0x2fe>
 8004994:	2302      	movs	r3, #2
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800499a:	e04e      	b.n	8004a3a <UART_SetConfig+0x2fe>
 800499c:	2304      	movs	r3, #4
 800499e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049a2:	e04a      	b.n	8004a3a <UART_SetConfig+0x2fe>
 80049a4:	2308      	movs	r3, #8
 80049a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049aa:	e046      	b.n	8004a3a <UART_SetConfig+0x2fe>
 80049ac:	2310      	movs	r3, #16
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049b2:	e042      	b.n	8004a3a <UART_SetConfig+0x2fe>
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a17      	ldr	r2, [pc, #92]	@ (8004a18 <UART_SetConfig+0x2dc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d13a      	bne.n	8004a34 <UART_SetConfig+0x2f8>
 80049be:	4b18      	ldr	r3, [pc, #96]	@ (8004a20 <UART_SetConfig+0x2e4>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049cc:	d01a      	beq.n	8004a04 <UART_SetConfig+0x2c8>
 80049ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049d2:	d81b      	bhi.n	8004a0c <UART_SetConfig+0x2d0>
 80049d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049d8:	d00c      	beq.n	80049f4 <UART_SetConfig+0x2b8>
 80049da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049de:	d815      	bhi.n	8004a0c <UART_SetConfig+0x2d0>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <UART_SetConfig+0x2b0>
 80049e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049e8:	d008      	beq.n	80049fc <UART_SetConfig+0x2c0>
 80049ea:	e00f      	b.n	8004a0c <UART_SetConfig+0x2d0>
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f2:	e022      	b.n	8004a3a <UART_SetConfig+0x2fe>
 80049f4:	2302      	movs	r3, #2
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049fa:	e01e      	b.n	8004a3a <UART_SetConfig+0x2fe>
 80049fc:	2304      	movs	r3, #4
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a02:	e01a      	b.n	8004a3a <UART_SetConfig+0x2fe>
 8004a04:	2308      	movs	r3, #8
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a0a:	e016      	b.n	8004a3a <UART_SetConfig+0x2fe>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a12:	e012      	b.n	8004a3a <UART_SetConfig+0x2fe>
 8004a14:	cfff69f3 	.word	0xcfff69f3
 8004a18:	40008000 	.word	0x40008000
 8004a1c:	40013800 	.word	0x40013800
 8004a20:	40021000 	.word	0x40021000
 8004a24:	40004400 	.word	0x40004400
 8004a28:	40004800 	.word	0x40004800
 8004a2c:	40004c00 	.word	0x40004c00
 8004a30:	40005000 	.word	0x40005000
 8004a34:	2310      	movs	r3, #16
 8004a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4aae      	ldr	r2, [pc, #696]	@ (8004cf8 <UART_SetConfig+0x5bc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	f040 8097 	bne.w	8004b74 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d823      	bhi.n	8004a96 <UART_SetConfig+0x35a>
 8004a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a54 <UART_SetConfig+0x318>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a97 	.word	0x08004a97
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a97 	.word	0x08004a97
 8004a64:	08004a87 	.word	0x08004a87
 8004a68:	08004a97 	.word	0x08004a97
 8004a6c:	08004a97 	.word	0x08004a97
 8004a70:	08004a97 	.word	0x08004a97
 8004a74:	08004a8f 	.word	0x08004a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7fe f8d0 	bl	8002c1c <HAL_RCC_GetPCLK1Freq>
 8004a7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a7e:	e010      	b.n	8004aa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a80:	4b9e      	ldr	r3, [pc, #632]	@ (8004cfc <UART_SetConfig+0x5c0>)
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a84:	e00d      	b.n	8004aa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a86:	f7fe f85b 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8004a8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a8c:	e009      	b.n	8004aa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a94:	e005      	b.n	8004aa2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004aa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8130 	beq.w	8004d0a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	4a94      	ldr	r2, [pc, #592]	@ (8004d00 <UART_SetConfig+0x5c4>)
 8004ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	4413      	add	r3, r2
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d305      	bcc.n	8004ada <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d903      	bls.n	8004ae2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ae0:	e113      	b.n	8004d0a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	60bb      	str	r3, [r7, #8]
 8004ae8:	60fa      	str	r2, [r7, #12]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aee:	4a84      	ldr	r2, [pc, #528]	@ (8004d00 <UART_SetConfig+0x5c4>)
 8004af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2200      	movs	r2, #0
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b04:	f7fb fbe4 	bl	80002d0 <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4619      	mov	r1, r3
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	020b      	lsls	r3, r1, #8
 8004b1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b1e:	0202      	lsls	r2, r0, #8
 8004b20:	6979      	ldr	r1, [r7, #20]
 8004b22:	6849      	ldr	r1, [r1, #4]
 8004b24:	0849      	lsrs	r1, r1, #1
 8004b26:	2000      	movs	r0, #0
 8004b28:	460c      	mov	r4, r1
 8004b2a:	4605      	mov	r5, r0
 8004b2c:	eb12 0804 	adds.w	r8, r2, r4
 8004b30:	eb43 0905 	adc.w	r9, r3, r5
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	469a      	mov	sl, r3
 8004b3c:	4693      	mov	fp, r2
 8004b3e:	4652      	mov	r2, sl
 8004b40:	465b      	mov	r3, fp
 8004b42:	4640      	mov	r0, r8
 8004b44:	4649      	mov	r1, r9
 8004b46:	f7fb fbc3 	bl	80002d0 <__aeabi_uldivmod>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4613      	mov	r3, r2
 8004b50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b58:	d308      	bcc.n	8004b6c <UART_SetConfig+0x430>
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b60:	d204      	bcs.n	8004b6c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6a3a      	ldr	r2, [r7, #32]
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	e0ce      	b.n	8004d0a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b72:	e0ca      	b.n	8004d0a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b7c:	d166      	bne.n	8004c4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d827      	bhi.n	8004bd6 <UART_SetConfig+0x49a>
 8004b86:	a201      	add	r2, pc, #4	@ (adr r2, 8004b8c <UART_SetConfig+0x450>)
 8004b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8c:	08004bb1 	.word	0x08004bb1
 8004b90:	08004bb9 	.word	0x08004bb9
 8004b94:	08004bc1 	.word	0x08004bc1
 8004b98:	08004bd7 	.word	0x08004bd7
 8004b9c:	08004bc7 	.word	0x08004bc7
 8004ba0:	08004bd7 	.word	0x08004bd7
 8004ba4:	08004bd7 	.word	0x08004bd7
 8004ba8:	08004bd7 	.word	0x08004bd7
 8004bac:	08004bcf 	.word	0x08004bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb0:	f7fe f834 	bl	8002c1c <HAL_RCC_GetPCLK1Freq>
 8004bb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bb6:	e014      	b.n	8004be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb8:	f7fe f846 	bl	8002c48 <HAL_RCC_GetPCLK2Freq>
 8004bbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bbe:	e010      	b.n	8004be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc0:	4b4e      	ldr	r3, [pc, #312]	@ (8004cfc <UART_SetConfig+0x5c0>)
 8004bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bc4:	e00d      	b.n	8004be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bc6:	f7fd ffbb 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8004bca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bcc:	e009      	b.n	8004be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bd4:	e005      	b.n	8004be2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004be0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8090 	beq.w	8004d0a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bee:	4a44      	ldr	r2, [pc, #272]	@ (8004d00 <UART_SetConfig+0x5c4>)
 8004bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bfc:	005a      	lsls	r2, r3, #1
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	441a      	add	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	2b0f      	cmp	r3, #15
 8004c14:	d916      	bls.n	8004c44 <UART_SetConfig+0x508>
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c1c:	d212      	bcs.n	8004c44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	f023 030f 	bic.w	r3, r3, #15
 8004c26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	8bfb      	ldrh	r3, [r7, #30]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	8bfa      	ldrh	r2, [r7, #30]
 8004c40:	60da      	str	r2, [r3, #12]
 8004c42:	e062      	b.n	8004d0a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c4a:	e05e      	b.n	8004d0a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d828      	bhi.n	8004ca6 <UART_SetConfig+0x56a>
 8004c54:	a201      	add	r2, pc, #4	@ (adr r2, 8004c5c <UART_SetConfig+0x520>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c89 	.word	0x08004c89
 8004c64:	08004c91 	.word	0x08004c91
 8004c68:	08004ca7 	.word	0x08004ca7
 8004c6c:	08004c97 	.word	0x08004c97
 8004c70:	08004ca7 	.word	0x08004ca7
 8004c74:	08004ca7 	.word	0x08004ca7
 8004c78:	08004ca7 	.word	0x08004ca7
 8004c7c:	08004c9f 	.word	0x08004c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c80:	f7fd ffcc 	bl	8002c1c <HAL_RCC_GetPCLK1Freq>
 8004c84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c86:	e014      	b.n	8004cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c88:	f7fd ffde 	bl	8002c48 <HAL_RCC_GetPCLK2Freq>
 8004c8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c8e:	e010      	b.n	8004cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c90:	4b1a      	ldr	r3, [pc, #104]	@ (8004cfc <UART_SetConfig+0x5c0>)
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c94:	e00d      	b.n	8004cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c96:	f7fd ff53 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8004c9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c9c:	e009      	b.n	8004cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ca2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ca4:	e005      	b.n	8004cb2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004cb0:	bf00      	nop
    }

    if (pclk != 0U)
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d028      	beq.n	8004d0a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	4a10      	ldr	r2, [pc, #64]	@ (8004d00 <UART_SetConfig+0x5c4>)
 8004cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	441a      	add	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	2b0f      	cmp	r3, #15
 8004ce0:	d910      	bls.n	8004d04 <UART_SetConfig+0x5c8>
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce8:	d20c      	bcs.n	8004d04 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60da      	str	r2, [r3, #12]
 8004cf4:	e009      	b.n	8004d0a <UART_SetConfig+0x5ce>
 8004cf6:	bf00      	nop
 8004cf8:	40008000 	.word	0x40008000
 8004cfc:	00f42400 	.word	0x00f42400
 8004d00:	08006c90 	.word	0x08006c90
      }
      else
      {
        ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2200      	movs	r2, #0
 8004d24:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004d26:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3730      	adds	r7, #48	@ 0x30
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01a      	beq.n	8004e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e32:	d10a      	bne.n	8004e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	605a      	str	r2, [r3, #4]
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b098      	sub	sp, #96	@ 0x60
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e88:	f7fc fe06 	bl	8001a98 <HAL_GetTick>
 8004e8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d12f      	bne.n	8004efc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f88e 	bl	8004fcc <UART_WaitOnFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d022      	beq.n	8004efc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ed6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004eda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e6      	bne.n	8004eb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e063      	b.n	8004fc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d149      	bne.n	8004f9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f12:	2200      	movs	r2, #0
 8004f14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f857 	bl	8004fcc <UART_WaitOnFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d03c      	beq.n	8004f9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	623b      	str	r3, [r7, #32]
   return(result);
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f42:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e6      	bne.n	8004f24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3308      	adds	r3, #8
 8004f74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f76:	61fa      	str	r2, [r7, #28]
 8004f78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	69b9      	ldr	r1, [r7, #24]
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	617b      	str	r3, [r7, #20]
   return(result);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e5      	bne.n	8004f56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e012      	b.n	8004fc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3758      	adds	r7, #88	@ 0x58
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fdc:	e04f      	b.n	800507e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fe4:	d04b      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe6:	f7fc fd57 	bl	8001a98 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d302      	bcc.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e04e      	b.n	800509e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b00      	cmp	r3, #0
 800500c:	d037      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0xb2>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b80      	cmp	r3, #128	@ 0x80
 8005012:	d034      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b40      	cmp	r3, #64	@ 0x40
 8005018:	d031      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b08      	cmp	r3, #8
 8005026:	d110      	bne.n	800504a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2208      	movs	r2, #8
 800502e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f838 	bl	80050a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2208      	movs	r2, #8
 800503a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e029      	b.n	800509e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005058:	d111      	bne.n	800507e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f81e 	bl	80050a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e00f      	b.n	800509e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4013      	ands	r3, r2
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	429a      	cmp	r2, r3
 800508c:	bf0c      	ite	eq
 800508e:	2301      	moveq	r3, #1
 8005090:	2300      	movne	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	429a      	cmp	r2, r3
 800509a:	d0a0      	beq.n	8004fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b095      	sub	sp, #84	@ 0x54
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80050ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e6      	bne.n	80050ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3308      	adds	r3, #8
 80050e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3308      	adds	r3, #8
 8005102:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005104:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005106:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800510a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e3      	bne.n	80050e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d118      	bne.n	8005152 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	60bb      	str	r3, [r7, #8]
   return(result);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f023 0310 	bic.w	r3, r3, #16
 8005134:	647b      	str	r3, [r7, #68]	@ 0x44
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	6979      	ldr	r1, [r7, #20]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	613b      	str	r3, [r7, #16]
   return(result);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1e6      	bne.n	8005120 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2220      	movs	r2, #32
 8005156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005166:	bf00      	nop
 8005168:	3754      	adds	r7, #84	@ 0x54
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_UARTEx_DisableFifoMode+0x16>
 8005184:	2302      	movs	r3, #2
 8005186:	e027      	b.n	80051d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2224      	movs	r2, #36	@ 0x24
 8005194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0201 	bic.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80051b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e02d      	b.n	8005258 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2224      	movs	r2, #36	@ 0x24
 8005208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f84f 	bl	80052dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005274:	2302      	movs	r3, #2
 8005276:	e02d      	b.n	80052d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2224      	movs	r2, #36	@ 0x24
 8005284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0201 	bic.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f811 	bl	80052dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d108      	bne.n	80052fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052fc:	e031      	b.n	8005362 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052fe:	2308      	movs	r3, #8
 8005300:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005302:	2308      	movs	r3, #8
 8005304:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	0e5b      	lsrs	r3, r3, #25
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	0f5b      	lsrs	r3, r3, #29
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005326:	7bbb      	ldrb	r3, [r7, #14]
 8005328:	7b3a      	ldrb	r2, [r7, #12]
 800532a:	4911      	ldr	r1, [pc, #68]	@ (8005370 <UARTEx_SetNbDataToProcess+0x94>)
 800532c:	5c8a      	ldrb	r2, [r1, r2]
 800532e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005332:	7b3a      	ldrb	r2, [r7, #12]
 8005334:	490f      	ldr	r1, [pc, #60]	@ (8005374 <UARTEx_SetNbDataToProcess+0x98>)
 8005336:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005338:	fb93 f3f2 	sdiv	r3, r3, r2
 800533c:	b29a      	uxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	7b7a      	ldrb	r2, [r7, #13]
 8005348:	4909      	ldr	r1, [pc, #36]	@ (8005370 <UARTEx_SetNbDataToProcess+0x94>)
 800534a:	5c8a      	ldrb	r2, [r1, r2]
 800534c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005350:	7b7a      	ldrb	r2, [r7, #13]
 8005352:	4908      	ldr	r1, [pc, #32]	@ (8005374 <UARTEx_SetNbDataToProcess+0x98>)
 8005354:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005356:	fb93 f3f2 	sdiv	r3, r3, r2
 800535a:	b29a      	uxth	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	08006ca8 	.word	0x08006ca8
 8005374:	08006cb0 	.word	0x08006cb0

08005378 <siscanf>:
 8005378:	b40e      	push	{r1, r2, r3}
 800537a:	b530      	push	{r4, r5, lr}
 800537c:	b09c      	sub	sp, #112	@ 0x70
 800537e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005380:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005384:	f854 5b04 	ldr.w	r5, [r4], #4
 8005388:	f8ad 2014 	strh.w	r2, [sp, #20]
 800538c:	9002      	str	r0, [sp, #8]
 800538e:	9006      	str	r0, [sp, #24]
 8005390:	f7fa ff46 	bl	8000220 <strlen>
 8005394:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <siscanf+0x4c>)
 8005396:	9003      	str	r0, [sp, #12]
 8005398:	9007      	str	r0, [sp, #28]
 800539a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800539c:	480a      	ldr	r0, [pc, #40]	@ (80053c8 <siscanf+0x50>)
 800539e:	9401      	str	r4, [sp, #4]
 80053a0:	2300      	movs	r3, #0
 80053a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80053a4:	9314      	str	r3, [sp, #80]	@ 0x50
 80053a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80053aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80053ae:	462a      	mov	r2, r5
 80053b0:	4623      	mov	r3, r4
 80053b2:	a902      	add	r1, sp, #8
 80053b4:	6800      	ldr	r0, [r0, #0]
 80053b6:	f000 fa41 	bl	800583c <__ssvfiscanf_r>
 80053ba:	b01c      	add	sp, #112	@ 0x70
 80053bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053c0:	b003      	add	sp, #12
 80053c2:	4770      	bx	lr
 80053c4:	080053ef 	.word	0x080053ef
 80053c8:	20000030 	.word	0x20000030

080053cc <__sread>:
 80053cc:	b510      	push	{r4, lr}
 80053ce:	460c      	mov	r4, r1
 80053d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d4:	f000 f93e 	bl	8005654 <_read_r>
 80053d8:	2800      	cmp	r0, #0
 80053da:	bfab      	itete	ge
 80053dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053de:	89a3      	ldrhlt	r3, [r4, #12]
 80053e0:	181b      	addge	r3, r3, r0
 80053e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053e6:	bfac      	ite	ge
 80053e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053ea:	81a3      	strhlt	r3, [r4, #12]
 80053ec:	bd10      	pop	{r4, pc}

080053ee <__seofread>:
 80053ee:	2000      	movs	r0, #0
 80053f0:	4770      	bx	lr

080053f2 <__swrite>:
 80053f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f6:	461f      	mov	r7, r3
 80053f8:	898b      	ldrh	r3, [r1, #12]
 80053fa:	05db      	lsls	r3, r3, #23
 80053fc:	4605      	mov	r5, r0
 80053fe:	460c      	mov	r4, r1
 8005400:	4616      	mov	r6, r2
 8005402:	d505      	bpl.n	8005410 <__swrite+0x1e>
 8005404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005408:	2302      	movs	r3, #2
 800540a:	2200      	movs	r2, #0
 800540c:	f000 f910 	bl	8005630 <_lseek_r>
 8005410:	89a3      	ldrh	r3, [r4, #12]
 8005412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005416:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800541a:	81a3      	strh	r3, [r4, #12]
 800541c:	4632      	mov	r2, r6
 800541e:	463b      	mov	r3, r7
 8005420:	4628      	mov	r0, r5
 8005422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005426:	f000 b927 	b.w	8005678 <_write_r>

0800542a <__sseek>:
 800542a:	b510      	push	{r4, lr}
 800542c:	460c      	mov	r4, r1
 800542e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005432:	f000 f8fd 	bl	8005630 <_lseek_r>
 8005436:	1c43      	adds	r3, r0, #1
 8005438:	89a3      	ldrh	r3, [r4, #12]
 800543a:	bf15      	itete	ne
 800543c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800543e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005442:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005446:	81a3      	strheq	r3, [r4, #12]
 8005448:	bf18      	it	ne
 800544a:	81a3      	strhne	r3, [r4, #12]
 800544c:	bd10      	pop	{r4, pc}

0800544e <__sclose>:
 800544e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005452:	f000 b8dd 	b.w	8005610 <_close_r>
	...

08005458 <std>:
 8005458:	2300      	movs	r3, #0
 800545a:	b510      	push	{r4, lr}
 800545c:	4604      	mov	r4, r0
 800545e:	e9c0 3300 	strd	r3, r3, [r0]
 8005462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005466:	6083      	str	r3, [r0, #8]
 8005468:	8181      	strh	r1, [r0, #12]
 800546a:	6643      	str	r3, [r0, #100]	@ 0x64
 800546c:	81c2      	strh	r2, [r0, #14]
 800546e:	6183      	str	r3, [r0, #24]
 8005470:	4619      	mov	r1, r3
 8005472:	2208      	movs	r2, #8
 8005474:	305c      	adds	r0, #92	@ 0x5c
 8005476:	f000 f8c3 	bl	8005600 <memset>
 800547a:	4b0d      	ldr	r3, [pc, #52]	@ (80054b0 <std+0x58>)
 800547c:	6263      	str	r3, [r4, #36]	@ 0x24
 800547e:	4b0d      	ldr	r3, [pc, #52]	@ (80054b4 <std+0x5c>)
 8005480:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005482:	4b0d      	ldr	r3, [pc, #52]	@ (80054b8 <std+0x60>)
 8005484:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005486:	4b0d      	ldr	r3, [pc, #52]	@ (80054bc <std+0x64>)
 8005488:	6323      	str	r3, [r4, #48]	@ 0x30
 800548a:	4b0d      	ldr	r3, [pc, #52]	@ (80054c0 <std+0x68>)
 800548c:	6224      	str	r4, [r4, #32]
 800548e:	429c      	cmp	r4, r3
 8005490:	d006      	beq.n	80054a0 <std+0x48>
 8005492:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005496:	4294      	cmp	r4, r2
 8005498:	d002      	beq.n	80054a0 <std+0x48>
 800549a:	33d0      	adds	r3, #208	@ 0xd0
 800549c:	429c      	cmp	r4, r3
 800549e:	d105      	bne.n	80054ac <std+0x54>
 80054a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054a8:	f000 b922 	b.w	80056f0 <__retarget_lock_init_recursive>
 80054ac:	bd10      	pop	{r4, pc}
 80054ae:	bf00      	nop
 80054b0:	080053cd 	.word	0x080053cd
 80054b4:	080053f3 	.word	0x080053f3
 80054b8:	0800542b 	.word	0x0800542b
 80054bc:	0800544f 	.word	0x0800544f
 80054c0:	20000418 	.word	0x20000418

080054c4 <stdio_exit_handler>:
 80054c4:	4a02      	ldr	r2, [pc, #8]	@ (80054d0 <stdio_exit_handler+0xc>)
 80054c6:	4903      	ldr	r1, [pc, #12]	@ (80054d4 <stdio_exit_handler+0x10>)
 80054c8:	4803      	ldr	r0, [pc, #12]	@ (80054d8 <stdio_exit_handler+0x14>)
 80054ca:	f000 b869 	b.w	80055a0 <_fwalk_sglue>
 80054ce:	bf00      	nop
 80054d0:	20000024 	.word	0x20000024
 80054d4:	08006621 	.word	0x08006621
 80054d8:	20000034 	.word	0x20000034

080054dc <cleanup_stdio>:
 80054dc:	6841      	ldr	r1, [r0, #4]
 80054de:	4b0c      	ldr	r3, [pc, #48]	@ (8005510 <cleanup_stdio+0x34>)
 80054e0:	4299      	cmp	r1, r3
 80054e2:	b510      	push	{r4, lr}
 80054e4:	4604      	mov	r4, r0
 80054e6:	d001      	beq.n	80054ec <cleanup_stdio+0x10>
 80054e8:	f001 f89a 	bl	8006620 <_fflush_r>
 80054ec:	68a1      	ldr	r1, [r4, #8]
 80054ee:	4b09      	ldr	r3, [pc, #36]	@ (8005514 <cleanup_stdio+0x38>)
 80054f0:	4299      	cmp	r1, r3
 80054f2:	d002      	beq.n	80054fa <cleanup_stdio+0x1e>
 80054f4:	4620      	mov	r0, r4
 80054f6:	f001 f893 	bl	8006620 <_fflush_r>
 80054fa:	68e1      	ldr	r1, [r4, #12]
 80054fc:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <cleanup_stdio+0x3c>)
 80054fe:	4299      	cmp	r1, r3
 8005500:	d004      	beq.n	800550c <cleanup_stdio+0x30>
 8005502:	4620      	mov	r0, r4
 8005504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005508:	f001 b88a 	b.w	8006620 <_fflush_r>
 800550c:	bd10      	pop	{r4, pc}
 800550e:	bf00      	nop
 8005510:	20000418 	.word	0x20000418
 8005514:	20000480 	.word	0x20000480
 8005518:	200004e8 	.word	0x200004e8

0800551c <global_stdio_init.part.0>:
 800551c:	b510      	push	{r4, lr}
 800551e:	4b0b      	ldr	r3, [pc, #44]	@ (800554c <global_stdio_init.part.0+0x30>)
 8005520:	4c0b      	ldr	r4, [pc, #44]	@ (8005550 <global_stdio_init.part.0+0x34>)
 8005522:	4a0c      	ldr	r2, [pc, #48]	@ (8005554 <global_stdio_init.part.0+0x38>)
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	4620      	mov	r0, r4
 8005528:	2200      	movs	r2, #0
 800552a:	2104      	movs	r1, #4
 800552c:	f7ff ff94 	bl	8005458 <std>
 8005530:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005534:	2201      	movs	r2, #1
 8005536:	2109      	movs	r1, #9
 8005538:	f7ff ff8e 	bl	8005458 <std>
 800553c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005540:	2202      	movs	r2, #2
 8005542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005546:	2112      	movs	r1, #18
 8005548:	f7ff bf86 	b.w	8005458 <std>
 800554c:	20000550 	.word	0x20000550
 8005550:	20000418 	.word	0x20000418
 8005554:	080054c5 	.word	0x080054c5

08005558 <__sfp_lock_acquire>:
 8005558:	4801      	ldr	r0, [pc, #4]	@ (8005560 <__sfp_lock_acquire+0x8>)
 800555a:	f000 b8ca 	b.w	80056f2 <__retarget_lock_acquire_recursive>
 800555e:	bf00      	nop
 8005560:	20000559 	.word	0x20000559

08005564 <__sfp_lock_release>:
 8005564:	4801      	ldr	r0, [pc, #4]	@ (800556c <__sfp_lock_release+0x8>)
 8005566:	f000 b8c5 	b.w	80056f4 <__retarget_lock_release_recursive>
 800556a:	bf00      	nop
 800556c:	20000559 	.word	0x20000559

08005570 <__sinit>:
 8005570:	b510      	push	{r4, lr}
 8005572:	4604      	mov	r4, r0
 8005574:	f7ff fff0 	bl	8005558 <__sfp_lock_acquire>
 8005578:	6a23      	ldr	r3, [r4, #32]
 800557a:	b11b      	cbz	r3, 8005584 <__sinit+0x14>
 800557c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005580:	f7ff bff0 	b.w	8005564 <__sfp_lock_release>
 8005584:	4b04      	ldr	r3, [pc, #16]	@ (8005598 <__sinit+0x28>)
 8005586:	6223      	str	r3, [r4, #32]
 8005588:	4b04      	ldr	r3, [pc, #16]	@ (800559c <__sinit+0x2c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f5      	bne.n	800557c <__sinit+0xc>
 8005590:	f7ff ffc4 	bl	800551c <global_stdio_init.part.0>
 8005594:	e7f2      	b.n	800557c <__sinit+0xc>
 8005596:	bf00      	nop
 8005598:	080054dd 	.word	0x080054dd
 800559c:	20000550 	.word	0x20000550

080055a0 <_fwalk_sglue>:
 80055a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055a4:	4607      	mov	r7, r0
 80055a6:	4688      	mov	r8, r1
 80055a8:	4614      	mov	r4, r2
 80055aa:	2600      	movs	r6, #0
 80055ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055b0:	f1b9 0901 	subs.w	r9, r9, #1
 80055b4:	d505      	bpl.n	80055c2 <_fwalk_sglue+0x22>
 80055b6:	6824      	ldr	r4, [r4, #0]
 80055b8:	2c00      	cmp	r4, #0
 80055ba:	d1f7      	bne.n	80055ac <_fwalk_sglue+0xc>
 80055bc:	4630      	mov	r0, r6
 80055be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055c2:	89ab      	ldrh	r3, [r5, #12]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d907      	bls.n	80055d8 <_fwalk_sglue+0x38>
 80055c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055cc:	3301      	adds	r3, #1
 80055ce:	d003      	beq.n	80055d8 <_fwalk_sglue+0x38>
 80055d0:	4629      	mov	r1, r5
 80055d2:	4638      	mov	r0, r7
 80055d4:	47c0      	blx	r8
 80055d6:	4306      	orrs	r6, r0
 80055d8:	3568      	adds	r5, #104	@ 0x68
 80055da:	e7e9      	b.n	80055b0 <_fwalk_sglue+0x10>

080055dc <iprintf>:
 80055dc:	b40f      	push	{r0, r1, r2, r3}
 80055de:	b507      	push	{r0, r1, r2, lr}
 80055e0:	4906      	ldr	r1, [pc, #24]	@ (80055fc <iprintf+0x20>)
 80055e2:	ab04      	add	r3, sp, #16
 80055e4:	6808      	ldr	r0, [r1, #0]
 80055e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ea:	6881      	ldr	r1, [r0, #8]
 80055ec:	9301      	str	r3, [sp, #4]
 80055ee:	f000 fac3 	bl	8005b78 <_vfiprintf_r>
 80055f2:	b003      	add	sp, #12
 80055f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055f8:	b004      	add	sp, #16
 80055fa:	4770      	bx	lr
 80055fc:	20000030 	.word	0x20000030

08005600 <memset>:
 8005600:	4402      	add	r2, r0
 8005602:	4603      	mov	r3, r0
 8005604:	4293      	cmp	r3, r2
 8005606:	d100      	bne.n	800560a <memset+0xa>
 8005608:	4770      	bx	lr
 800560a:	f803 1b01 	strb.w	r1, [r3], #1
 800560e:	e7f9      	b.n	8005604 <memset+0x4>

08005610 <_close_r>:
 8005610:	b538      	push	{r3, r4, r5, lr}
 8005612:	4d06      	ldr	r5, [pc, #24]	@ (800562c <_close_r+0x1c>)
 8005614:	2300      	movs	r3, #0
 8005616:	4604      	mov	r4, r0
 8005618:	4608      	mov	r0, r1
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	f7fb ff7d 	bl	800151a <_close>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d102      	bne.n	800562a <_close_r+0x1a>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	b103      	cbz	r3, 800562a <_close_r+0x1a>
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	bd38      	pop	{r3, r4, r5, pc}
 800562c:	20000554 	.word	0x20000554

08005630 <_lseek_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	4d07      	ldr	r5, [pc, #28]	@ (8005650 <_lseek_r+0x20>)
 8005634:	4604      	mov	r4, r0
 8005636:	4608      	mov	r0, r1
 8005638:	4611      	mov	r1, r2
 800563a:	2200      	movs	r2, #0
 800563c:	602a      	str	r2, [r5, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	f7fb ff92 	bl	8001568 <_lseek>
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	d102      	bne.n	800564e <_lseek_r+0x1e>
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	b103      	cbz	r3, 800564e <_lseek_r+0x1e>
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	bd38      	pop	{r3, r4, r5, pc}
 8005650:	20000554 	.word	0x20000554

08005654 <_read_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4d07      	ldr	r5, [pc, #28]	@ (8005674 <_read_r+0x20>)
 8005658:	4604      	mov	r4, r0
 800565a:	4608      	mov	r0, r1
 800565c:	4611      	mov	r1, r2
 800565e:	2200      	movs	r2, #0
 8005660:	602a      	str	r2, [r5, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	f7fb ff20 	bl	80014a8 <_read>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_read_r+0x1e>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	b103      	cbz	r3, 8005672 <_read_r+0x1e>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	20000554 	.word	0x20000554

08005678 <_write_r>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4d07      	ldr	r5, [pc, #28]	@ (8005698 <_write_r+0x20>)
 800567c:	4604      	mov	r4, r0
 800567e:	4608      	mov	r0, r1
 8005680:	4611      	mov	r1, r2
 8005682:	2200      	movs	r2, #0
 8005684:	602a      	str	r2, [r5, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	f7fb ff2b 	bl	80014e2 <_write>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_write_r+0x1e>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_write_r+0x1e>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	20000554 	.word	0x20000554

0800569c <__errno>:
 800569c:	4b01      	ldr	r3, [pc, #4]	@ (80056a4 <__errno+0x8>)
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000030 	.word	0x20000030

080056a8 <__libc_init_array>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	4d0d      	ldr	r5, [pc, #52]	@ (80056e0 <__libc_init_array+0x38>)
 80056ac:	4c0d      	ldr	r4, [pc, #52]	@ (80056e4 <__libc_init_array+0x3c>)
 80056ae:	1b64      	subs	r4, r4, r5
 80056b0:	10a4      	asrs	r4, r4, #2
 80056b2:	2600      	movs	r6, #0
 80056b4:	42a6      	cmp	r6, r4
 80056b6:	d109      	bne.n	80056cc <__libc_init_array+0x24>
 80056b8:	4d0b      	ldr	r5, [pc, #44]	@ (80056e8 <__libc_init_array+0x40>)
 80056ba:	4c0c      	ldr	r4, [pc, #48]	@ (80056ec <__libc_init_array+0x44>)
 80056bc:	f001 fa76 	bl	8006bac <_init>
 80056c0:	1b64      	subs	r4, r4, r5
 80056c2:	10a4      	asrs	r4, r4, #2
 80056c4:	2600      	movs	r6, #0
 80056c6:	42a6      	cmp	r6, r4
 80056c8:	d105      	bne.n	80056d6 <__libc_init_array+0x2e>
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
 80056cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d0:	4798      	blx	r3
 80056d2:	3601      	adds	r6, #1
 80056d4:	e7ee      	b.n	80056b4 <__libc_init_array+0xc>
 80056d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056da:	4798      	blx	r3
 80056dc:	3601      	adds	r6, #1
 80056de:	e7f2      	b.n	80056c6 <__libc_init_array+0x1e>
 80056e0:	08006e10 	.word	0x08006e10
 80056e4:	08006e10 	.word	0x08006e10
 80056e8:	08006e10 	.word	0x08006e10
 80056ec:	08006e14 	.word	0x08006e14

080056f0 <__retarget_lock_init_recursive>:
 80056f0:	4770      	bx	lr

080056f2 <__retarget_lock_acquire_recursive>:
 80056f2:	4770      	bx	lr

080056f4 <__retarget_lock_release_recursive>:
 80056f4:	4770      	bx	lr
	...

080056f8 <_free_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4605      	mov	r5, r0
 80056fc:	2900      	cmp	r1, #0
 80056fe:	d041      	beq.n	8005784 <_free_r+0x8c>
 8005700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005704:	1f0c      	subs	r4, r1, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	bfb8      	it	lt
 800570a:	18e4      	addlt	r4, r4, r3
 800570c:	f000 ffb0 	bl	8006670 <__malloc_lock>
 8005710:	4a1d      	ldr	r2, [pc, #116]	@ (8005788 <_free_r+0x90>)
 8005712:	6813      	ldr	r3, [r2, #0]
 8005714:	b933      	cbnz	r3, 8005724 <_free_r+0x2c>
 8005716:	6063      	str	r3, [r4, #4]
 8005718:	6014      	str	r4, [r2, #0]
 800571a:	4628      	mov	r0, r5
 800571c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005720:	f000 bfac 	b.w	800667c <__malloc_unlock>
 8005724:	42a3      	cmp	r3, r4
 8005726:	d908      	bls.n	800573a <_free_r+0x42>
 8005728:	6820      	ldr	r0, [r4, #0]
 800572a:	1821      	adds	r1, r4, r0
 800572c:	428b      	cmp	r3, r1
 800572e:	bf01      	itttt	eq
 8005730:	6819      	ldreq	r1, [r3, #0]
 8005732:	685b      	ldreq	r3, [r3, #4]
 8005734:	1809      	addeq	r1, r1, r0
 8005736:	6021      	streq	r1, [r4, #0]
 8005738:	e7ed      	b.n	8005716 <_free_r+0x1e>
 800573a:	461a      	mov	r2, r3
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	b10b      	cbz	r3, 8005744 <_free_r+0x4c>
 8005740:	42a3      	cmp	r3, r4
 8005742:	d9fa      	bls.n	800573a <_free_r+0x42>
 8005744:	6811      	ldr	r1, [r2, #0]
 8005746:	1850      	adds	r0, r2, r1
 8005748:	42a0      	cmp	r0, r4
 800574a:	d10b      	bne.n	8005764 <_free_r+0x6c>
 800574c:	6820      	ldr	r0, [r4, #0]
 800574e:	4401      	add	r1, r0
 8005750:	1850      	adds	r0, r2, r1
 8005752:	4283      	cmp	r3, r0
 8005754:	6011      	str	r1, [r2, #0]
 8005756:	d1e0      	bne.n	800571a <_free_r+0x22>
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	6053      	str	r3, [r2, #4]
 800575e:	4408      	add	r0, r1
 8005760:	6010      	str	r0, [r2, #0]
 8005762:	e7da      	b.n	800571a <_free_r+0x22>
 8005764:	d902      	bls.n	800576c <_free_r+0x74>
 8005766:	230c      	movs	r3, #12
 8005768:	602b      	str	r3, [r5, #0]
 800576a:	e7d6      	b.n	800571a <_free_r+0x22>
 800576c:	6820      	ldr	r0, [r4, #0]
 800576e:	1821      	adds	r1, r4, r0
 8005770:	428b      	cmp	r3, r1
 8005772:	bf04      	itt	eq
 8005774:	6819      	ldreq	r1, [r3, #0]
 8005776:	685b      	ldreq	r3, [r3, #4]
 8005778:	6063      	str	r3, [r4, #4]
 800577a:	bf04      	itt	eq
 800577c:	1809      	addeq	r1, r1, r0
 800577e:	6021      	streq	r1, [r4, #0]
 8005780:	6054      	str	r4, [r2, #4]
 8005782:	e7ca      	b.n	800571a <_free_r+0x22>
 8005784:	bd38      	pop	{r3, r4, r5, pc}
 8005786:	bf00      	nop
 8005788:	20000560 	.word	0x20000560

0800578c <_sungetc_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	1c4b      	adds	r3, r1, #1
 8005790:	4614      	mov	r4, r2
 8005792:	d103      	bne.n	800579c <_sungetc_r+0x10>
 8005794:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005798:	4628      	mov	r0, r5
 800579a:	bd38      	pop	{r3, r4, r5, pc}
 800579c:	8993      	ldrh	r3, [r2, #12]
 800579e:	f023 0320 	bic.w	r3, r3, #32
 80057a2:	8193      	strh	r3, [r2, #12]
 80057a4:	6853      	ldr	r3, [r2, #4]
 80057a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057a8:	b2cd      	uxtb	r5, r1
 80057aa:	b18a      	cbz	r2, 80057d0 <_sungetc_r+0x44>
 80057ac:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80057ae:	429a      	cmp	r2, r3
 80057b0:	dd08      	ble.n	80057c4 <_sungetc_r+0x38>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	1e5a      	subs	r2, r3, #1
 80057b6:	6022      	str	r2, [r4, #0]
 80057b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80057bc:	6863      	ldr	r3, [r4, #4]
 80057be:	3301      	adds	r3, #1
 80057c0:	6063      	str	r3, [r4, #4]
 80057c2:	e7e9      	b.n	8005798 <_sungetc_r+0xc>
 80057c4:	4621      	mov	r1, r4
 80057c6:	f000 ff5f 	bl	8006688 <__submore>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	d0f1      	beq.n	80057b2 <_sungetc_r+0x26>
 80057ce:	e7e1      	b.n	8005794 <_sungetc_r+0x8>
 80057d0:	6921      	ldr	r1, [r4, #16]
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	b141      	cbz	r1, 80057e8 <_sungetc_r+0x5c>
 80057d6:	4291      	cmp	r1, r2
 80057d8:	d206      	bcs.n	80057e8 <_sungetc_r+0x5c>
 80057da:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80057de:	42a9      	cmp	r1, r5
 80057e0:	d102      	bne.n	80057e8 <_sungetc_r+0x5c>
 80057e2:	3a01      	subs	r2, #1
 80057e4:	6022      	str	r2, [r4, #0]
 80057e6:	e7ea      	b.n	80057be <_sungetc_r+0x32>
 80057e8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80057ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80057f2:	2303      	movs	r3, #3
 80057f4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80057f6:	4623      	mov	r3, r4
 80057f8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	2301      	movs	r3, #1
 8005800:	e7de      	b.n	80057c0 <_sungetc_r+0x34>

08005802 <__ssrefill_r>:
 8005802:	b510      	push	{r4, lr}
 8005804:	460c      	mov	r4, r1
 8005806:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005808:	b169      	cbz	r1, 8005826 <__ssrefill_r+0x24>
 800580a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800580e:	4299      	cmp	r1, r3
 8005810:	d001      	beq.n	8005816 <__ssrefill_r+0x14>
 8005812:	f7ff ff71 	bl	80056f8 <_free_r>
 8005816:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005818:	6063      	str	r3, [r4, #4]
 800581a:	2000      	movs	r0, #0
 800581c:	6360      	str	r0, [r4, #52]	@ 0x34
 800581e:	b113      	cbz	r3, 8005826 <__ssrefill_r+0x24>
 8005820:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005822:	6023      	str	r3, [r4, #0]
 8005824:	bd10      	pop	{r4, pc}
 8005826:	6923      	ldr	r3, [r4, #16]
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	2300      	movs	r3, #0
 800582c:	6063      	str	r3, [r4, #4]
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	f043 0320 	orr.w	r3, r3, #32
 8005834:	81a3      	strh	r3, [r4, #12]
 8005836:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800583a:	e7f3      	b.n	8005824 <__ssrefill_r+0x22>

0800583c <__ssvfiscanf_r>:
 800583c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005840:	460c      	mov	r4, r1
 8005842:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8005846:	2100      	movs	r1, #0
 8005848:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800584c:	49a5      	ldr	r1, [pc, #660]	@ (8005ae4 <__ssvfiscanf_r+0x2a8>)
 800584e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8005850:	f10d 0804 	add.w	r8, sp, #4
 8005854:	49a4      	ldr	r1, [pc, #656]	@ (8005ae8 <__ssvfiscanf_r+0x2ac>)
 8005856:	4fa5      	ldr	r7, [pc, #660]	@ (8005aec <__ssvfiscanf_r+0x2b0>)
 8005858:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800585c:	4606      	mov	r6, r0
 800585e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	7813      	ldrb	r3, [r2, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 8158 	beq.w	8005b1a <__ssvfiscanf_r+0x2de>
 800586a:	5cf9      	ldrb	r1, [r7, r3]
 800586c:	f011 0108 	ands.w	r1, r1, #8
 8005870:	f102 0501 	add.w	r5, r2, #1
 8005874:	d019      	beq.n	80058aa <__ssvfiscanf_r+0x6e>
 8005876:	6863      	ldr	r3, [r4, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	dd0f      	ble.n	800589c <__ssvfiscanf_r+0x60>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	781a      	ldrb	r2, [r3, #0]
 8005880:	5cba      	ldrb	r2, [r7, r2]
 8005882:	0712      	lsls	r2, r2, #28
 8005884:	d401      	bmi.n	800588a <__ssvfiscanf_r+0x4e>
 8005886:	462a      	mov	r2, r5
 8005888:	e7eb      	b.n	8005862 <__ssvfiscanf_r+0x26>
 800588a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800588c:	3201      	adds	r2, #1
 800588e:	9245      	str	r2, [sp, #276]	@ 0x114
 8005890:	6862      	ldr	r2, [r4, #4]
 8005892:	3301      	adds	r3, #1
 8005894:	3a01      	subs	r2, #1
 8005896:	6062      	str	r2, [r4, #4]
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	e7ec      	b.n	8005876 <__ssvfiscanf_r+0x3a>
 800589c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800589e:	4621      	mov	r1, r4
 80058a0:	4630      	mov	r0, r6
 80058a2:	4798      	blx	r3
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d0e9      	beq.n	800587c <__ssvfiscanf_r+0x40>
 80058a8:	e7ed      	b.n	8005886 <__ssvfiscanf_r+0x4a>
 80058aa:	2b25      	cmp	r3, #37	@ 0x25
 80058ac:	d012      	beq.n	80058d4 <__ssvfiscanf_r+0x98>
 80058ae:	4699      	mov	r9, r3
 80058b0:	6863      	ldr	r3, [r4, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f340 8093 	ble.w	80059de <__ssvfiscanf_r+0x1a2>
 80058b8:	6822      	ldr	r2, [r4, #0]
 80058ba:	7813      	ldrb	r3, [r2, #0]
 80058bc:	454b      	cmp	r3, r9
 80058be:	f040 812c 	bne.w	8005b1a <__ssvfiscanf_r+0x2de>
 80058c2:	6863      	ldr	r3, [r4, #4]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	6063      	str	r3, [r4, #4]
 80058c8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80058ca:	3201      	adds	r2, #1
 80058cc:	3301      	adds	r3, #1
 80058ce:	6022      	str	r2, [r4, #0]
 80058d0:	9345      	str	r3, [sp, #276]	@ 0x114
 80058d2:	e7d8      	b.n	8005886 <__ssvfiscanf_r+0x4a>
 80058d4:	9141      	str	r1, [sp, #260]	@ 0x104
 80058d6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80058d8:	7853      	ldrb	r3, [r2, #1]
 80058da:	2b2a      	cmp	r3, #42	@ 0x2a
 80058dc:	bf02      	ittt	eq
 80058de:	2310      	moveq	r3, #16
 80058e0:	1c95      	addeq	r5, r2, #2
 80058e2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80058e4:	220a      	movs	r2, #10
 80058e6:	46a9      	mov	r9, r5
 80058e8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80058ec:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80058f0:	2b09      	cmp	r3, #9
 80058f2:	d91e      	bls.n	8005932 <__ssvfiscanf_r+0xf6>
 80058f4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8005af0 <__ssvfiscanf_r+0x2b4>
 80058f8:	2203      	movs	r2, #3
 80058fa:	4650      	mov	r0, sl
 80058fc:	f7fa fc98 	bl	8000230 <memchr>
 8005900:	b138      	cbz	r0, 8005912 <__ssvfiscanf_r+0xd6>
 8005902:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005904:	eba0 000a 	sub.w	r0, r0, sl
 8005908:	2301      	movs	r3, #1
 800590a:	4083      	lsls	r3, r0
 800590c:	4313      	orrs	r3, r2
 800590e:	9341      	str	r3, [sp, #260]	@ 0x104
 8005910:	464d      	mov	r5, r9
 8005912:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005916:	2b78      	cmp	r3, #120	@ 0x78
 8005918:	d806      	bhi.n	8005928 <__ssvfiscanf_r+0xec>
 800591a:	2b57      	cmp	r3, #87	@ 0x57
 800591c:	d810      	bhi.n	8005940 <__ssvfiscanf_r+0x104>
 800591e:	2b25      	cmp	r3, #37	@ 0x25
 8005920:	d0c5      	beq.n	80058ae <__ssvfiscanf_r+0x72>
 8005922:	d857      	bhi.n	80059d4 <__ssvfiscanf_r+0x198>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d065      	beq.n	80059f4 <__ssvfiscanf_r+0x1b8>
 8005928:	2303      	movs	r3, #3
 800592a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800592c:	230a      	movs	r3, #10
 800592e:	9342      	str	r3, [sp, #264]	@ 0x108
 8005930:	e078      	b.n	8005a24 <__ssvfiscanf_r+0x1e8>
 8005932:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005934:	fb02 1103 	mla	r1, r2, r3, r1
 8005938:	3930      	subs	r1, #48	@ 0x30
 800593a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800593c:	464d      	mov	r5, r9
 800593e:	e7d2      	b.n	80058e6 <__ssvfiscanf_r+0xaa>
 8005940:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005944:	2a20      	cmp	r2, #32
 8005946:	d8ef      	bhi.n	8005928 <__ssvfiscanf_r+0xec>
 8005948:	a101      	add	r1, pc, #4	@ (adr r1, 8005950 <__ssvfiscanf_r+0x114>)
 800594a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005a03 	.word	0x08005a03
 8005954:	08005929 	.word	0x08005929
 8005958:	08005929 	.word	0x08005929
 800595c:	08005a5d 	.word	0x08005a5d
 8005960:	08005929 	.word	0x08005929
 8005964:	08005929 	.word	0x08005929
 8005968:	08005929 	.word	0x08005929
 800596c:	08005929 	.word	0x08005929
 8005970:	08005929 	.word	0x08005929
 8005974:	08005929 	.word	0x08005929
 8005978:	08005929 	.word	0x08005929
 800597c:	08005a73 	.word	0x08005a73
 8005980:	08005a59 	.word	0x08005a59
 8005984:	080059db 	.word	0x080059db
 8005988:	080059db 	.word	0x080059db
 800598c:	080059db 	.word	0x080059db
 8005990:	08005929 	.word	0x08005929
 8005994:	08005a15 	.word	0x08005a15
 8005998:	08005929 	.word	0x08005929
 800599c:	08005929 	.word	0x08005929
 80059a0:	08005929 	.word	0x08005929
 80059a4:	08005929 	.word	0x08005929
 80059a8:	08005a83 	.word	0x08005a83
 80059ac:	08005a1d 	.word	0x08005a1d
 80059b0:	080059fb 	.word	0x080059fb
 80059b4:	08005929 	.word	0x08005929
 80059b8:	08005929 	.word	0x08005929
 80059bc:	08005a7f 	.word	0x08005a7f
 80059c0:	08005929 	.word	0x08005929
 80059c4:	08005a59 	.word	0x08005a59
 80059c8:	08005929 	.word	0x08005929
 80059cc:	08005929 	.word	0x08005929
 80059d0:	08005a03 	.word	0x08005a03
 80059d4:	3b45      	subs	r3, #69	@ 0x45
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d8a6      	bhi.n	8005928 <__ssvfiscanf_r+0xec>
 80059da:	2305      	movs	r3, #5
 80059dc:	e021      	b.n	8005a22 <__ssvfiscanf_r+0x1e6>
 80059de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80059e0:	4621      	mov	r1, r4
 80059e2:	4630      	mov	r0, r6
 80059e4:	4798      	blx	r3
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f43f af66 	beq.w	80058b8 <__ssvfiscanf_r+0x7c>
 80059ec:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80059ee:	2800      	cmp	r0, #0
 80059f0:	f040 808b 	bne.w	8005b0a <__ssvfiscanf_r+0x2ce>
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059f8:	e08b      	b.n	8005b12 <__ssvfiscanf_r+0x2d6>
 80059fa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80059fc:	f042 0220 	orr.w	r2, r2, #32
 8005a00:	9241      	str	r2, [sp, #260]	@ 0x104
 8005a02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a08:	9241      	str	r2, [sp, #260]	@ 0x104
 8005a0a:	2210      	movs	r2, #16
 8005a0c:	2b6e      	cmp	r3, #110	@ 0x6e
 8005a0e:	9242      	str	r2, [sp, #264]	@ 0x108
 8005a10:	d902      	bls.n	8005a18 <__ssvfiscanf_r+0x1dc>
 8005a12:	e005      	b.n	8005a20 <__ssvfiscanf_r+0x1e4>
 8005a14:	2300      	movs	r3, #0
 8005a16:	9342      	str	r3, [sp, #264]	@ 0x108
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e002      	b.n	8005a22 <__ssvfiscanf_r+0x1e6>
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	9342      	str	r3, [sp, #264]	@ 0x108
 8005a20:	2304      	movs	r3, #4
 8005a22:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005a24:	6863      	ldr	r3, [r4, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	dd39      	ble.n	8005a9e <__ssvfiscanf_r+0x262>
 8005a2a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005a2c:	0659      	lsls	r1, r3, #25
 8005a2e:	d404      	bmi.n	8005a3a <__ssvfiscanf_r+0x1fe>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	781a      	ldrb	r2, [r3, #0]
 8005a34:	5cba      	ldrb	r2, [r7, r2]
 8005a36:	0712      	lsls	r2, r2, #28
 8005a38:	d438      	bmi.n	8005aac <__ssvfiscanf_r+0x270>
 8005a3a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	dc47      	bgt.n	8005ad0 <__ssvfiscanf_r+0x294>
 8005a40:	466b      	mov	r3, sp
 8005a42:	4622      	mov	r2, r4
 8005a44:	a941      	add	r1, sp, #260	@ 0x104
 8005a46:	4630      	mov	r0, r6
 8005a48:	f000 fbde 	bl	8006208 <_scanf_chars>
 8005a4c:	2801      	cmp	r0, #1
 8005a4e:	d064      	beq.n	8005b1a <__ssvfiscanf_r+0x2de>
 8005a50:	2802      	cmp	r0, #2
 8005a52:	f47f af18 	bne.w	8005886 <__ssvfiscanf_r+0x4a>
 8005a56:	e7c9      	b.n	80059ec <__ssvfiscanf_r+0x1b0>
 8005a58:	220a      	movs	r2, #10
 8005a5a:	e7d7      	b.n	8005a0c <__ssvfiscanf_r+0x1d0>
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	4640      	mov	r0, r8
 8005a60:	f000 fd20 	bl	80064a4 <__sccl>
 8005a64:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a6a:	9341      	str	r3, [sp, #260]	@ 0x104
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e7d7      	b.n	8005a22 <__ssvfiscanf_r+0x1e6>
 8005a72:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a78:	9341      	str	r3, [sp, #260]	@ 0x104
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e7d1      	b.n	8005a22 <__ssvfiscanf_r+0x1e6>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e7cf      	b.n	8005a22 <__ssvfiscanf_r+0x1e6>
 8005a82:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005a84:	06c3      	lsls	r3, r0, #27
 8005a86:	f53f aefe 	bmi.w	8005886 <__ssvfiscanf_r+0x4a>
 8005a8a:	9b00      	ldr	r3, [sp, #0]
 8005a8c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005a8e:	1d19      	adds	r1, r3, #4
 8005a90:	9100      	str	r1, [sp, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	07c0      	lsls	r0, r0, #31
 8005a96:	bf4c      	ite	mi
 8005a98:	801a      	strhmi	r2, [r3, #0]
 8005a9a:	601a      	strpl	r2, [r3, #0]
 8005a9c:	e6f3      	b.n	8005886 <__ssvfiscanf_r+0x4a>
 8005a9e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	4798      	blx	r3
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d0bf      	beq.n	8005a2a <__ssvfiscanf_r+0x1ee>
 8005aaa:	e79f      	b.n	80059ec <__ssvfiscanf_r+0x1b0>
 8005aac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005aae:	3201      	adds	r2, #1
 8005ab0:	9245      	str	r2, [sp, #276]	@ 0x114
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	3a01      	subs	r2, #1
 8005ab6:	2a00      	cmp	r2, #0
 8005ab8:	6062      	str	r2, [r4, #4]
 8005aba:	dd02      	ble.n	8005ac2 <__ssvfiscanf_r+0x286>
 8005abc:	3301      	adds	r3, #1
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	e7b6      	b.n	8005a30 <__ssvfiscanf_r+0x1f4>
 8005ac2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	4798      	blx	r3
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d0b0      	beq.n	8005a30 <__ssvfiscanf_r+0x1f4>
 8005ace:	e78d      	b.n	80059ec <__ssvfiscanf_r+0x1b0>
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	dc0f      	bgt.n	8005af4 <__ssvfiscanf_r+0x2b8>
 8005ad4:	466b      	mov	r3, sp
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	a941      	add	r1, sp, #260	@ 0x104
 8005ada:	4630      	mov	r0, r6
 8005adc:	f000 fbee 	bl	80062bc <_scanf_i>
 8005ae0:	e7b4      	b.n	8005a4c <__ssvfiscanf_r+0x210>
 8005ae2:	bf00      	nop
 8005ae4:	0800578d 	.word	0x0800578d
 8005ae8:	08005803 	.word	0x08005803
 8005aec:	08006d07 	.word	0x08006d07
 8005af0:	08006cb8 	.word	0x08006cb8
 8005af4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b20 <__ssvfiscanf_r+0x2e4>)
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f43f aec5 	beq.w	8005886 <__ssvfiscanf_r+0x4a>
 8005afc:	466b      	mov	r3, sp
 8005afe:	4622      	mov	r2, r4
 8005b00:	a941      	add	r1, sp, #260	@ 0x104
 8005b02:	4630      	mov	r0, r6
 8005b04:	f3af 8000 	nop.w
 8005b08:	e7a0      	b.n	8005a4c <__ssvfiscanf_r+0x210>
 8005b0a:	89a3      	ldrh	r3, [r4, #12]
 8005b0c:	065b      	lsls	r3, r3, #25
 8005b0e:	f53f af71 	bmi.w	80059f4 <__ssvfiscanf_r+0x1b8>
 8005b12:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8005b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005b1c:	e7f9      	b.n	8005b12 <__ssvfiscanf_r+0x2d6>
 8005b1e:	bf00      	nop
 8005b20:	00000000 	.word	0x00000000

08005b24 <__sfputc_r>:
 8005b24:	6893      	ldr	r3, [r2, #8]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	b410      	push	{r4}
 8005b2c:	6093      	str	r3, [r2, #8]
 8005b2e:	da08      	bge.n	8005b42 <__sfputc_r+0x1e>
 8005b30:	6994      	ldr	r4, [r2, #24]
 8005b32:	42a3      	cmp	r3, r4
 8005b34:	db01      	blt.n	8005b3a <__sfputc_r+0x16>
 8005b36:	290a      	cmp	r1, #10
 8005b38:	d103      	bne.n	8005b42 <__sfputc_r+0x1e>
 8005b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b3e:	f000 bef7 	b.w	8006930 <__swbuf_r>
 8005b42:	6813      	ldr	r3, [r2, #0]
 8005b44:	1c58      	adds	r0, r3, #1
 8005b46:	6010      	str	r0, [r2, #0]
 8005b48:	7019      	strb	r1, [r3, #0]
 8005b4a:	4608      	mov	r0, r1
 8005b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <__sfputs_r>:
 8005b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b54:	4606      	mov	r6, r0
 8005b56:	460f      	mov	r7, r1
 8005b58:	4614      	mov	r4, r2
 8005b5a:	18d5      	adds	r5, r2, r3
 8005b5c:	42ac      	cmp	r4, r5
 8005b5e:	d101      	bne.n	8005b64 <__sfputs_r+0x12>
 8005b60:	2000      	movs	r0, #0
 8005b62:	e007      	b.n	8005b74 <__sfputs_r+0x22>
 8005b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b68:	463a      	mov	r2, r7
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7ff ffda 	bl	8005b24 <__sfputc_r>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d1f3      	bne.n	8005b5c <__sfputs_r+0xa>
 8005b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b78 <_vfiprintf_r>:
 8005b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	460d      	mov	r5, r1
 8005b7e:	b09d      	sub	sp, #116	@ 0x74
 8005b80:	4614      	mov	r4, r2
 8005b82:	4698      	mov	r8, r3
 8005b84:	4606      	mov	r6, r0
 8005b86:	b118      	cbz	r0, 8005b90 <_vfiprintf_r+0x18>
 8005b88:	6a03      	ldr	r3, [r0, #32]
 8005b8a:	b90b      	cbnz	r3, 8005b90 <_vfiprintf_r+0x18>
 8005b8c:	f7ff fcf0 	bl	8005570 <__sinit>
 8005b90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b92:	07d9      	lsls	r1, r3, #31
 8005b94:	d405      	bmi.n	8005ba2 <_vfiprintf_r+0x2a>
 8005b96:	89ab      	ldrh	r3, [r5, #12]
 8005b98:	059a      	lsls	r2, r3, #22
 8005b9a:	d402      	bmi.n	8005ba2 <_vfiprintf_r+0x2a>
 8005b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b9e:	f7ff fda8 	bl	80056f2 <__retarget_lock_acquire_recursive>
 8005ba2:	89ab      	ldrh	r3, [r5, #12]
 8005ba4:	071b      	lsls	r3, r3, #28
 8005ba6:	d501      	bpl.n	8005bac <_vfiprintf_r+0x34>
 8005ba8:	692b      	ldr	r3, [r5, #16]
 8005baa:	b99b      	cbnz	r3, 8005bd4 <_vfiprintf_r+0x5c>
 8005bac:	4629      	mov	r1, r5
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f000 fefc 	bl	80069ac <__swsetup_r>
 8005bb4:	b170      	cbz	r0, 8005bd4 <_vfiprintf_r+0x5c>
 8005bb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bb8:	07dc      	lsls	r4, r3, #31
 8005bba:	d504      	bpl.n	8005bc6 <_vfiprintf_r+0x4e>
 8005bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bc0:	b01d      	add	sp, #116	@ 0x74
 8005bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc6:	89ab      	ldrh	r3, [r5, #12]
 8005bc8:	0598      	lsls	r0, r3, #22
 8005bca:	d4f7      	bmi.n	8005bbc <_vfiprintf_r+0x44>
 8005bcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bce:	f7ff fd91 	bl	80056f4 <__retarget_lock_release_recursive>
 8005bd2:	e7f3      	b.n	8005bbc <_vfiprintf_r+0x44>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bd8:	2320      	movs	r3, #32
 8005bda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8005be2:	2330      	movs	r3, #48	@ 0x30
 8005be4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005d94 <_vfiprintf_r+0x21c>
 8005be8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bec:	f04f 0901 	mov.w	r9, #1
 8005bf0:	4623      	mov	r3, r4
 8005bf2:	469a      	mov	sl, r3
 8005bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bf8:	b10a      	cbz	r2, 8005bfe <_vfiprintf_r+0x86>
 8005bfa:	2a25      	cmp	r2, #37	@ 0x25
 8005bfc:	d1f9      	bne.n	8005bf2 <_vfiprintf_r+0x7a>
 8005bfe:	ebba 0b04 	subs.w	fp, sl, r4
 8005c02:	d00b      	beq.n	8005c1c <_vfiprintf_r+0xa4>
 8005c04:	465b      	mov	r3, fp
 8005c06:	4622      	mov	r2, r4
 8005c08:	4629      	mov	r1, r5
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f7ff ffa1 	bl	8005b52 <__sfputs_r>
 8005c10:	3001      	adds	r0, #1
 8005c12:	f000 80a7 	beq.w	8005d64 <_vfiprintf_r+0x1ec>
 8005c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c18:	445a      	add	r2, fp
 8005c1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 809f 	beq.w	8005d64 <_vfiprintf_r+0x1ec>
 8005c26:	2300      	movs	r3, #0
 8005c28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c30:	f10a 0a01 	add.w	sl, sl, #1
 8005c34:	9304      	str	r3, [sp, #16]
 8005c36:	9307      	str	r3, [sp, #28]
 8005c38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c3e:	4654      	mov	r4, sl
 8005c40:	2205      	movs	r2, #5
 8005c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c46:	4853      	ldr	r0, [pc, #332]	@ (8005d94 <_vfiprintf_r+0x21c>)
 8005c48:	f7fa faf2 	bl	8000230 <memchr>
 8005c4c:	9a04      	ldr	r2, [sp, #16]
 8005c4e:	b9d8      	cbnz	r0, 8005c88 <_vfiprintf_r+0x110>
 8005c50:	06d1      	lsls	r1, r2, #27
 8005c52:	bf44      	itt	mi
 8005c54:	2320      	movmi	r3, #32
 8005c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c5a:	0713      	lsls	r3, r2, #28
 8005c5c:	bf44      	itt	mi
 8005c5e:	232b      	movmi	r3, #43	@ 0x2b
 8005c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c64:	f89a 3000 	ldrb.w	r3, [sl]
 8005c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c6a:	d015      	beq.n	8005c98 <_vfiprintf_r+0x120>
 8005c6c:	9a07      	ldr	r2, [sp, #28]
 8005c6e:	4654      	mov	r4, sl
 8005c70:	2000      	movs	r0, #0
 8005c72:	f04f 0c0a 	mov.w	ip, #10
 8005c76:	4621      	mov	r1, r4
 8005c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c7c:	3b30      	subs	r3, #48	@ 0x30
 8005c7e:	2b09      	cmp	r3, #9
 8005c80:	d94b      	bls.n	8005d1a <_vfiprintf_r+0x1a2>
 8005c82:	b1b0      	cbz	r0, 8005cb2 <_vfiprintf_r+0x13a>
 8005c84:	9207      	str	r2, [sp, #28]
 8005c86:	e014      	b.n	8005cb2 <_vfiprintf_r+0x13a>
 8005c88:	eba0 0308 	sub.w	r3, r0, r8
 8005c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8005c90:	4313      	orrs	r3, r2
 8005c92:	9304      	str	r3, [sp, #16]
 8005c94:	46a2      	mov	sl, r4
 8005c96:	e7d2      	b.n	8005c3e <_vfiprintf_r+0xc6>
 8005c98:	9b03      	ldr	r3, [sp, #12]
 8005c9a:	1d19      	adds	r1, r3, #4
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	9103      	str	r1, [sp, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	bfbb      	ittet	lt
 8005ca4:	425b      	neglt	r3, r3
 8005ca6:	f042 0202 	orrlt.w	r2, r2, #2
 8005caa:	9307      	strge	r3, [sp, #28]
 8005cac:	9307      	strlt	r3, [sp, #28]
 8005cae:	bfb8      	it	lt
 8005cb0:	9204      	strlt	r2, [sp, #16]
 8005cb2:	7823      	ldrb	r3, [r4, #0]
 8005cb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cb6:	d10a      	bne.n	8005cce <_vfiprintf_r+0x156>
 8005cb8:	7863      	ldrb	r3, [r4, #1]
 8005cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cbc:	d132      	bne.n	8005d24 <_vfiprintf_r+0x1ac>
 8005cbe:	9b03      	ldr	r3, [sp, #12]
 8005cc0:	1d1a      	adds	r2, r3, #4
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	9203      	str	r2, [sp, #12]
 8005cc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cca:	3402      	adds	r4, #2
 8005ccc:	9305      	str	r3, [sp, #20]
 8005cce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005da4 <_vfiprintf_r+0x22c>
 8005cd2:	7821      	ldrb	r1, [r4, #0]
 8005cd4:	2203      	movs	r2, #3
 8005cd6:	4650      	mov	r0, sl
 8005cd8:	f7fa faaa 	bl	8000230 <memchr>
 8005cdc:	b138      	cbz	r0, 8005cee <_vfiprintf_r+0x176>
 8005cde:	9b04      	ldr	r3, [sp, #16]
 8005ce0:	eba0 000a 	sub.w	r0, r0, sl
 8005ce4:	2240      	movs	r2, #64	@ 0x40
 8005ce6:	4082      	lsls	r2, r0
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	3401      	adds	r4, #1
 8005cec:	9304      	str	r3, [sp, #16]
 8005cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf2:	4829      	ldr	r0, [pc, #164]	@ (8005d98 <_vfiprintf_r+0x220>)
 8005cf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cf8:	2206      	movs	r2, #6
 8005cfa:	f7fa fa99 	bl	8000230 <memchr>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d03f      	beq.n	8005d82 <_vfiprintf_r+0x20a>
 8005d02:	4b26      	ldr	r3, [pc, #152]	@ (8005d9c <_vfiprintf_r+0x224>)
 8005d04:	bb1b      	cbnz	r3, 8005d4e <_vfiprintf_r+0x1d6>
 8005d06:	9b03      	ldr	r3, [sp, #12]
 8005d08:	3307      	adds	r3, #7
 8005d0a:	f023 0307 	bic.w	r3, r3, #7
 8005d0e:	3308      	adds	r3, #8
 8005d10:	9303      	str	r3, [sp, #12]
 8005d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d14:	443b      	add	r3, r7
 8005d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d18:	e76a      	b.n	8005bf0 <_vfiprintf_r+0x78>
 8005d1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d1e:	460c      	mov	r4, r1
 8005d20:	2001      	movs	r0, #1
 8005d22:	e7a8      	b.n	8005c76 <_vfiprintf_r+0xfe>
 8005d24:	2300      	movs	r3, #0
 8005d26:	3401      	adds	r4, #1
 8005d28:	9305      	str	r3, [sp, #20]
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	f04f 0c0a 	mov.w	ip, #10
 8005d30:	4620      	mov	r0, r4
 8005d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d36:	3a30      	subs	r2, #48	@ 0x30
 8005d38:	2a09      	cmp	r2, #9
 8005d3a:	d903      	bls.n	8005d44 <_vfiprintf_r+0x1cc>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0c6      	beq.n	8005cce <_vfiprintf_r+0x156>
 8005d40:	9105      	str	r1, [sp, #20]
 8005d42:	e7c4      	b.n	8005cce <_vfiprintf_r+0x156>
 8005d44:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d48:	4604      	mov	r4, r0
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e7f0      	b.n	8005d30 <_vfiprintf_r+0x1b8>
 8005d4e:	ab03      	add	r3, sp, #12
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	462a      	mov	r2, r5
 8005d54:	4b12      	ldr	r3, [pc, #72]	@ (8005da0 <_vfiprintf_r+0x228>)
 8005d56:	a904      	add	r1, sp, #16
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f3af 8000 	nop.w
 8005d5e:	4607      	mov	r7, r0
 8005d60:	1c78      	adds	r0, r7, #1
 8005d62:	d1d6      	bne.n	8005d12 <_vfiprintf_r+0x19a>
 8005d64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d66:	07d9      	lsls	r1, r3, #31
 8005d68:	d405      	bmi.n	8005d76 <_vfiprintf_r+0x1fe>
 8005d6a:	89ab      	ldrh	r3, [r5, #12]
 8005d6c:	059a      	lsls	r2, r3, #22
 8005d6e:	d402      	bmi.n	8005d76 <_vfiprintf_r+0x1fe>
 8005d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d72:	f7ff fcbf 	bl	80056f4 <__retarget_lock_release_recursive>
 8005d76:	89ab      	ldrh	r3, [r5, #12]
 8005d78:	065b      	lsls	r3, r3, #25
 8005d7a:	f53f af1f 	bmi.w	8005bbc <_vfiprintf_r+0x44>
 8005d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d80:	e71e      	b.n	8005bc0 <_vfiprintf_r+0x48>
 8005d82:	ab03      	add	r3, sp, #12
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	462a      	mov	r2, r5
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <_vfiprintf_r+0x228>)
 8005d8a:	a904      	add	r1, sp, #16
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	f000 f91b 	bl	8005fc8 <_printf_i>
 8005d92:	e7e4      	b.n	8005d5e <_vfiprintf_r+0x1e6>
 8005d94:	08006cbc 	.word	0x08006cbc
 8005d98:	08006cc2 	.word	0x08006cc2
 8005d9c:	00000000 	.word	0x00000000
 8005da0:	08005b53 	.word	0x08005b53
 8005da4:	08006cb8 	.word	0x08006cb8

08005da8 <sbrk_aligned>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	4e0f      	ldr	r6, [pc, #60]	@ (8005de8 <sbrk_aligned+0x40>)
 8005dac:	460c      	mov	r4, r1
 8005dae:	6831      	ldr	r1, [r6, #0]
 8005db0:	4605      	mov	r5, r0
 8005db2:	b911      	cbnz	r1, 8005dba <sbrk_aligned+0x12>
 8005db4:	f000 fed4 	bl	8006b60 <_sbrk_r>
 8005db8:	6030      	str	r0, [r6, #0]
 8005dba:	4621      	mov	r1, r4
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f000 fecf 	bl	8006b60 <_sbrk_r>
 8005dc2:	1c43      	adds	r3, r0, #1
 8005dc4:	d103      	bne.n	8005dce <sbrk_aligned+0x26>
 8005dc6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005dca:	4620      	mov	r0, r4
 8005dcc:	bd70      	pop	{r4, r5, r6, pc}
 8005dce:	1cc4      	adds	r4, r0, #3
 8005dd0:	f024 0403 	bic.w	r4, r4, #3
 8005dd4:	42a0      	cmp	r0, r4
 8005dd6:	d0f8      	beq.n	8005dca <sbrk_aligned+0x22>
 8005dd8:	1a21      	subs	r1, r4, r0
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f000 fec0 	bl	8006b60 <_sbrk_r>
 8005de0:	3001      	adds	r0, #1
 8005de2:	d1f2      	bne.n	8005dca <sbrk_aligned+0x22>
 8005de4:	e7ef      	b.n	8005dc6 <sbrk_aligned+0x1e>
 8005de6:	bf00      	nop
 8005de8:	2000055c 	.word	0x2000055c

08005dec <_malloc_r>:
 8005dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df0:	1ccd      	adds	r5, r1, #3
 8005df2:	f025 0503 	bic.w	r5, r5, #3
 8005df6:	3508      	adds	r5, #8
 8005df8:	2d0c      	cmp	r5, #12
 8005dfa:	bf38      	it	cc
 8005dfc:	250c      	movcc	r5, #12
 8005dfe:	2d00      	cmp	r5, #0
 8005e00:	4606      	mov	r6, r0
 8005e02:	db01      	blt.n	8005e08 <_malloc_r+0x1c>
 8005e04:	42a9      	cmp	r1, r5
 8005e06:	d904      	bls.n	8005e12 <_malloc_r+0x26>
 8005e08:	230c      	movs	r3, #12
 8005e0a:	6033      	str	r3, [r6, #0]
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ee8 <_malloc_r+0xfc>
 8005e16:	f000 fc2b 	bl	8006670 <__malloc_lock>
 8005e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e1e:	461c      	mov	r4, r3
 8005e20:	bb44      	cbnz	r4, 8005e74 <_malloc_r+0x88>
 8005e22:	4629      	mov	r1, r5
 8005e24:	4630      	mov	r0, r6
 8005e26:	f7ff ffbf 	bl	8005da8 <sbrk_aligned>
 8005e2a:	1c43      	adds	r3, r0, #1
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	d158      	bne.n	8005ee2 <_malloc_r+0xf6>
 8005e30:	f8d8 4000 	ldr.w	r4, [r8]
 8005e34:	4627      	mov	r7, r4
 8005e36:	2f00      	cmp	r7, #0
 8005e38:	d143      	bne.n	8005ec2 <_malloc_r+0xd6>
 8005e3a:	2c00      	cmp	r4, #0
 8005e3c:	d04b      	beq.n	8005ed6 <_malloc_r+0xea>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	4639      	mov	r1, r7
 8005e42:	4630      	mov	r0, r6
 8005e44:	eb04 0903 	add.w	r9, r4, r3
 8005e48:	f000 fe8a 	bl	8006b60 <_sbrk_r>
 8005e4c:	4581      	cmp	r9, r0
 8005e4e:	d142      	bne.n	8005ed6 <_malloc_r+0xea>
 8005e50:	6821      	ldr	r1, [r4, #0]
 8005e52:	1a6d      	subs	r5, r5, r1
 8005e54:	4629      	mov	r1, r5
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7ff ffa6 	bl	8005da8 <sbrk_aligned>
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d03a      	beq.n	8005ed6 <_malloc_r+0xea>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	442b      	add	r3, r5
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	f8d8 3000 	ldr.w	r3, [r8]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	bb62      	cbnz	r2, 8005ec8 <_malloc_r+0xdc>
 8005e6e:	f8c8 7000 	str.w	r7, [r8]
 8005e72:	e00f      	b.n	8005e94 <_malloc_r+0xa8>
 8005e74:	6822      	ldr	r2, [r4, #0]
 8005e76:	1b52      	subs	r2, r2, r5
 8005e78:	d420      	bmi.n	8005ebc <_malloc_r+0xd0>
 8005e7a:	2a0b      	cmp	r2, #11
 8005e7c:	d917      	bls.n	8005eae <_malloc_r+0xc2>
 8005e7e:	1961      	adds	r1, r4, r5
 8005e80:	42a3      	cmp	r3, r4
 8005e82:	6025      	str	r5, [r4, #0]
 8005e84:	bf18      	it	ne
 8005e86:	6059      	strne	r1, [r3, #4]
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	bf08      	it	eq
 8005e8c:	f8c8 1000 	streq.w	r1, [r8]
 8005e90:	5162      	str	r2, [r4, r5]
 8005e92:	604b      	str	r3, [r1, #4]
 8005e94:	4630      	mov	r0, r6
 8005e96:	f000 fbf1 	bl	800667c <__malloc_unlock>
 8005e9a:	f104 000b 	add.w	r0, r4, #11
 8005e9e:	1d23      	adds	r3, r4, #4
 8005ea0:	f020 0007 	bic.w	r0, r0, #7
 8005ea4:	1ac2      	subs	r2, r0, r3
 8005ea6:	bf1c      	itt	ne
 8005ea8:	1a1b      	subne	r3, r3, r0
 8005eaa:	50a3      	strne	r3, [r4, r2]
 8005eac:	e7af      	b.n	8005e0e <_malloc_r+0x22>
 8005eae:	6862      	ldr	r2, [r4, #4]
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	bf0c      	ite	eq
 8005eb4:	f8c8 2000 	streq.w	r2, [r8]
 8005eb8:	605a      	strne	r2, [r3, #4]
 8005eba:	e7eb      	b.n	8005e94 <_malloc_r+0xa8>
 8005ebc:	4623      	mov	r3, r4
 8005ebe:	6864      	ldr	r4, [r4, #4]
 8005ec0:	e7ae      	b.n	8005e20 <_malloc_r+0x34>
 8005ec2:	463c      	mov	r4, r7
 8005ec4:	687f      	ldr	r7, [r7, #4]
 8005ec6:	e7b6      	b.n	8005e36 <_malloc_r+0x4a>
 8005ec8:	461a      	mov	r2, r3
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	d1fb      	bne.n	8005ec8 <_malloc_r+0xdc>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	6053      	str	r3, [r2, #4]
 8005ed4:	e7de      	b.n	8005e94 <_malloc_r+0xa8>
 8005ed6:	230c      	movs	r3, #12
 8005ed8:	6033      	str	r3, [r6, #0]
 8005eda:	4630      	mov	r0, r6
 8005edc:	f000 fbce 	bl	800667c <__malloc_unlock>
 8005ee0:	e794      	b.n	8005e0c <_malloc_r+0x20>
 8005ee2:	6005      	str	r5, [r0, #0]
 8005ee4:	e7d6      	b.n	8005e94 <_malloc_r+0xa8>
 8005ee6:	bf00      	nop
 8005ee8:	20000560 	.word	0x20000560

08005eec <_printf_common>:
 8005eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef0:	4616      	mov	r6, r2
 8005ef2:	4698      	mov	r8, r3
 8005ef4:	688a      	ldr	r2, [r1, #8]
 8005ef6:	690b      	ldr	r3, [r1, #16]
 8005ef8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005efc:	4293      	cmp	r3, r2
 8005efe:	bfb8      	it	lt
 8005f00:	4613      	movlt	r3, r2
 8005f02:	6033      	str	r3, [r6, #0]
 8005f04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f08:	4607      	mov	r7, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	b10a      	cbz	r2, 8005f12 <_printf_common+0x26>
 8005f0e:	3301      	adds	r3, #1
 8005f10:	6033      	str	r3, [r6, #0]
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	0699      	lsls	r1, r3, #26
 8005f16:	bf42      	ittt	mi
 8005f18:	6833      	ldrmi	r3, [r6, #0]
 8005f1a:	3302      	addmi	r3, #2
 8005f1c:	6033      	strmi	r3, [r6, #0]
 8005f1e:	6825      	ldr	r5, [r4, #0]
 8005f20:	f015 0506 	ands.w	r5, r5, #6
 8005f24:	d106      	bne.n	8005f34 <_printf_common+0x48>
 8005f26:	f104 0a19 	add.w	sl, r4, #25
 8005f2a:	68e3      	ldr	r3, [r4, #12]
 8005f2c:	6832      	ldr	r2, [r6, #0]
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	42ab      	cmp	r3, r5
 8005f32:	dc26      	bgt.n	8005f82 <_printf_common+0x96>
 8005f34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f38:	6822      	ldr	r2, [r4, #0]
 8005f3a:	3b00      	subs	r3, #0
 8005f3c:	bf18      	it	ne
 8005f3e:	2301      	movne	r3, #1
 8005f40:	0692      	lsls	r2, r2, #26
 8005f42:	d42b      	bmi.n	8005f9c <_printf_common+0xb0>
 8005f44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f48:	4641      	mov	r1, r8
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	47c8      	blx	r9
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d01e      	beq.n	8005f90 <_printf_common+0xa4>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	6922      	ldr	r2, [r4, #16]
 8005f56:	f003 0306 	and.w	r3, r3, #6
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	bf02      	ittt	eq
 8005f5e:	68e5      	ldreq	r5, [r4, #12]
 8005f60:	6833      	ldreq	r3, [r6, #0]
 8005f62:	1aed      	subeq	r5, r5, r3
 8005f64:	68a3      	ldr	r3, [r4, #8]
 8005f66:	bf0c      	ite	eq
 8005f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f6c:	2500      	movne	r5, #0
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	bfc4      	itt	gt
 8005f72:	1a9b      	subgt	r3, r3, r2
 8005f74:	18ed      	addgt	r5, r5, r3
 8005f76:	2600      	movs	r6, #0
 8005f78:	341a      	adds	r4, #26
 8005f7a:	42b5      	cmp	r5, r6
 8005f7c:	d11a      	bne.n	8005fb4 <_printf_common+0xc8>
 8005f7e:	2000      	movs	r0, #0
 8005f80:	e008      	b.n	8005f94 <_printf_common+0xa8>
 8005f82:	2301      	movs	r3, #1
 8005f84:	4652      	mov	r2, sl
 8005f86:	4641      	mov	r1, r8
 8005f88:	4638      	mov	r0, r7
 8005f8a:	47c8      	blx	r9
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d103      	bne.n	8005f98 <_printf_common+0xac>
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f98:	3501      	adds	r5, #1
 8005f9a:	e7c6      	b.n	8005f2a <_printf_common+0x3e>
 8005f9c:	18e1      	adds	r1, r4, r3
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	2030      	movs	r0, #48	@ 0x30
 8005fa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fa6:	4422      	add	r2, r4
 8005fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fb0:	3302      	adds	r3, #2
 8005fb2:	e7c7      	b.n	8005f44 <_printf_common+0x58>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	4641      	mov	r1, r8
 8005fba:	4638      	mov	r0, r7
 8005fbc:	47c8      	blx	r9
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d0e6      	beq.n	8005f90 <_printf_common+0xa4>
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	e7d9      	b.n	8005f7a <_printf_common+0x8e>
	...

08005fc8 <_printf_i>:
 8005fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	7e0f      	ldrb	r7, [r1, #24]
 8005fce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fd0:	2f78      	cmp	r7, #120	@ 0x78
 8005fd2:	4691      	mov	r9, r2
 8005fd4:	4680      	mov	r8, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	469a      	mov	sl, r3
 8005fda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fde:	d807      	bhi.n	8005ff0 <_printf_i+0x28>
 8005fe0:	2f62      	cmp	r7, #98	@ 0x62
 8005fe2:	d80a      	bhi.n	8005ffa <_printf_i+0x32>
 8005fe4:	2f00      	cmp	r7, #0
 8005fe6:	f000 80d2 	beq.w	800618e <_printf_i+0x1c6>
 8005fea:	2f58      	cmp	r7, #88	@ 0x58
 8005fec:	f000 80b9 	beq.w	8006162 <_printf_i+0x19a>
 8005ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ff4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ff8:	e03a      	b.n	8006070 <_printf_i+0xa8>
 8005ffa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ffe:	2b15      	cmp	r3, #21
 8006000:	d8f6      	bhi.n	8005ff0 <_printf_i+0x28>
 8006002:	a101      	add	r1, pc, #4	@ (adr r1, 8006008 <_printf_i+0x40>)
 8006004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006008:	08006061 	.word	0x08006061
 800600c:	08006075 	.word	0x08006075
 8006010:	08005ff1 	.word	0x08005ff1
 8006014:	08005ff1 	.word	0x08005ff1
 8006018:	08005ff1 	.word	0x08005ff1
 800601c:	08005ff1 	.word	0x08005ff1
 8006020:	08006075 	.word	0x08006075
 8006024:	08005ff1 	.word	0x08005ff1
 8006028:	08005ff1 	.word	0x08005ff1
 800602c:	08005ff1 	.word	0x08005ff1
 8006030:	08005ff1 	.word	0x08005ff1
 8006034:	08006175 	.word	0x08006175
 8006038:	0800609f 	.word	0x0800609f
 800603c:	0800612f 	.word	0x0800612f
 8006040:	08005ff1 	.word	0x08005ff1
 8006044:	08005ff1 	.word	0x08005ff1
 8006048:	08006197 	.word	0x08006197
 800604c:	08005ff1 	.word	0x08005ff1
 8006050:	0800609f 	.word	0x0800609f
 8006054:	08005ff1 	.word	0x08005ff1
 8006058:	08005ff1 	.word	0x08005ff1
 800605c:	08006137 	.word	0x08006137
 8006060:	6833      	ldr	r3, [r6, #0]
 8006062:	1d1a      	adds	r2, r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6032      	str	r2, [r6, #0]
 8006068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800606c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006070:	2301      	movs	r3, #1
 8006072:	e09d      	b.n	80061b0 <_printf_i+0x1e8>
 8006074:	6833      	ldr	r3, [r6, #0]
 8006076:	6820      	ldr	r0, [r4, #0]
 8006078:	1d19      	adds	r1, r3, #4
 800607a:	6031      	str	r1, [r6, #0]
 800607c:	0606      	lsls	r6, r0, #24
 800607e:	d501      	bpl.n	8006084 <_printf_i+0xbc>
 8006080:	681d      	ldr	r5, [r3, #0]
 8006082:	e003      	b.n	800608c <_printf_i+0xc4>
 8006084:	0645      	lsls	r5, r0, #25
 8006086:	d5fb      	bpl.n	8006080 <_printf_i+0xb8>
 8006088:	f9b3 5000 	ldrsh.w	r5, [r3]
 800608c:	2d00      	cmp	r5, #0
 800608e:	da03      	bge.n	8006098 <_printf_i+0xd0>
 8006090:	232d      	movs	r3, #45	@ 0x2d
 8006092:	426d      	negs	r5, r5
 8006094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006098:	4859      	ldr	r0, [pc, #356]	@ (8006200 <_printf_i+0x238>)
 800609a:	230a      	movs	r3, #10
 800609c:	e011      	b.n	80060c2 <_printf_i+0xfa>
 800609e:	6821      	ldr	r1, [r4, #0]
 80060a0:	6833      	ldr	r3, [r6, #0]
 80060a2:	0608      	lsls	r0, r1, #24
 80060a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80060a8:	d402      	bmi.n	80060b0 <_printf_i+0xe8>
 80060aa:	0649      	lsls	r1, r1, #25
 80060ac:	bf48      	it	mi
 80060ae:	b2ad      	uxthmi	r5, r5
 80060b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80060b2:	4853      	ldr	r0, [pc, #332]	@ (8006200 <_printf_i+0x238>)
 80060b4:	6033      	str	r3, [r6, #0]
 80060b6:	bf14      	ite	ne
 80060b8:	230a      	movne	r3, #10
 80060ba:	2308      	moveq	r3, #8
 80060bc:	2100      	movs	r1, #0
 80060be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060c2:	6866      	ldr	r6, [r4, #4]
 80060c4:	60a6      	str	r6, [r4, #8]
 80060c6:	2e00      	cmp	r6, #0
 80060c8:	bfa2      	ittt	ge
 80060ca:	6821      	ldrge	r1, [r4, #0]
 80060cc:	f021 0104 	bicge.w	r1, r1, #4
 80060d0:	6021      	strge	r1, [r4, #0]
 80060d2:	b90d      	cbnz	r5, 80060d8 <_printf_i+0x110>
 80060d4:	2e00      	cmp	r6, #0
 80060d6:	d04b      	beq.n	8006170 <_printf_i+0x1a8>
 80060d8:	4616      	mov	r6, r2
 80060da:	fbb5 f1f3 	udiv	r1, r5, r3
 80060de:	fb03 5711 	mls	r7, r3, r1, r5
 80060e2:	5dc7      	ldrb	r7, [r0, r7]
 80060e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060e8:	462f      	mov	r7, r5
 80060ea:	42bb      	cmp	r3, r7
 80060ec:	460d      	mov	r5, r1
 80060ee:	d9f4      	bls.n	80060da <_printf_i+0x112>
 80060f0:	2b08      	cmp	r3, #8
 80060f2:	d10b      	bne.n	800610c <_printf_i+0x144>
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	07df      	lsls	r7, r3, #31
 80060f8:	d508      	bpl.n	800610c <_printf_i+0x144>
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	6861      	ldr	r1, [r4, #4]
 80060fe:	4299      	cmp	r1, r3
 8006100:	bfde      	ittt	le
 8006102:	2330      	movle	r3, #48	@ 0x30
 8006104:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006108:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800610c:	1b92      	subs	r2, r2, r6
 800610e:	6122      	str	r2, [r4, #16]
 8006110:	f8cd a000 	str.w	sl, [sp]
 8006114:	464b      	mov	r3, r9
 8006116:	aa03      	add	r2, sp, #12
 8006118:	4621      	mov	r1, r4
 800611a:	4640      	mov	r0, r8
 800611c:	f7ff fee6 	bl	8005eec <_printf_common>
 8006120:	3001      	adds	r0, #1
 8006122:	d14a      	bne.n	80061ba <_printf_i+0x1f2>
 8006124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006128:	b004      	add	sp, #16
 800612a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	f043 0320 	orr.w	r3, r3, #32
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	4833      	ldr	r0, [pc, #204]	@ (8006204 <_printf_i+0x23c>)
 8006138:	2778      	movs	r7, #120	@ 0x78
 800613a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	6831      	ldr	r1, [r6, #0]
 8006142:	061f      	lsls	r7, r3, #24
 8006144:	f851 5b04 	ldr.w	r5, [r1], #4
 8006148:	d402      	bmi.n	8006150 <_printf_i+0x188>
 800614a:	065f      	lsls	r7, r3, #25
 800614c:	bf48      	it	mi
 800614e:	b2ad      	uxthmi	r5, r5
 8006150:	6031      	str	r1, [r6, #0]
 8006152:	07d9      	lsls	r1, r3, #31
 8006154:	bf44      	itt	mi
 8006156:	f043 0320 	orrmi.w	r3, r3, #32
 800615a:	6023      	strmi	r3, [r4, #0]
 800615c:	b11d      	cbz	r5, 8006166 <_printf_i+0x19e>
 800615e:	2310      	movs	r3, #16
 8006160:	e7ac      	b.n	80060bc <_printf_i+0xf4>
 8006162:	4827      	ldr	r0, [pc, #156]	@ (8006200 <_printf_i+0x238>)
 8006164:	e7e9      	b.n	800613a <_printf_i+0x172>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	f023 0320 	bic.w	r3, r3, #32
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	e7f6      	b.n	800615e <_printf_i+0x196>
 8006170:	4616      	mov	r6, r2
 8006172:	e7bd      	b.n	80060f0 <_printf_i+0x128>
 8006174:	6833      	ldr	r3, [r6, #0]
 8006176:	6825      	ldr	r5, [r4, #0]
 8006178:	6961      	ldr	r1, [r4, #20]
 800617a:	1d18      	adds	r0, r3, #4
 800617c:	6030      	str	r0, [r6, #0]
 800617e:	062e      	lsls	r6, r5, #24
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	d501      	bpl.n	8006188 <_printf_i+0x1c0>
 8006184:	6019      	str	r1, [r3, #0]
 8006186:	e002      	b.n	800618e <_printf_i+0x1c6>
 8006188:	0668      	lsls	r0, r5, #25
 800618a:	d5fb      	bpl.n	8006184 <_printf_i+0x1bc>
 800618c:	8019      	strh	r1, [r3, #0]
 800618e:	2300      	movs	r3, #0
 8006190:	6123      	str	r3, [r4, #16]
 8006192:	4616      	mov	r6, r2
 8006194:	e7bc      	b.n	8006110 <_printf_i+0x148>
 8006196:	6833      	ldr	r3, [r6, #0]
 8006198:	1d1a      	adds	r2, r3, #4
 800619a:	6032      	str	r2, [r6, #0]
 800619c:	681e      	ldr	r6, [r3, #0]
 800619e:	6862      	ldr	r2, [r4, #4]
 80061a0:	2100      	movs	r1, #0
 80061a2:	4630      	mov	r0, r6
 80061a4:	f7fa f844 	bl	8000230 <memchr>
 80061a8:	b108      	cbz	r0, 80061ae <_printf_i+0x1e6>
 80061aa:	1b80      	subs	r0, r0, r6
 80061ac:	6060      	str	r0, [r4, #4]
 80061ae:	6863      	ldr	r3, [r4, #4]
 80061b0:	6123      	str	r3, [r4, #16]
 80061b2:	2300      	movs	r3, #0
 80061b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061b8:	e7aa      	b.n	8006110 <_printf_i+0x148>
 80061ba:	6923      	ldr	r3, [r4, #16]
 80061bc:	4632      	mov	r2, r6
 80061be:	4649      	mov	r1, r9
 80061c0:	4640      	mov	r0, r8
 80061c2:	47d0      	blx	sl
 80061c4:	3001      	adds	r0, #1
 80061c6:	d0ad      	beq.n	8006124 <_printf_i+0x15c>
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	079b      	lsls	r3, r3, #30
 80061cc:	d413      	bmi.n	80061f6 <_printf_i+0x22e>
 80061ce:	68e0      	ldr	r0, [r4, #12]
 80061d0:	9b03      	ldr	r3, [sp, #12]
 80061d2:	4298      	cmp	r0, r3
 80061d4:	bfb8      	it	lt
 80061d6:	4618      	movlt	r0, r3
 80061d8:	e7a6      	b.n	8006128 <_printf_i+0x160>
 80061da:	2301      	movs	r3, #1
 80061dc:	4632      	mov	r2, r6
 80061de:	4649      	mov	r1, r9
 80061e0:	4640      	mov	r0, r8
 80061e2:	47d0      	blx	sl
 80061e4:	3001      	adds	r0, #1
 80061e6:	d09d      	beq.n	8006124 <_printf_i+0x15c>
 80061e8:	3501      	adds	r5, #1
 80061ea:	68e3      	ldr	r3, [r4, #12]
 80061ec:	9903      	ldr	r1, [sp, #12]
 80061ee:	1a5b      	subs	r3, r3, r1
 80061f0:	42ab      	cmp	r3, r5
 80061f2:	dcf2      	bgt.n	80061da <_printf_i+0x212>
 80061f4:	e7eb      	b.n	80061ce <_printf_i+0x206>
 80061f6:	2500      	movs	r5, #0
 80061f8:	f104 0619 	add.w	r6, r4, #25
 80061fc:	e7f5      	b.n	80061ea <_printf_i+0x222>
 80061fe:	bf00      	nop
 8006200:	08006cc9 	.word	0x08006cc9
 8006204:	08006cda 	.word	0x08006cda

08006208 <_scanf_chars>:
 8006208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800620c:	4615      	mov	r5, r2
 800620e:	688a      	ldr	r2, [r1, #8]
 8006210:	4680      	mov	r8, r0
 8006212:	460c      	mov	r4, r1
 8006214:	b932      	cbnz	r2, 8006224 <_scanf_chars+0x1c>
 8006216:	698a      	ldr	r2, [r1, #24]
 8006218:	2a00      	cmp	r2, #0
 800621a:	bf14      	ite	ne
 800621c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8006220:	2201      	moveq	r2, #1
 8006222:	608a      	str	r2, [r1, #8]
 8006224:	6822      	ldr	r2, [r4, #0]
 8006226:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80062b8 <_scanf_chars+0xb0>
 800622a:	06d1      	lsls	r1, r2, #27
 800622c:	bf5f      	itttt	pl
 800622e:	681a      	ldrpl	r2, [r3, #0]
 8006230:	1d11      	addpl	r1, r2, #4
 8006232:	6019      	strpl	r1, [r3, #0]
 8006234:	6816      	ldrpl	r6, [r2, #0]
 8006236:	2700      	movs	r7, #0
 8006238:	69a0      	ldr	r0, [r4, #24]
 800623a:	b188      	cbz	r0, 8006260 <_scanf_chars+0x58>
 800623c:	2801      	cmp	r0, #1
 800623e:	d107      	bne.n	8006250 <_scanf_chars+0x48>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	781a      	ldrb	r2, [r3, #0]
 8006244:	6963      	ldr	r3, [r4, #20]
 8006246:	5c9b      	ldrb	r3, [r3, r2]
 8006248:	b953      	cbnz	r3, 8006260 <_scanf_chars+0x58>
 800624a:	2f00      	cmp	r7, #0
 800624c:	d031      	beq.n	80062b2 <_scanf_chars+0xaa>
 800624e:	e022      	b.n	8006296 <_scanf_chars+0x8e>
 8006250:	2802      	cmp	r0, #2
 8006252:	d120      	bne.n	8006296 <_scanf_chars+0x8e>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	f819 3003 	ldrb.w	r3, [r9, r3]
 800625c:	071b      	lsls	r3, r3, #28
 800625e:	d41a      	bmi.n	8006296 <_scanf_chars+0x8e>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	06da      	lsls	r2, r3, #27
 8006264:	bf5e      	ittt	pl
 8006266:	682b      	ldrpl	r3, [r5, #0]
 8006268:	781b      	ldrbpl	r3, [r3, #0]
 800626a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800626e:	682a      	ldr	r2, [r5, #0]
 8006270:	686b      	ldr	r3, [r5, #4]
 8006272:	3201      	adds	r2, #1
 8006274:	602a      	str	r2, [r5, #0]
 8006276:	68a2      	ldr	r2, [r4, #8]
 8006278:	3b01      	subs	r3, #1
 800627a:	3a01      	subs	r2, #1
 800627c:	606b      	str	r3, [r5, #4]
 800627e:	3701      	adds	r7, #1
 8006280:	60a2      	str	r2, [r4, #8]
 8006282:	b142      	cbz	r2, 8006296 <_scanf_chars+0x8e>
 8006284:	2b00      	cmp	r3, #0
 8006286:	dcd7      	bgt.n	8006238 <_scanf_chars+0x30>
 8006288:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800628c:	4629      	mov	r1, r5
 800628e:	4640      	mov	r0, r8
 8006290:	4798      	blx	r3
 8006292:	2800      	cmp	r0, #0
 8006294:	d0d0      	beq.n	8006238 <_scanf_chars+0x30>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	f013 0310 	ands.w	r3, r3, #16
 800629c:	d105      	bne.n	80062aa <_scanf_chars+0xa2>
 800629e:	68e2      	ldr	r2, [r4, #12]
 80062a0:	3201      	adds	r2, #1
 80062a2:	60e2      	str	r2, [r4, #12]
 80062a4:	69a2      	ldr	r2, [r4, #24]
 80062a6:	b102      	cbz	r2, 80062aa <_scanf_chars+0xa2>
 80062a8:	7033      	strb	r3, [r6, #0]
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	443b      	add	r3, r7
 80062ae:	6123      	str	r3, [r4, #16]
 80062b0:	2000      	movs	r0, #0
 80062b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b6:	bf00      	nop
 80062b8:	08006d07 	.word	0x08006d07

080062bc <_scanf_i>:
 80062bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	4698      	mov	r8, r3
 80062c2:	4b74      	ldr	r3, [pc, #464]	@ (8006494 <_scanf_i+0x1d8>)
 80062c4:	460c      	mov	r4, r1
 80062c6:	4682      	mov	sl, r0
 80062c8:	4616      	mov	r6, r2
 80062ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80062ce:	b087      	sub	sp, #28
 80062d0:	ab03      	add	r3, sp, #12
 80062d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80062d6:	4b70      	ldr	r3, [pc, #448]	@ (8006498 <_scanf_i+0x1dc>)
 80062d8:	69a1      	ldr	r1, [r4, #24]
 80062da:	4a70      	ldr	r2, [pc, #448]	@ (800649c <_scanf_i+0x1e0>)
 80062dc:	2903      	cmp	r1, #3
 80062de:	bf08      	it	eq
 80062e0:	461a      	moveq	r2, r3
 80062e2:	68a3      	ldr	r3, [r4, #8]
 80062e4:	9201      	str	r2, [sp, #4]
 80062e6:	1e5a      	subs	r2, r3, #1
 80062e8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80062ec:	bf88      	it	hi
 80062ee:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80062f2:	4627      	mov	r7, r4
 80062f4:	bf82      	ittt	hi
 80062f6:	eb03 0905 	addhi.w	r9, r3, r5
 80062fa:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80062fe:	60a3      	strhi	r3, [r4, #8]
 8006300:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006304:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006308:	bf98      	it	ls
 800630a:	f04f 0900 	movls.w	r9, #0
 800630e:	6023      	str	r3, [r4, #0]
 8006310:	463d      	mov	r5, r7
 8006312:	f04f 0b00 	mov.w	fp, #0
 8006316:	6831      	ldr	r1, [r6, #0]
 8006318:	ab03      	add	r3, sp, #12
 800631a:	7809      	ldrb	r1, [r1, #0]
 800631c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006320:	2202      	movs	r2, #2
 8006322:	f7f9 ff85 	bl	8000230 <memchr>
 8006326:	b328      	cbz	r0, 8006374 <_scanf_i+0xb8>
 8006328:	f1bb 0f01 	cmp.w	fp, #1
 800632c:	d159      	bne.n	80063e2 <_scanf_i+0x126>
 800632e:	6862      	ldr	r2, [r4, #4]
 8006330:	b92a      	cbnz	r2, 800633e <_scanf_i+0x82>
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	2108      	movs	r1, #8
 8006336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800633a:	6061      	str	r1, [r4, #4]
 800633c:	6022      	str	r2, [r4, #0]
 800633e:	6822      	ldr	r2, [r4, #0]
 8006340:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006344:	6022      	str	r2, [r4, #0]
 8006346:	68a2      	ldr	r2, [r4, #8]
 8006348:	1e51      	subs	r1, r2, #1
 800634a:	60a1      	str	r1, [r4, #8]
 800634c:	b192      	cbz	r2, 8006374 <_scanf_i+0xb8>
 800634e:	6832      	ldr	r2, [r6, #0]
 8006350:	1c51      	adds	r1, r2, #1
 8006352:	6031      	str	r1, [r6, #0]
 8006354:	7812      	ldrb	r2, [r2, #0]
 8006356:	f805 2b01 	strb.w	r2, [r5], #1
 800635a:	6872      	ldr	r2, [r6, #4]
 800635c:	3a01      	subs	r2, #1
 800635e:	2a00      	cmp	r2, #0
 8006360:	6072      	str	r2, [r6, #4]
 8006362:	dc07      	bgt.n	8006374 <_scanf_i+0xb8>
 8006364:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006368:	4631      	mov	r1, r6
 800636a:	4650      	mov	r0, sl
 800636c:	4790      	blx	r2
 800636e:	2800      	cmp	r0, #0
 8006370:	f040 8085 	bne.w	800647e <_scanf_i+0x1c2>
 8006374:	f10b 0b01 	add.w	fp, fp, #1
 8006378:	f1bb 0f03 	cmp.w	fp, #3
 800637c:	d1cb      	bne.n	8006316 <_scanf_i+0x5a>
 800637e:	6863      	ldr	r3, [r4, #4]
 8006380:	b90b      	cbnz	r3, 8006386 <_scanf_i+0xca>
 8006382:	230a      	movs	r3, #10
 8006384:	6063      	str	r3, [r4, #4]
 8006386:	6863      	ldr	r3, [r4, #4]
 8006388:	4945      	ldr	r1, [pc, #276]	@ (80064a0 <_scanf_i+0x1e4>)
 800638a:	6960      	ldr	r0, [r4, #20]
 800638c:	1ac9      	subs	r1, r1, r3
 800638e:	f000 f889 	bl	80064a4 <__sccl>
 8006392:	f04f 0b00 	mov.w	fp, #0
 8006396:	68a3      	ldr	r3, [r4, #8]
 8006398:	6822      	ldr	r2, [r4, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d03d      	beq.n	800641a <_scanf_i+0x15e>
 800639e:	6831      	ldr	r1, [r6, #0]
 80063a0:	6960      	ldr	r0, [r4, #20]
 80063a2:	f891 c000 	ldrb.w	ip, [r1]
 80063a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d035      	beq.n	800641a <_scanf_i+0x15e>
 80063ae:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80063b2:	d124      	bne.n	80063fe <_scanf_i+0x142>
 80063b4:	0510      	lsls	r0, r2, #20
 80063b6:	d522      	bpl.n	80063fe <_scanf_i+0x142>
 80063b8:	f10b 0b01 	add.w	fp, fp, #1
 80063bc:	f1b9 0f00 	cmp.w	r9, #0
 80063c0:	d003      	beq.n	80063ca <_scanf_i+0x10e>
 80063c2:	3301      	adds	r3, #1
 80063c4:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80063c8:	60a3      	str	r3, [r4, #8]
 80063ca:	6873      	ldr	r3, [r6, #4]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	6073      	str	r3, [r6, #4]
 80063d2:	dd1b      	ble.n	800640c <_scanf_i+0x150>
 80063d4:	6833      	ldr	r3, [r6, #0]
 80063d6:	3301      	adds	r3, #1
 80063d8:	6033      	str	r3, [r6, #0]
 80063da:	68a3      	ldr	r3, [r4, #8]
 80063dc:	3b01      	subs	r3, #1
 80063de:	60a3      	str	r3, [r4, #8]
 80063e0:	e7d9      	b.n	8006396 <_scanf_i+0xda>
 80063e2:	f1bb 0f02 	cmp.w	fp, #2
 80063e6:	d1ae      	bne.n	8006346 <_scanf_i+0x8a>
 80063e8:	6822      	ldr	r2, [r4, #0]
 80063ea:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80063ee:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80063f2:	d1bf      	bne.n	8006374 <_scanf_i+0xb8>
 80063f4:	2110      	movs	r1, #16
 80063f6:	6061      	str	r1, [r4, #4]
 80063f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063fc:	e7a2      	b.n	8006344 <_scanf_i+0x88>
 80063fe:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8006402:	6022      	str	r2, [r4, #0]
 8006404:	780b      	ldrb	r3, [r1, #0]
 8006406:	f805 3b01 	strb.w	r3, [r5], #1
 800640a:	e7de      	b.n	80063ca <_scanf_i+0x10e>
 800640c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006410:	4631      	mov	r1, r6
 8006412:	4650      	mov	r0, sl
 8006414:	4798      	blx	r3
 8006416:	2800      	cmp	r0, #0
 8006418:	d0df      	beq.n	80063da <_scanf_i+0x11e>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	05d9      	lsls	r1, r3, #23
 800641e:	d50d      	bpl.n	800643c <_scanf_i+0x180>
 8006420:	42bd      	cmp	r5, r7
 8006422:	d909      	bls.n	8006438 <_scanf_i+0x17c>
 8006424:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006428:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800642c:	4632      	mov	r2, r6
 800642e:	4650      	mov	r0, sl
 8006430:	4798      	blx	r3
 8006432:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8006436:	464d      	mov	r5, r9
 8006438:	42bd      	cmp	r5, r7
 800643a:	d028      	beq.n	800648e <_scanf_i+0x1d2>
 800643c:	6822      	ldr	r2, [r4, #0]
 800643e:	f012 0210 	ands.w	r2, r2, #16
 8006442:	d113      	bne.n	800646c <_scanf_i+0x1b0>
 8006444:	702a      	strb	r2, [r5, #0]
 8006446:	6863      	ldr	r3, [r4, #4]
 8006448:	9e01      	ldr	r6, [sp, #4]
 800644a:	4639      	mov	r1, r7
 800644c:	4650      	mov	r0, sl
 800644e:	47b0      	blx	r6
 8006450:	f8d8 3000 	ldr.w	r3, [r8]
 8006454:	6821      	ldr	r1, [r4, #0]
 8006456:	1d1a      	adds	r2, r3, #4
 8006458:	f8c8 2000 	str.w	r2, [r8]
 800645c:	f011 0f20 	tst.w	r1, #32
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	d00f      	beq.n	8006484 <_scanf_i+0x1c8>
 8006464:	6018      	str	r0, [r3, #0]
 8006466:	68e3      	ldr	r3, [r4, #12]
 8006468:	3301      	adds	r3, #1
 800646a:	60e3      	str	r3, [r4, #12]
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	1bed      	subs	r5, r5, r7
 8006470:	445d      	add	r5, fp
 8006472:	442b      	add	r3, r5
 8006474:	6123      	str	r3, [r4, #16]
 8006476:	2000      	movs	r0, #0
 8006478:	b007      	add	sp, #28
 800647a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800647e:	f04f 0b00 	mov.w	fp, #0
 8006482:	e7ca      	b.n	800641a <_scanf_i+0x15e>
 8006484:	07ca      	lsls	r2, r1, #31
 8006486:	bf4c      	ite	mi
 8006488:	8018      	strhmi	r0, [r3, #0]
 800648a:	6018      	strpl	r0, [r3, #0]
 800648c:	e7eb      	b.n	8006466 <_scanf_i+0x1aa>
 800648e:	2001      	movs	r0, #1
 8006490:	e7f2      	b.n	8006478 <_scanf_i+0x1bc>
 8006492:	bf00      	nop
 8006494:	08006c68 	.word	0x08006c68
 8006498:	0800684d 	.word	0x0800684d
 800649c:	0800692d 	.word	0x0800692d
 80064a0:	08006cfb 	.word	0x08006cfb

080064a4 <__sccl>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	780b      	ldrb	r3, [r1, #0]
 80064a8:	4604      	mov	r4, r0
 80064aa:	2b5e      	cmp	r3, #94	@ 0x5e
 80064ac:	bf0b      	itete	eq
 80064ae:	784b      	ldrbeq	r3, [r1, #1]
 80064b0:	1c4a      	addne	r2, r1, #1
 80064b2:	1c8a      	addeq	r2, r1, #2
 80064b4:	2100      	movne	r1, #0
 80064b6:	bf08      	it	eq
 80064b8:	2101      	moveq	r1, #1
 80064ba:	3801      	subs	r0, #1
 80064bc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80064c0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80064c4:	42a8      	cmp	r0, r5
 80064c6:	d1fb      	bne.n	80064c0 <__sccl+0x1c>
 80064c8:	b90b      	cbnz	r3, 80064ce <__sccl+0x2a>
 80064ca:	1e50      	subs	r0, r2, #1
 80064cc:	bd70      	pop	{r4, r5, r6, pc}
 80064ce:	f081 0101 	eor.w	r1, r1, #1
 80064d2:	54e1      	strb	r1, [r4, r3]
 80064d4:	4610      	mov	r0, r2
 80064d6:	4602      	mov	r2, r0
 80064d8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80064dc:	2d2d      	cmp	r5, #45	@ 0x2d
 80064de:	d005      	beq.n	80064ec <__sccl+0x48>
 80064e0:	2d5d      	cmp	r5, #93	@ 0x5d
 80064e2:	d016      	beq.n	8006512 <__sccl+0x6e>
 80064e4:	2d00      	cmp	r5, #0
 80064e6:	d0f1      	beq.n	80064cc <__sccl+0x28>
 80064e8:	462b      	mov	r3, r5
 80064ea:	e7f2      	b.n	80064d2 <__sccl+0x2e>
 80064ec:	7846      	ldrb	r6, [r0, #1]
 80064ee:	2e5d      	cmp	r6, #93	@ 0x5d
 80064f0:	d0fa      	beq.n	80064e8 <__sccl+0x44>
 80064f2:	42b3      	cmp	r3, r6
 80064f4:	dcf8      	bgt.n	80064e8 <__sccl+0x44>
 80064f6:	3002      	adds	r0, #2
 80064f8:	461a      	mov	r2, r3
 80064fa:	3201      	adds	r2, #1
 80064fc:	4296      	cmp	r6, r2
 80064fe:	54a1      	strb	r1, [r4, r2]
 8006500:	dcfb      	bgt.n	80064fa <__sccl+0x56>
 8006502:	1af2      	subs	r2, r6, r3
 8006504:	3a01      	subs	r2, #1
 8006506:	1c5d      	adds	r5, r3, #1
 8006508:	42b3      	cmp	r3, r6
 800650a:	bfa8      	it	ge
 800650c:	2200      	movge	r2, #0
 800650e:	18ab      	adds	r3, r5, r2
 8006510:	e7e1      	b.n	80064d6 <__sccl+0x32>
 8006512:	4610      	mov	r0, r2
 8006514:	e7da      	b.n	80064cc <__sccl+0x28>
	...

08006518 <__sflush_r>:
 8006518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800651c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006520:	0716      	lsls	r6, r2, #28
 8006522:	4605      	mov	r5, r0
 8006524:	460c      	mov	r4, r1
 8006526:	d454      	bmi.n	80065d2 <__sflush_r+0xba>
 8006528:	684b      	ldr	r3, [r1, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	dc02      	bgt.n	8006534 <__sflush_r+0x1c>
 800652e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	dd48      	ble.n	80065c6 <__sflush_r+0xae>
 8006534:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006536:	2e00      	cmp	r6, #0
 8006538:	d045      	beq.n	80065c6 <__sflush_r+0xae>
 800653a:	2300      	movs	r3, #0
 800653c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006540:	682f      	ldr	r7, [r5, #0]
 8006542:	6a21      	ldr	r1, [r4, #32]
 8006544:	602b      	str	r3, [r5, #0]
 8006546:	d030      	beq.n	80065aa <__sflush_r+0x92>
 8006548:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	0759      	lsls	r1, r3, #29
 800654e:	d505      	bpl.n	800655c <__sflush_r+0x44>
 8006550:	6863      	ldr	r3, [r4, #4]
 8006552:	1ad2      	subs	r2, r2, r3
 8006554:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006556:	b10b      	cbz	r3, 800655c <__sflush_r+0x44>
 8006558:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800655a:	1ad2      	subs	r2, r2, r3
 800655c:	2300      	movs	r3, #0
 800655e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006560:	6a21      	ldr	r1, [r4, #32]
 8006562:	4628      	mov	r0, r5
 8006564:	47b0      	blx	r6
 8006566:	1c43      	adds	r3, r0, #1
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	d106      	bne.n	800657a <__sflush_r+0x62>
 800656c:	6829      	ldr	r1, [r5, #0]
 800656e:	291d      	cmp	r1, #29
 8006570:	d82b      	bhi.n	80065ca <__sflush_r+0xb2>
 8006572:	4a2a      	ldr	r2, [pc, #168]	@ (800661c <__sflush_r+0x104>)
 8006574:	410a      	asrs	r2, r1
 8006576:	07d6      	lsls	r6, r2, #31
 8006578:	d427      	bmi.n	80065ca <__sflush_r+0xb2>
 800657a:	2200      	movs	r2, #0
 800657c:	6062      	str	r2, [r4, #4]
 800657e:	04d9      	lsls	r1, r3, #19
 8006580:	6922      	ldr	r2, [r4, #16]
 8006582:	6022      	str	r2, [r4, #0]
 8006584:	d504      	bpl.n	8006590 <__sflush_r+0x78>
 8006586:	1c42      	adds	r2, r0, #1
 8006588:	d101      	bne.n	800658e <__sflush_r+0x76>
 800658a:	682b      	ldr	r3, [r5, #0]
 800658c:	b903      	cbnz	r3, 8006590 <__sflush_r+0x78>
 800658e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006590:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006592:	602f      	str	r7, [r5, #0]
 8006594:	b1b9      	cbz	r1, 80065c6 <__sflush_r+0xae>
 8006596:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800659a:	4299      	cmp	r1, r3
 800659c:	d002      	beq.n	80065a4 <__sflush_r+0x8c>
 800659e:	4628      	mov	r0, r5
 80065a0:	f7ff f8aa 	bl	80056f8 <_free_r>
 80065a4:	2300      	movs	r3, #0
 80065a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80065a8:	e00d      	b.n	80065c6 <__sflush_r+0xae>
 80065aa:	2301      	movs	r3, #1
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b0      	blx	r6
 80065b0:	4602      	mov	r2, r0
 80065b2:	1c50      	adds	r0, r2, #1
 80065b4:	d1c9      	bne.n	800654a <__sflush_r+0x32>
 80065b6:	682b      	ldr	r3, [r5, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0c6      	beq.n	800654a <__sflush_r+0x32>
 80065bc:	2b1d      	cmp	r3, #29
 80065be:	d001      	beq.n	80065c4 <__sflush_r+0xac>
 80065c0:	2b16      	cmp	r3, #22
 80065c2:	d11e      	bne.n	8006602 <__sflush_r+0xea>
 80065c4:	602f      	str	r7, [r5, #0]
 80065c6:	2000      	movs	r0, #0
 80065c8:	e022      	b.n	8006610 <__sflush_r+0xf8>
 80065ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ce:	b21b      	sxth	r3, r3
 80065d0:	e01b      	b.n	800660a <__sflush_r+0xf2>
 80065d2:	690f      	ldr	r7, [r1, #16]
 80065d4:	2f00      	cmp	r7, #0
 80065d6:	d0f6      	beq.n	80065c6 <__sflush_r+0xae>
 80065d8:	0793      	lsls	r3, r2, #30
 80065da:	680e      	ldr	r6, [r1, #0]
 80065dc:	bf08      	it	eq
 80065de:	694b      	ldreq	r3, [r1, #20]
 80065e0:	600f      	str	r7, [r1, #0]
 80065e2:	bf18      	it	ne
 80065e4:	2300      	movne	r3, #0
 80065e6:	eba6 0807 	sub.w	r8, r6, r7
 80065ea:	608b      	str	r3, [r1, #8]
 80065ec:	f1b8 0f00 	cmp.w	r8, #0
 80065f0:	dde9      	ble.n	80065c6 <__sflush_r+0xae>
 80065f2:	6a21      	ldr	r1, [r4, #32]
 80065f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065f6:	4643      	mov	r3, r8
 80065f8:	463a      	mov	r2, r7
 80065fa:	4628      	mov	r0, r5
 80065fc:	47b0      	blx	r6
 80065fe:	2800      	cmp	r0, #0
 8006600:	dc08      	bgt.n	8006614 <__sflush_r+0xfc>
 8006602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800660a:	81a3      	strh	r3, [r4, #12]
 800660c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006614:	4407      	add	r7, r0
 8006616:	eba8 0800 	sub.w	r8, r8, r0
 800661a:	e7e7      	b.n	80065ec <__sflush_r+0xd4>
 800661c:	dfbffffe 	.word	0xdfbffffe

08006620 <_fflush_r>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	690b      	ldr	r3, [r1, #16]
 8006624:	4605      	mov	r5, r0
 8006626:	460c      	mov	r4, r1
 8006628:	b913      	cbnz	r3, 8006630 <_fflush_r+0x10>
 800662a:	2500      	movs	r5, #0
 800662c:	4628      	mov	r0, r5
 800662e:	bd38      	pop	{r3, r4, r5, pc}
 8006630:	b118      	cbz	r0, 800663a <_fflush_r+0x1a>
 8006632:	6a03      	ldr	r3, [r0, #32]
 8006634:	b90b      	cbnz	r3, 800663a <_fflush_r+0x1a>
 8006636:	f7fe ff9b 	bl	8005570 <__sinit>
 800663a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0f3      	beq.n	800662a <_fflush_r+0xa>
 8006642:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006644:	07d0      	lsls	r0, r2, #31
 8006646:	d404      	bmi.n	8006652 <_fflush_r+0x32>
 8006648:	0599      	lsls	r1, r3, #22
 800664a:	d402      	bmi.n	8006652 <_fflush_r+0x32>
 800664c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800664e:	f7ff f850 	bl	80056f2 <__retarget_lock_acquire_recursive>
 8006652:	4628      	mov	r0, r5
 8006654:	4621      	mov	r1, r4
 8006656:	f7ff ff5f 	bl	8006518 <__sflush_r>
 800665a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800665c:	07da      	lsls	r2, r3, #31
 800665e:	4605      	mov	r5, r0
 8006660:	d4e4      	bmi.n	800662c <_fflush_r+0xc>
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	059b      	lsls	r3, r3, #22
 8006666:	d4e1      	bmi.n	800662c <_fflush_r+0xc>
 8006668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800666a:	f7ff f843 	bl	80056f4 <__retarget_lock_release_recursive>
 800666e:	e7dd      	b.n	800662c <_fflush_r+0xc>

08006670 <__malloc_lock>:
 8006670:	4801      	ldr	r0, [pc, #4]	@ (8006678 <__malloc_lock+0x8>)
 8006672:	f7ff b83e 	b.w	80056f2 <__retarget_lock_acquire_recursive>
 8006676:	bf00      	nop
 8006678:	20000558 	.word	0x20000558

0800667c <__malloc_unlock>:
 800667c:	4801      	ldr	r0, [pc, #4]	@ (8006684 <__malloc_unlock+0x8>)
 800667e:	f7ff b839 	b.w	80056f4 <__retarget_lock_release_recursive>
 8006682:	bf00      	nop
 8006684:	20000558 	.word	0x20000558

08006688 <__submore>:
 8006688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668c:	460c      	mov	r4, r1
 800668e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006690:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006694:	4299      	cmp	r1, r3
 8006696:	d11d      	bne.n	80066d4 <__submore+0x4c>
 8006698:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800669c:	f7ff fba6 	bl	8005dec <_malloc_r>
 80066a0:	b918      	cbnz	r0, 80066aa <__submore+0x22>
 80066a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066ae:	63a3      	str	r3, [r4, #56]	@ 0x38
 80066b0:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80066b4:	6360      	str	r0, [r4, #52]	@ 0x34
 80066b6:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80066ba:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80066be:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80066c2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80066c6:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80066ca:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80066ce:	6020      	str	r0, [r4, #0]
 80066d0:	2000      	movs	r0, #0
 80066d2:	e7e8      	b.n	80066a6 <__submore+0x1e>
 80066d4:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80066d6:	0077      	lsls	r7, r6, #1
 80066d8:	463a      	mov	r2, r7
 80066da:	f000 f80f 	bl	80066fc <_realloc_r>
 80066de:	4605      	mov	r5, r0
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d0de      	beq.n	80066a2 <__submore+0x1a>
 80066e4:	eb00 0806 	add.w	r8, r0, r6
 80066e8:	4601      	mov	r1, r0
 80066ea:	4632      	mov	r2, r6
 80066ec:	4640      	mov	r0, r8
 80066ee:	f000 fa47 	bl	8006b80 <memcpy>
 80066f2:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80066f6:	f8c4 8000 	str.w	r8, [r4]
 80066fa:	e7e9      	b.n	80066d0 <__submore+0x48>

080066fc <_realloc_r>:
 80066fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006700:	4680      	mov	r8, r0
 8006702:	4615      	mov	r5, r2
 8006704:	460c      	mov	r4, r1
 8006706:	b921      	cbnz	r1, 8006712 <_realloc_r+0x16>
 8006708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800670c:	4611      	mov	r1, r2
 800670e:	f7ff bb6d 	b.w	8005dec <_malloc_r>
 8006712:	b92a      	cbnz	r2, 8006720 <_realloc_r+0x24>
 8006714:	f7fe fff0 	bl	80056f8 <_free_r>
 8006718:	2400      	movs	r4, #0
 800671a:	4620      	mov	r0, r4
 800671c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006720:	f000 fa3c 	bl	8006b9c <_malloc_usable_size_r>
 8006724:	4285      	cmp	r5, r0
 8006726:	4606      	mov	r6, r0
 8006728:	d802      	bhi.n	8006730 <_realloc_r+0x34>
 800672a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800672e:	d8f4      	bhi.n	800671a <_realloc_r+0x1e>
 8006730:	4629      	mov	r1, r5
 8006732:	4640      	mov	r0, r8
 8006734:	f7ff fb5a 	bl	8005dec <_malloc_r>
 8006738:	4607      	mov	r7, r0
 800673a:	2800      	cmp	r0, #0
 800673c:	d0ec      	beq.n	8006718 <_realloc_r+0x1c>
 800673e:	42b5      	cmp	r5, r6
 8006740:	462a      	mov	r2, r5
 8006742:	4621      	mov	r1, r4
 8006744:	bf28      	it	cs
 8006746:	4632      	movcs	r2, r6
 8006748:	f000 fa1a 	bl	8006b80 <memcpy>
 800674c:	4621      	mov	r1, r4
 800674e:	4640      	mov	r0, r8
 8006750:	f7fe ffd2 	bl	80056f8 <_free_r>
 8006754:	463c      	mov	r4, r7
 8006756:	e7e0      	b.n	800671a <_realloc_r+0x1e>

08006758 <_strtol_l.constprop.0>:
 8006758:	2b24      	cmp	r3, #36	@ 0x24
 800675a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800675e:	4686      	mov	lr, r0
 8006760:	4690      	mov	r8, r2
 8006762:	d801      	bhi.n	8006768 <_strtol_l.constprop.0+0x10>
 8006764:	2b01      	cmp	r3, #1
 8006766:	d106      	bne.n	8006776 <_strtol_l.constprop.0+0x1e>
 8006768:	f7fe ff98 	bl	800569c <__errno>
 800676c:	2316      	movs	r3, #22
 800676e:	6003      	str	r3, [r0, #0]
 8006770:	2000      	movs	r0, #0
 8006772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006776:	4834      	ldr	r0, [pc, #208]	@ (8006848 <_strtol_l.constprop.0+0xf0>)
 8006778:	460d      	mov	r5, r1
 800677a:	462a      	mov	r2, r5
 800677c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006780:	5d06      	ldrb	r6, [r0, r4]
 8006782:	f016 0608 	ands.w	r6, r6, #8
 8006786:	d1f8      	bne.n	800677a <_strtol_l.constprop.0+0x22>
 8006788:	2c2d      	cmp	r4, #45	@ 0x2d
 800678a:	d12d      	bne.n	80067e8 <_strtol_l.constprop.0+0x90>
 800678c:	782c      	ldrb	r4, [r5, #0]
 800678e:	2601      	movs	r6, #1
 8006790:	1c95      	adds	r5, r2, #2
 8006792:	f033 0210 	bics.w	r2, r3, #16
 8006796:	d109      	bne.n	80067ac <_strtol_l.constprop.0+0x54>
 8006798:	2c30      	cmp	r4, #48	@ 0x30
 800679a:	d12a      	bne.n	80067f2 <_strtol_l.constprop.0+0x9a>
 800679c:	782a      	ldrb	r2, [r5, #0]
 800679e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80067a2:	2a58      	cmp	r2, #88	@ 0x58
 80067a4:	d125      	bne.n	80067f2 <_strtol_l.constprop.0+0x9a>
 80067a6:	786c      	ldrb	r4, [r5, #1]
 80067a8:	2310      	movs	r3, #16
 80067aa:	3502      	adds	r5, #2
 80067ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80067b0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80067b4:	2200      	movs	r2, #0
 80067b6:	fbbc f9f3 	udiv	r9, ip, r3
 80067ba:	4610      	mov	r0, r2
 80067bc:	fb03 ca19 	mls	sl, r3, r9, ip
 80067c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80067c4:	2f09      	cmp	r7, #9
 80067c6:	d81b      	bhi.n	8006800 <_strtol_l.constprop.0+0xa8>
 80067c8:	463c      	mov	r4, r7
 80067ca:	42a3      	cmp	r3, r4
 80067cc:	dd27      	ble.n	800681e <_strtol_l.constprop.0+0xc6>
 80067ce:	1c57      	adds	r7, r2, #1
 80067d0:	d007      	beq.n	80067e2 <_strtol_l.constprop.0+0x8a>
 80067d2:	4581      	cmp	r9, r0
 80067d4:	d320      	bcc.n	8006818 <_strtol_l.constprop.0+0xc0>
 80067d6:	d101      	bne.n	80067dc <_strtol_l.constprop.0+0x84>
 80067d8:	45a2      	cmp	sl, r4
 80067da:	db1d      	blt.n	8006818 <_strtol_l.constprop.0+0xc0>
 80067dc:	fb00 4003 	mla	r0, r0, r3, r4
 80067e0:	2201      	movs	r2, #1
 80067e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067e6:	e7eb      	b.n	80067c0 <_strtol_l.constprop.0+0x68>
 80067e8:	2c2b      	cmp	r4, #43	@ 0x2b
 80067ea:	bf04      	itt	eq
 80067ec:	782c      	ldrbeq	r4, [r5, #0]
 80067ee:	1c95      	addeq	r5, r2, #2
 80067f0:	e7cf      	b.n	8006792 <_strtol_l.constprop.0+0x3a>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1da      	bne.n	80067ac <_strtol_l.constprop.0+0x54>
 80067f6:	2c30      	cmp	r4, #48	@ 0x30
 80067f8:	bf0c      	ite	eq
 80067fa:	2308      	moveq	r3, #8
 80067fc:	230a      	movne	r3, #10
 80067fe:	e7d5      	b.n	80067ac <_strtol_l.constprop.0+0x54>
 8006800:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006804:	2f19      	cmp	r7, #25
 8006806:	d801      	bhi.n	800680c <_strtol_l.constprop.0+0xb4>
 8006808:	3c37      	subs	r4, #55	@ 0x37
 800680a:	e7de      	b.n	80067ca <_strtol_l.constprop.0+0x72>
 800680c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006810:	2f19      	cmp	r7, #25
 8006812:	d804      	bhi.n	800681e <_strtol_l.constprop.0+0xc6>
 8006814:	3c57      	subs	r4, #87	@ 0x57
 8006816:	e7d8      	b.n	80067ca <_strtol_l.constprop.0+0x72>
 8006818:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800681c:	e7e1      	b.n	80067e2 <_strtol_l.constprop.0+0x8a>
 800681e:	1c53      	adds	r3, r2, #1
 8006820:	d108      	bne.n	8006834 <_strtol_l.constprop.0+0xdc>
 8006822:	2322      	movs	r3, #34	@ 0x22
 8006824:	f8ce 3000 	str.w	r3, [lr]
 8006828:	4660      	mov	r0, ip
 800682a:	f1b8 0f00 	cmp.w	r8, #0
 800682e:	d0a0      	beq.n	8006772 <_strtol_l.constprop.0+0x1a>
 8006830:	1e69      	subs	r1, r5, #1
 8006832:	e006      	b.n	8006842 <_strtol_l.constprop.0+0xea>
 8006834:	b106      	cbz	r6, 8006838 <_strtol_l.constprop.0+0xe0>
 8006836:	4240      	negs	r0, r0
 8006838:	f1b8 0f00 	cmp.w	r8, #0
 800683c:	d099      	beq.n	8006772 <_strtol_l.constprop.0+0x1a>
 800683e:	2a00      	cmp	r2, #0
 8006840:	d1f6      	bne.n	8006830 <_strtol_l.constprop.0+0xd8>
 8006842:	f8c8 1000 	str.w	r1, [r8]
 8006846:	e794      	b.n	8006772 <_strtol_l.constprop.0+0x1a>
 8006848:	08006d07 	.word	0x08006d07

0800684c <_strtol_r>:
 800684c:	f7ff bf84 	b.w	8006758 <_strtol_l.constprop.0>

08006850 <_strtoul_l.constprop.0>:
 8006850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006854:	4e34      	ldr	r6, [pc, #208]	@ (8006928 <_strtoul_l.constprop.0+0xd8>)
 8006856:	4686      	mov	lr, r0
 8006858:	460d      	mov	r5, r1
 800685a:	4628      	mov	r0, r5
 800685c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006860:	5d37      	ldrb	r7, [r6, r4]
 8006862:	f017 0708 	ands.w	r7, r7, #8
 8006866:	d1f8      	bne.n	800685a <_strtoul_l.constprop.0+0xa>
 8006868:	2c2d      	cmp	r4, #45	@ 0x2d
 800686a:	d12f      	bne.n	80068cc <_strtoul_l.constprop.0+0x7c>
 800686c:	782c      	ldrb	r4, [r5, #0]
 800686e:	2701      	movs	r7, #1
 8006870:	1c85      	adds	r5, r0, #2
 8006872:	f033 0010 	bics.w	r0, r3, #16
 8006876:	d109      	bne.n	800688c <_strtoul_l.constprop.0+0x3c>
 8006878:	2c30      	cmp	r4, #48	@ 0x30
 800687a:	d12c      	bne.n	80068d6 <_strtoul_l.constprop.0+0x86>
 800687c:	7828      	ldrb	r0, [r5, #0]
 800687e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006882:	2858      	cmp	r0, #88	@ 0x58
 8006884:	d127      	bne.n	80068d6 <_strtoul_l.constprop.0+0x86>
 8006886:	786c      	ldrb	r4, [r5, #1]
 8006888:	2310      	movs	r3, #16
 800688a:	3502      	adds	r5, #2
 800688c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8006890:	2600      	movs	r6, #0
 8006892:	fbb8 f8f3 	udiv	r8, r8, r3
 8006896:	fb03 f908 	mul.w	r9, r3, r8
 800689a:	ea6f 0909 	mvn.w	r9, r9
 800689e:	4630      	mov	r0, r6
 80068a0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80068a4:	f1bc 0f09 	cmp.w	ip, #9
 80068a8:	d81c      	bhi.n	80068e4 <_strtoul_l.constprop.0+0x94>
 80068aa:	4664      	mov	r4, ip
 80068ac:	42a3      	cmp	r3, r4
 80068ae:	dd2a      	ble.n	8006906 <_strtoul_l.constprop.0+0xb6>
 80068b0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80068b4:	d007      	beq.n	80068c6 <_strtoul_l.constprop.0+0x76>
 80068b6:	4580      	cmp	r8, r0
 80068b8:	d322      	bcc.n	8006900 <_strtoul_l.constprop.0+0xb0>
 80068ba:	d101      	bne.n	80068c0 <_strtoul_l.constprop.0+0x70>
 80068bc:	45a1      	cmp	r9, r4
 80068be:	db1f      	blt.n	8006900 <_strtoul_l.constprop.0+0xb0>
 80068c0:	fb00 4003 	mla	r0, r0, r3, r4
 80068c4:	2601      	movs	r6, #1
 80068c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068ca:	e7e9      	b.n	80068a0 <_strtoul_l.constprop.0+0x50>
 80068cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80068ce:	bf04      	itt	eq
 80068d0:	782c      	ldrbeq	r4, [r5, #0]
 80068d2:	1c85      	addeq	r5, r0, #2
 80068d4:	e7cd      	b.n	8006872 <_strtoul_l.constprop.0+0x22>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1d8      	bne.n	800688c <_strtoul_l.constprop.0+0x3c>
 80068da:	2c30      	cmp	r4, #48	@ 0x30
 80068dc:	bf0c      	ite	eq
 80068de:	2308      	moveq	r3, #8
 80068e0:	230a      	movne	r3, #10
 80068e2:	e7d3      	b.n	800688c <_strtoul_l.constprop.0+0x3c>
 80068e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80068e8:	f1bc 0f19 	cmp.w	ip, #25
 80068ec:	d801      	bhi.n	80068f2 <_strtoul_l.constprop.0+0xa2>
 80068ee:	3c37      	subs	r4, #55	@ 0x37
 80068f0:	e7dc      	b.n	80068ac <_strtoul_l.constprop.0+0x5c>
 80068f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80068f6:	f1bc 0f19 	cmp.w	ip, #25
 80068fa:	d804      	bhi.n	8006906 <_strtoul_l.constprop.0+0xb6>
 80068fc:	3c57      	subs	r4, #87	@ 0x57
 80068fe:	e7d5      	b.n	80068ac <_strtoul_l.constprop.0+0x5c>
 8006900:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8006904:	e7df      	b.n	80068c6 <_strtoul_l.constprop.0+0x76>
 8006906:	1c73      	adds	r3, r6, #1
 8006908:	d106      	bne.n	8006918 <_strtoul_l.constprop.0+0xc8>
 800690a:	2322      	movs	r3, #34	@ 0x22
 800690c:	f8ce 3000 	str.w	r3, [lr]
 8006910:	4630      	mov	r0, r6
 8006912:	b932      	cbnz	r2, 8006922 <_strtoul_l.constprop.0+0xd2>
 8006914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006918:	b107      	cbz	r7, 800691c <_strtoul_l.constprop.0+0xcc>
 800691a:	4240      	negs	r0, r0
 800691c:	2a00      	cmp	r2, #0
 800691e:	d0f9      	beq.n	8006914 <_strtoul_l.constprop.0+0xc4>
 8006920:	b106      	cbz	r6, 8006924 <_strtoul_l.constprop.0+0xd4>
 8006922:	1e69      	subs	r1, r5, #1
 8006924:	6011      	str	r1, [r2, #0]
 8006926:	e7f5      	b.n	8006914 <_strtoul_l.constprop.0+0xc4>
 8006928:	08006d07 	.word	0x08006d07

0800692c <_strtoul_r>:
 800692c:	f7ff bf90 	b.w	8006850 <_strtoul_l.constprop.0>

08006930 <__swbuf_r>:
 8006930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006932:	460e      	mov	r6, r1
 8006934:	4614      	mov	r4, r2
 8006936:	4605      	mov	r5, r0
 8006938:	b118      	cbz	r0, 8006942 <__swbuf_r+0x12>
 800693a:	6a03      	ldr	r3, [r0, #32]
 800693c:	b90b      	cbnz	r3, 8006942 <__swbuf_r+0x12>
 800693e:	f7fe fe17 	bl	8005570 <__sinit>
 8006942:	69a3      	ldr	r3, [r4, #24]
 8006944:	60a3      	str	r3, [r4, #8]
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	071a      	lsls	r2, r3, #28
 800694a:	d501      	bpl.n	8006950 <__swbuf_r+0x20>
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	b943      	cbnz	r3, 8006962 <__swbuf_r+0x32>
 8006950:	4621      	mov	r1, r4
 8006952:	4628      	mov	r0, r5
 8006954:	f000 f82a 	bl	80069ac <__swsetup_r>
 8006958:	b118      	cbz	r0, 8006962 <__swbuf_r+0x32>
 800695a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800695e:	4638      	mov	r0, r7
 8006960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	6922      	ldr	r2, [r4, #16]
 8006966:	1a98      	subs	r0, r3, r2
 8006968:	6963      	ldr	r3, [r4, #20]
 800696a:	b2f6      	uxtb	r6, r6
 800696c:	4283      	cmp	r3, r0
 800696e:	4637      	mov	r7, r6
 8006970:	dc05      	bgt.n	800697e <__swbuf_r+0x4e>
 8006972:	4621      	mov	r1, r4
 8006974:	4628      	mov	r0, r5
 8006976:	f7ff fe53 	bl	8006620 <_fflush_r>
 800697a:	2800      	cmp	r0, #0
 800697c:	d1ed      	bne.n	800695a <__swbuf_r+0x2a>
 800697e:	68a3      	ldr	r3, [r4, #8]
 8006980:	3b01      	subs	r3, #1
 8006982:	60a3      	str	r3, [r4, #8]
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	6022      	str	r2, [r4, #0]
 800698a:	701e      	strb	r6, [r3, #0]
 800698c:	6962      	ldr	r2, [r4, #20]
 800698e:	1c43      	adds	r3, r0, #1
 8006990:	429a      	cmp	r2, r3
 8006992:	d004      	beq.n	800699e <__swbuf_r+0x6e>
 8006994:	89a3      	ldrh	r3, [r4, #12]
 8006996:	07db      	lsls	r3, r3, #31
 8006998:	d5e1      	bpl.n	800695e <__swbuf_r+0x2e>
 800699a:	2e0a      	cmp	r6, #10
 800699c:	d1df      	bne.n	800695e <__swbuf_r+0x2e>
 800699e:	4621      	mov	r1, r4
 80069a0:	4628      	mov	r0, r5
 80069a2:	f7ff fe3d 	bl	8006620 <_fflush_r>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d0d9      	beq.n	800695e <__swbuf_r+0x2e>
 80069aa:	e7d6      	b.n	800695a <__swbuf_r+0x2a>

080069ac <__swsetup_r>:
 80069ac:	b538      	push	{r3, r4, r5, lr}
 80069ae:	4b29      	ldr	r3, [pc, #164]	@ (8006a54 <__swsetup_r+0xa8>)
 80069b0:	4605      	mov	r5, r0
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	460c      	mov	r4, r1
 80069b6:	b118      	cbz	r0, 80069c0 <__swsetup_r+0x14>
 80069b8:	6a03      	ldr	r3, [r0, #32]
 80069ba:	b90b      	cbnz	r3, 80069c0 <__swsetup_r+0x14>
 80069bc:	f7fe fdd8 	bl	8005570 <__sinit>
 80069c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069c4:	0719      	lsls	r1, r3, #28
 80069c6:	d422      	bmi.n	8006a0e <__swsetup_r+0x62>
 80069c8:	06da      	lsls	r2, r3, #27
 80069ca:	d407      	bmi.n	80069dc <__swsetup_r+0x30>
 80069cc:	2209      	movs	r2, #9
 80069ce:	602a      	str	r2, [r5, #0]
 80069d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069d4:	81a3      	strh	r3, [r4, #12]
 80069d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069da:	e033      	b.n	8006a44 <__swsetup_r+0x98>
 80069dc:	0758      	lsls	r0, r3, #29
 80069de:	d512      	bpl.n	8006a06 <__swsetup_r+0x5a>
 80069e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069e2:	b141      	cbz	r1, 80069f6 <__swsetup_r+0x4a>
 80069e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069e8:	4299      	cmp	r1, r3
 80069ea:	d002      	beq.n	80069f2 <__swsetup_r+0x46>
 80069ec:	4628      	mov	r0, r5
 80069ee:	f7fe fe83 	bl	80056f8 <_free_r>
 80069f2:	2300      	movs	r3, #0
 80069f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069fc:	81a3      	strh	r3, [r4, #12]
 80069fe:	2300      	movs	r3, #0
 8006a00:	6063      	str	r3, [r4, #4]
 8006a02:	6923      	ldr	r3, [r4, #16]
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f043 0308 	orr.w	r3, r3, #8
 8006a0c:	81a3      	strh	r3, [r4, #12]
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	b94b      	cbnz	r3, 8006a26 <__swsetup_r+0x7a>
 8006a12:	89a3      	ldrh	r3, [r4, #12]
 8006a14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a1c:	d003      	beq.n	8006a26 <__swsetup_r+0x7a>
 8006a1e:	4621      	mov	r1, r4
 8006a20:	4628      	mov	r0, r5
 8006a22:	f000 f83f 	bl	8006aa4 <__smakebuf_r>
 8006a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a2a:	f013 0201 	ands.w	r2, r3, #1
 8006a2e:	d00a      	beq.n	8006a46 <__swsetup_r+0x9a>
 8006a30:	2200      	movs	r2, #0
 8006a32:	60a2      	str	r2, [r4, #8]
 8006a34:	6962      	ldr	r2, [r4, #20]
 8006a36:	4252      	negs	r2, r2
 8006a38:	61a2      	str	r2, [r4, #24]
 8006a3a:	6922      	ldr	r2, [r4, #16]
 8006a3c:	b942      	cbnz	r2, 8006a50 <__swsetup_r+0xa4>
 8006a3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a42:	d1c5      	bne.n	80069d0 <__swsetup_r+0x24>
 8006a44:	bd38      	pop	{r3, r4, r5, pc}
 8006a46:	0799      	lsls	r1, r3, #30
 8006a48:	bf58      	it	pl
 8006a4a:	6962      	ldrpl	r2, [r4, #20]
 8006a4c:	60a2      	str	r2, [r4, #8]
 8006a4e:	e7f4      	b.n	8006a3a <__swsetup_r+0x8e>
 8006a50:	2000      	movs	r0, #0
 8006a52:	e7f7      	b.n	8006a44 <__swsetup_r+0x98>
 8006a54:	20000030 	.word	0x20000030

08006a58 <__swhatbuf_r>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a60:	2900      	cmp	r1, #0
 8006a62:	b096      	sub	sp, #88	@ 0x58
 8006a64:	4615      	mov	r5, r2
 8006a66:	461e      	mov	r6, r3
 8006a68:	da0d      	bge.n	8006a86 <__swhatbuf_r+0x2e>
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a70:	f04f 0100 	mov.w	r1, #0
 8006a74:	bf14      	ite	ne
 8006a76:	2340      	movne	r3, #64	@ 0x40
 8006a78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	6031      	str	r1, [r6, #0]
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	b016      	add	sp, #88	@ 0x58
 8006a84:	bd70      	pop	{r4, r5, r6, pc}
 8006a86:	466a      	mov	r2, sp
 8006a88:	f000 f848 	bl	8006b1c <_fstat_r>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	dbec      	blt.n	8006a6a <__swhatbuf_r+0x12>
 8006a90:	9901      	ldr	r1, [sp, #4]
 8006a92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a9a:	4259      	negs	r1, r3
 8006a9c:	4159      	adcs	r1, r3
 8006a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006aa2:	e7eb      	b.n	8006a7c <__swhatbuf_r+0x24>

08006aa4 <__smakebuf_r>:
 8006aa4:	898b      	ldrh	r3, [r1, #12]
 8006aa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aa8:	079d      	lsls	r5, r3, #30
 8006aaa:	4606      	mov	r6, r0
 8006aac:	460c      	mov	r4, r1
 8006aae:	d507      	bpl.n	8006ac0 <__smakebuf_r+0x1c>
 8006ab0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	6123      	str	r3, [r4, #16]
 8006ab8:	2301      	movs	r3, #1
 8006aba:	6163      	str	r3, [r4, #20]
 8006abc:	b003      	add	sp, #12
 8006abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac0:	ab01      	add	r3, sp, #4
 8006ac2:	466a      	mov	r2, sp
 8006ac4:	f7ff ffc8 	bl	8006a58 <__swhatbuf_r>
 8006ac8:	9f00      	ldr	r7, [sp, #0]
 8006aca:	4605      	mov	r5, r0
 8006acc:	4639      	mov	r1, r7
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f7ff f98c 	bl	8005dec <_malloc_r>
 8006ad4:	b948      	cbnz	r0, 8006aea <__smakebuf_r+0x46>
 8006ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ada:	059a      	lsls	r2, r3, #22
 8006adc:	d4ee      	bmi.n	8006abc <__smakebuf_r+0x18>
 8006ade:	f023 0303 	bic.w	r3, r3, #3
 8006ae2:	f043 0302 	orr.w	r3, r3, #2
 8006ae6:	81a3      	strh	r3, [r4, #12]
 8006ae8:	e7e2      	b.n	8006ab0 <__smakebuf_r+0xc>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	6020      	str	r0, [r4, #0]
 8006aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006afa:	b15b      	cbz	r3, 8006b14 <__smakebuf_r+0x70>
 8006afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b00:	4630      	mov	r0, r6
 8006b02:	f000 f81d 	bl	8006b40 <_isatty_r>
 8006b06:	b128      	cbz	r0, 8006b14 <__smakebuf_r+0x70>
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	f023 0303 	bic.w	r3, r3, #3
 8006b0e:	f043 0301 	orr.w	r3, r3, #1
 8006b12:	81a3      	strh	r3, [r4, #12]
 8006b14:	89a3      	ldrh	r3, [r4, #12]
 8006b16:	431d      	orrs	r5, r3
 8006b18:	81a5      	strh	r5, [r4, #12]
 8006b1a:	e7cf      	b.n	8006abc <__smakebuf_r+0x18>

08006b1c <_fstat_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4d07      	ldr	r5, [pc, #28]	@ (8006b3c <_fstat_r+0x20>)
 8006b20:	2300      	movs	r3, #0
 8006b22:	4604      	mov	r4, r0
 8006b24:	4608      	mov	r0, r1
 8006b26:	4611      	mov	r1, r2
 8006b28:	602b      	str	r3, [r5, #0]
 8006b2a:	f7fa fd02 	bl	8001532 <_fstat>
 8006b2e:	1c43      	adds	r3, r0, #1
 8006b30:	d102      	bne.n	8006b38 <_fstat_r+0x1c>
 8006b32:	682b      	ldr	r3, [r5, #0]
 8006b34:	b103      	cbz	r3, 8006b38 <_fstat_r+0x1c>
 8006b36:	6023      	str	r3, [r4, #0]
 8006b38:	bd38      	pop	{r3, r4, r5, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000554 	.word	0x20000554

08006b40 <_isatty_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d06      	ldr	r5, [pc, #24]	@ (8006b5c <_isatty_r+0x1c>)
 8006b44:	2300      	movs	r3, #0
 8006b46:	4604      	mov	r4, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	f7fa fd01 	bl	8001552 <_isatty>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_isatty_r+0x1a>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_isatty_r+0x1a>
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	20000554 	.word	0x20000554

08006b60 <_sbrk_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4d06      	ldr	r5, [pc, #24]	@ (8006b7c <_sbrk_r+0x1c>)
 8006b64:	2300      	movs	r3, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	4608      	mov	r0, r1
 8006b6a:	602b      	str	r3, [r5, #0]
 8006b6c:	f7fa fd0a 	bl	8001584 <_sbrk>
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	d102      	bne.n	8006b7a <_sbrk_r+0x1a>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	b103      	cbz	r3, 8006b7a <_sbrk_r+0x1a>
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	20000554 	.word	0x20000554

08006b80 <memcpy>:
 8006b80:	440a      	add	r2, r1
 8006b82:	4291      	cmp	r1, r2
 8006b84:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006b88:	d100      	bne.n	8006b8c <memcpy+0xc>
 8006b8a:	4770      	bx	lr
 8006b8c:	b510      	push	{r4, lr}
 8006b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b96:	4291      	cmp	r1, r2
 8006b98:	d1f9      	bne.n	8006b8e <memcpy+0xe>
 8006b9a:	bd10      	pop	{r4, pc}

08006b9c <_malloc_usable_size_r>:
 8006b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ba0:	1f18      	subs	r0, r3, #4
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bfbc      	itt	lt
 8006ba6:	580b      	ldrlt	r3, [r1, r0]
 8006ba8:	18c0      	addlt	r0, r0, r3
 8006baa:	4770      	bx	lr

08006bac <_init>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	bf00      	nop
 8006bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb2:	bc08      	pop	{r3}
 8006bb4:	469e      	mov	lr, r3
 8006bb6:	4770      	bx	lr

08006bb8 <_fini>:
 8006bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bba:	bf00      	nop
 8006bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bbe:	bc08      	pop	{r3}
 8006bc0:	469e      	mov	lr, r3
 8006bc2:	4770      	bx	lr
